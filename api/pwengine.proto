syntax = "proto3";

package pathwar.engine;

//import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";
import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options/annotations.proto";

import "pwsso.proto";
import "pwdb.proto";

option go_package = "pathwar.land/go/pkg/pwengine";
option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

service Engine {
  //
  // User
  //

  rpc UserGetSession(UserGetSessionInput) returns (UserGetSessionOutput) { option (google.api.http) = {get: "/user/session"}; };
  rpc UserSetPreferences(UserSetPreferencesInput) returns (UserSetPreferencesOutput) { option (google.api.http) = {post: "/user/preferences"; body: "*"}; };
  rpc UserDeleteAccount(UserDeleteAccountInput) returns (UserDeleteAccountOutput) { option (google.api.http) = {post: "/user/delete-account"; body: "*"}; };

  //
  // Challenge
  //

  rpc ChallengeList(ChallengeListInput) returns (ChallengeListOutput) { option (google.api.http) = {get: "/challenges"}; };
  rpc ChallengeGet(ChallengeGetInput) returns (ChallengeGetOutput) { option (google.api.http) = {get: "/challenge"}; };
  rpc SeasonChallengeList(SeasonChallengeListInput) returns (SeasonChallengeListOutput) { option (google.api.http) = {get: "/season-challenges"}; };
  rpc SeasonChallengeGet(SeasonChallengeGetInput) returns (SeasonChallengeGetOutput) { option (google.api.http) = {get: "/season-challenge"}; };
  rpc SeasonChallengeBuy(SeasonChallengeBuyInput) returns (SeasonChallengeBuyOutput) { option (google.api.http) = {post: "/season-challenge/buy"; body: "*"}; };
  rpc ChallengeSubscriptionValidate(ChallengeSubscriptionValidateInput) returns (ChallengeSubscriptionValidateOutput) { option (google.api.http) = {post: "/challenge-subscription/validate"; body: "*"}; };
  rpc ChallengeSubscriptionClose(ChallengeSubscriptionCloseInput) returns (ChallengeSubscriptionCloseOutput) { option (google.api.http) = {post: "/challenge-subscription/close"; body: "*"}; };

  //
  // Organization
  //

  rpc OrganizationList(OrganizationListInput) returns (OrganizationListOutput) { option (google.api.http) = {get: "/organizations"}; };

  //
  // Team
  //

  rpc TeamList(TeamListInput) returns (TeamListOutput) { option (google.api.http) = {get: "/teams"}; };
  rpc TeamGet(TeamGetInput) returns (TeamGetOutput) { option (google.api.http) = {get: "/team"}; };

  //
  // Tool
  //

  rpc ToolPing(Void) returns (Void) { option (google.api.http) = {get: "/ping"}; };
  rpc ToolStatus(Void) returns (Status) { option (google.api.http) = {get: "/status"}; }
  rpc ToolInfo(Void) returns (Info) { option (google.api.http) = {get: "/info"}; };
  rpc ToolGenerateFakeData(Void) returns (Void) { option (google.api.http) = {post: "/tool/generate-fake-data"}; };
  rpc ToolDBDump(Void) returns (pathwar.db.Dump) { option (google.api.http) = {get: "/tool/sql-dump"}; };
}

//
// Input/Output messages
//

message TeamGetInput  { int64 team_id = 1 [(gogoproto.customname) = "TeamID"]; }
message TeamGetOutput { pathwar.db.Team item = 1; }

message SeasonChallengeListInput  { int64 season_id = 1 [(gogoproto.customname) = "SeasonID"]; }
message SeasonChallengeListOutput { repeated pathwar.db.SeasonChallenge items = 1; }

message SeasonChallengeGetInput  { int64 season_challenge_id = 1 [(gogoproto.customname) = "SeasonChallengeID"]; }
message SeasonChallengeGetOutput { pathwar.db.SeasonChallenge item = 1; }

message ChallengeGetInput  { int64 challenge_id = 1 [(gogoproto.customname) = "ChallengeID"]; }
message ChallengeGetOutput { pathwar.db.Challenge item = 1; }

message SeasonChallengeBuyInput  {
  int64 season_challenge_id = 1 [(gogoproto.customname) = "SeasonChallengeID"];
  int64 team_id = 2 [(gogoproto.customname) = "TeamID"];
}
message SeasonChallengeBuyOutput { pathwar.db.ChallengeSubscription challenge_subscription = 1; }

message ChallengeSubscriptionValidateInput  {
  int64 challenge_subscription_id = 1 [(gogoproto.customname) = "ChallengeSubscriptionID"];
  string passphrase = 2;
  string comment = 3;
}
message ChallengeSubscriptionValidateOutput {
  pathwar.db.ChallengeValidation challenge_validation = 1;
}

message ChallengeSubscriptionCloseInput  { int64 challenge_subscription_id = 1 [(gogoproto.customname) = "ChallengeSubscriptionID"]; }
message ChallengeSubscriptionCloseOutput { pathwar.db.ChallengeSubscription challenge_subscription = 1; }

message TeamListInput  { int64 season_id = 1 [(gogoproto.customname) = "SeasonID"]; }
message TeamListOutput { repeated pathwar.db.Team items = 1; }

message UserSetPreferencesInput {
  int64 active_season_id = 1 [(gogoproto.customname) = "ActiveSeasonID"];
  // bool dark_mode
}
message UserSetPreferencesOutput {}

message UserDeleteAccountInput {
  string reason = 1;
  // FIXME: captcha
}
message UserDeleteAccountOutput {}

message OrganizationListInput  {}
message OrganizationListOutput { repeated pathwar.db.Organization items = 1; }

message ChallengeListInput  {}
message ChallengeListOutput { repeated pathwar.db.Challenge items = 1; }

message UserGetSessionInput  {}
message UserGetSessionOutput {
  message SeasonAndTeam {
    pathwar.db.Season season = 1;
    pathwar.db.Team team = 2;
    bool is_active = 3;
  }

  pathwar.db.User user = 1;
  bool is_new_user = 2;
  pathwar.sso.Claims claims = 3;
  int32 notifications = 4;
  repeated SeasonAndTeam seasons = 5;
}

//
// high-level messages
//

message Status {
  bool everything_is_ok = 1 [(gogoproto.customname) = "EverythingIsOK"];
  // FIXME: add more tests
}

message Info {
  string version = 1;  // git tag
  int32 uptime = 2;    // seconds
  string commit = 3;   // git sha
  string built_at = 4; // date
  string built_by = 5; // builder
}


//
// Swagger tuning
//

// Void is an empty message
message Void {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    example: { value: '{}' };
  };
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  host: "api.pathwar.land";
  base_path: "/";
  info: {
    title: "Pathwar API";
    version: "1.0",
    contact: {
      name: "Pathwar Staff";
      url: "https://github.com/pathwar/pathwar";
      email: "staff@pathwar.land";
    };
    license: {
      name: "(Apache-2.0 OR MIT)";
      url: "https://github.com/pathwar/pathwar/blob/master/COPYRIGHT";
    };
  };
  external_docs: {
    url: "https://github.com/pathwar/pathwar";
    description: "More about Pathwar";
  };
  //schemes: HTTP;
  schemes: HTTPS;
  schemes: WSS;
  consumes: "application/json";
  produces: "application/json";

  security_definitions: {
    security: {
      key: "BasicAuth";
      value: {
        type: TYPE_BASIC;
      };
    };
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "X-API-Key";
      };
    };
  };
  security: {
    security_requirement: {
      key: "BasicAuth";
      value: {};
    };
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    };
  };
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
    };
  };
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        };
      };
    };
  };
};
