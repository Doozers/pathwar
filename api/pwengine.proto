syntax = "proto3";

package pathwar.engine;

//import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";
import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options/annotations.proto";

import "pwsso.proto";
import "pwdb.proto";

option go_package = "pathwar.land/go/pkg/pwengine";
option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  host: "api.pathwar.land";
  base_path: "/";
  info: {
    title: "Pathwar API";
    version: "1.0",
    contact: {
      name: "Pathwar Staff";
      url: "https://github.com/pathwar/pathwar";
      email: "staff@pathwar.land";
    };
    license: {
      name: "(Apache-2.0 OR MIT)";
      url: "https://github.com/pathwar/pathwar/blob/master/COPYRIGHT";
    };
  };
  external_docs: {
    url: "https://github.com/pathwar/pathwar";
    description: "More about Pathwar";
  };
  //schemes: HTTP;
  schemes: HTTPS;
  schemes: WSS;
  consumes: "application/json";
  produces: "application/json";

  security_definitions: {
    security: {
      key: "BasicAuth";
      value: {
        type: TYPE_BASIC;
      };
    };
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "X-API-Key";
      };
    };
  };
  security: {
    security_requirement: {
      key: "BasicAuth";
      value: {};
    };
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    };
  };
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
    };
  };
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        };
      };
    };
  };
};

service Engine {
  //
  // User
  //

  rpc UserGetSession(Void) returns (UserGetSessionOutput) { option (google.api.http) = {get: "/user/session"}; };
  rpc UserSetPreferences(UserSetPreferencesInput) returns (Void) { option (google.api.http) = {post: "/user/preferences"; body: "*"}; };

  //
  // Challenge
  //

  rpc ChallengeList(Void) returns (ChallengeListOutput) { option (google.api.http) = {get: "/challenges"}; };
  rpc ChallengeGet(ChallengeGetInput) returns (ChallengeGetOutput) { option (google.api.http) = {get: "/challenge"}; };

  //
  // Organization
  //

  rpc OrganizationList(Void) returns (OrganizationListOutput) { option (google.api.http) = {get: "/organizations"}; };

  //
  // Team
  //

  rpc TeamList(TeamListInput) returns (TeamListOutput) { option (google.api.http) = {get: "/taems"}; };
  rpc TeamGet(TeamGetInput) returns (TeamGetOutput) { option (google.api.http) = {get: "/team"}; };

  //
  // Tool
  //

  rpc ToolPing(Void) returns (Void) { option (google.api.http) = {get: "/ping"}; };
  rpc ToolStatus(Void) returns (Status) { option (google.api.http) = {get: "/status"}; }
  rpc ToolInfo(Void) returns (Info) { option (google.api.http) = {get: "/info"}; };
  rpc ToolGenerateFakeData(Void) returns (Void) { option (google.api.http) = {post: "/tool/generate-fake-data"}; };
  rpc ToolDBDump(Void) returns (pathwar.db.Dump) { option (google.api.http) = {get: "/tool/sql-dump"}; };
}

// Void is an empty message
message Void {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    example: { value: '{}' };
  };
}

message TeamGetInput {
  int64 team_id = 1 [(gogoproto.customname) = "TeamID"];
}

message TeamGetOutput {
  pathwar.db.Team item = 1;
}

message ChallengeGetInput {
  int64 challenge_id = 1 [(gogoproto.customname) = "ChallengeID"];
}

message ChallengeGetOutput {
  pathwar.db.Challenge item = 1;
}

message TeamListInput {
  int64 season_id = 1 [(gogoproto.customname) = "SeasonID"];
}

message UserSetPreferencesInput {
  int64 active_season_id = 1 [(gogoproto.customname) = "ActiveSeasonID"];
  // bool dark_mode
}

message TeamListOutput {
  repeated pathwar.db.Team items = 1;
}

message OrganizationListOutput {
  repeated pathwar.db.Organization items = 1;
}

message ChallengeListOutput {
  repeated pathwar.db.Challenge items = 1;
}

message UserGetSessionOutput {
  message SeasonAndTeam {
    pathwar.db.Season season = 1;
    pathwar.db.Team team = 2;
    bool is_active = 3;
  }

  pathwar.db.User user = 1;
  bool is_new_user = 2;
  pathwar.sso.Claims claims = 3;
  int32 notifications = 4;
  repeated SeasonAndTeam seasons = 5;
}

message Status {
  bool everything_is_ok = 1 [(gogoproto.customname) = "EverythingIsOK"];
  // FIXME: add more tests
}

message Info {
  string version = 1;  // git tag
  int32 uptime = 2;    // seconds
  string commit = 3;   // git sha
  string built_at = 4; // date
  string built_by = 5; // builder
}
