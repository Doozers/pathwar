// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v5/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v5/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Team = sequelize.define('team', {
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    deletedAt: {
      type: DataTypes.DATE,
    },
    isDefault: {
      type: DataTypes.INTEGER,
    },
    deletionStatus: {
      type: DataTypes.INTEGER,
    },
    cash: {
      type: DataTypes.BIGINT,
    },
    score: {
      type: DataTypes.BIGINT,
    },
    goldMedals: {
      type: DataTypes.BIGINT,
    },
    silverMedals: {
      type: DataTypes.BIGINT,
    },
    bronzeMedals: {
      type: DataTypes.BIGINT,
    },
    nbAchievements: {
      type: DataTypes.BIGINT,
    },
  }, {
    tableName: 'team',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v5/reference-guide/relationships#adding-relationships.
  Team.associate = (models) => {
    Team.belongsTo(models.organization, {
      foreignKey: {
        name: 'organizationIdKey',
        field: 'organization_id',
      },
      as: 'organization',
    });
    Team.belongsTo(models.season, {
      foreignKey: {
        name: 'seasonIdKey',
        field: 'season_id',
      },
      as: 'season',
    });
    Team.hasMany(models.coupon_validation, {
      foreignKey: {
        name: 'teamIdKey',
        field: 'team_id',
      },
      as: 'couponValidations',
    });
    Team.hasMany(models.challenge_subscription, {
      foreignKey: {
        name: 'teamIdKey',
        field: 'team_id',
      },
      as: 'challengeSubscriptions',
    });
    Team.hasMany(models.whoswho_attempt, {
      foreignKey: {
        name: 'targetTeamIdKey',
        field: 'target_team_id',
      },
      as: 'targetTeamWhoswhoAttempts',
    });
    Team.hasMany(models.whoswho_attempt, {
      foreignKey: {
        name: 'authorTeamIdKey',
        field: 'author_team_id',
      },
      as: 'authorTeamWhoswhoAttempts',
    });
    Team.hasMany(models.achievement, {
      foreignKey: {
        name: 'teamIdKey',
        field: 'team_id',
      },
      as: 'achievements',
    });
    Team.hasMany(models.team_member, {
      foreignKey: {
        name: 'teamIdKey',
        field: 'team_id',
      },
      as: 'teamMembers',
    });
  };

  return Team;
};
