syntax = "proto3";

package pathwar.server;

import "google/api/annotations.proto";
import "entity/entity.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
//import "google/protobuf/timestamp.proto";

option go_package = "pathwar.pw/server";
option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;


service Server {

  //
  // public stuff
  //

  // Create a session based on credentials
  rpc Authenticate(AuthenticateInput) returns (AuthenticateOutput) {
    option (google.api.http) = {
      post: "/authenticate"
      body: "*"
    };
  };

  // Verify the service is up and running
  rpc Ping(Void) returns (Void) {
    option (google.api.http) = {get: "/ping"};
  };

  // Get current user's session
  rpc UserSession(Void) returns (pathwar.entity.UserSession) {
    option (google.api.http) = {get: "/user-session"};
  };

  // List tournaments
  rpc Tournaments(Void) returns (pathwar.entity.TournamentList) {
    option (google.api.http) = {get: "/tournaments"};
    // FIXME: pagination & filters
  };

  // List users
  rpc Users(Void) returns (pathwar.entity.UserList) {
    option (google.api.http) = {get: "/users"};
    // FIXME: pagination & filters
  };

  // List levels
  rpc Levels(Void) returns (pathwar.entity.LevelList) {
    option (google.api.http) = {get: "/levels"};
    // FIXME: pagination & filters
  };

  // List teams
  rpc Teams(Void) returns (pathwar.entity.TeamList) {
    option (google.api.http) = {get: "/teams"};
    // FIXME: pagination & filters
  };

  //
  // dev stuff (should be disabled in production)
  //

  rpc GenerateFakeData(Void) returns (Void) {
    option (google.api.http) = {post: "/dev/generate-fake-data"};
  };

  rpc Dump(Void) returns (pathwar.entity.Dump) {
    option (google.api.http) = {post: "/dev/sql-dump"};
  };
}

message Void {}

message AuthenticateInput {
  string username = 1;
  string password = 2;
}

message AuthenticateOutput {
  string token = 1;
}
