// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pwlevel.proto

package pwlevel

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InitConfig struct {
	Passphrases []string `protobuf:"bytes,1,rep,name=passphrases,proto3" json:"passphrases,omitempty"`
}

func (m *InitConfig) Reset()         { *m = InitConfig{} }
func (m *InitConfig) String() string { return proto.CompactTextString(m) }
func (*InitConfig) ProtoMessage()    {}
func (*InitConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31e89a3b8a383d1, []int{0}
}
func (m *InitConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitConfig.Merge(m, src)
}
func (m *InitConfig) XXX_Size() int {
	return m.Size()
}
func (m *InitConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_InitConfig.DiscardUnknown(m)
}

var xxx_messageInfo_InitConfig proto.InternalMessageInfo

func (m *InitConfig) GetPassphrases() []string {
	if m != nil {
		return m.Passphrases
	}
	return nil
}

func init() {
	proto.RegisterType((*InitConfig)(nil), "pathwar.level.InitConfig")
}

func init() { proto.RegisterFile("pwlevel.proto", fileDescriptor_b31e89a3b8a383d1) }

var fileDescriptor_b31e89a3b8a383d1 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x28, 0xcf, 0x49,
	0x2d, 0x4b, 0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x48, 0x2c, 0xc9, 0x28,
	0x4f, 0x2c, 0xd2, 0x03, 0x0b, 0x4a, 0xe9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7,
	0xe7, 0xea, 0xa7, 0xe7, 0xa7, 0xe7, 0xeb, 0x83, 0x55, 0x25, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e,
	0x98, 0x05, 0xd1, 0xad, 0xa4, 0xc7, 0xc5, 0xe5, 0x99, 0x97, 0x59, 0xe2, 0x9c, 0x9f, 0x97, 0x96,
	0x99, 0x2e, 0xa4, 0xc0, 0xc5, 0x5d, 0x90, 0x58, 0x5c, 0x5c, 0x90, 0x51, 0x94, 0x58, 0x9c, 0x5a,
	0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x19, 0x84, 0x2c, 0xe4, 0x64, 0x7a, 0xe2, 0x91, 0x1c, 0xe3,
	0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c,
	0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xd2, 0x70, 0x77, 0x24, 0xe6, 0xa5, 0xe8, 0x83, 0x2c, 0xce,
	0x4e, 0xd7, 0x87, 0x3a, 0x35, 0x89, 0x0d, 0x6c, 0x9b, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xbc,
	0xf0, 0xfd, 0x02, 0xbc, 0x00, 0x00, 0x00,
}

func (m *InitConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Passphrases) > 0 {
		for iNdEx := len(m.Passphrases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Passphrases[iNdEx])
			copy(dAtA[i:], m.Passphrases[iNdEx])
			i = encodeVarintPwlevel(dAtA, i, uint64(len(m.Passphrases[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPwlevel(dAtA []byte, offset int, v uint64) int {
	offset -= sovPwlevel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InitConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Passphrases) > 0 {
		for _, s := range m.Passphrases {
			l = len(s)
			n += 1 + l + sovPwlevel(uint64(l))
		}
	}
	return n
}

func sovPwlevel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPwlevel(x uint64) (n int) {
	return sovPwlevel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InitConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwlevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passphrases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwlevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwlevel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwlevel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passphrases = append(m.Passphrases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwlevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwlevel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwlevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPwlevel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPwlevel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwlevel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwlevel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPwlevel
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPwlevel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPwlevel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPwlevel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPwlevel
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPwlevel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPwlevel   = fmt.Errorf("proto: integer overflow")
)
