// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pwsso.proto

package pwsso

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// See https://www.keycloak.org/docs/latest/server_development/index.html#_action_token_anatomy
type ActionToken struct {
	Typ   string     `protobuf:"bytes,1,opt,name=typ,proto3" json:"typ,omitempty"`
	Iat   *time.Time `protobuf:"bytes,2,opt,name=iat,proto3,stdtime" json:"iat,omitempty"`
	Exp   *time.Time `protobuf:"bytes,3,opt,name=exp,proto3,stdtime" json:"exp,omitempty"`
	Sub   string     `protobuf:"bytes,4,opt,name=sub,proto3" json:"sub,omitempty"`
	Azp   string     `protobuf:"bytes,5,opt,name=azp,proto3" json:"azp,omitempty"`
	Iss   string     `protobuf:"bytes,6,opt,name=iss,proto3" json:"iss,omitempty"`
	Aud   string     `protobuf:"bytes,7,opt,name=aud,proto3" json:"aud,omitempty"`
	Asid  string     `protobuf:"bytes,8,opt,name=asid,proto3" json:"asid,omitempty"`
	Nonce string     `protobuf:"bytes,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// additional keycloak internals
	SessionState string     `protobuf:"bytes,100,opt,name=session_state,json=sessionState,proto3" json:"session_state,omitempty"`
	Scope        string     `protobuf:"bytes,101,opt,name=scope,proto3" json:"scope,omitempty"`
	Nbf          float32    `protobuf:"fixed32,102,opt,name=nbf,proto3" json:"nbf,omitempty"`
	Jti          string     `protobuf:"bytes,103,opt,name=jti,proto3" json:"jti,omitempty"`
	AuthTime     *time.Time `protobuf:"bytes,104,opt,name=auth_time,json=authTime,proto3,stdtime" json:"auth_time,omitempty"`
}

func (m *ActionToken) Reset()         { *m = ActionToken{} }
func (m *ActionToken) String() string { return proto.CompactTextString(m) }
func (*ActionToken) ProtoMessage()    {}
func (*ActionToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2edcc2d73c5b661, []int{0}
}
func (m *ActionToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionToken.Merge(m, src)
}
func (m *ActionToken) XXX_Size() int {
	return m.Size()
}
func (m *ActionToken) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionToken.DiscardUnknown(m)
}

var xxx_messageInfo_ActionToken proto.InternalMessageInfo

func (m *ActionToken) GetTyp() string {
	if m != nil {
		return m.Typ
	}
	return ""
}

func (m *ActionToken) GetIat() *time.Time {
	if m != nil {
		return m.Iat
	}
	return nil
}

func (m *ActionToken) GetExp() *time.Time {
	if m != nil {
		return m.Exp
	}
	return nil
}

func (m *ActionToken) GetSub() string {
	if m != nil {
		return m.Sub
	}
	return ""
}

func (m *ActionToken) GetAzp() string {
	if m != nil {
		return m.Azp
	}
	return ""
}

func (m *ActionToken) GetIss() string {
	if m != nil {
		return m.Iss
	}
	return ""
}

func (m *ActionToken) GetAud() string {
	if m != nil {
		return m.Aud
	}
	return ""
}

func (m *ActionToken) GetAsid() string {
	if m != nil {
		return m.Asid
	}
	return ""
}

func (m *ActionToken) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *ActionToken) GetSessionState() string {
	if m != nil {
		return m.SessionState
	}
	return ""
}

func (m *ActionToken) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *ActionToken) GetNbf() float32 {
	if m != nil {
		return m.Nbf
	}
	return 0
}

func (m *ActionToken) GetJti() string {
	if m != nil {
		return m.Jti
	}
	return ""
}

func (m *ActionToken) GetAuthTime() *time.Time {
	if m != nil {
		return m.AuthTime
	}
	return nil
}

type Claims struct {
	PreferredUsername string       `protobuf:"bytes,1,opt,name=preferred_username,json=preferredUsername,proto3" json:"preferred_username,omitempty"`
	Email             string       `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	EmailVerified     bool         `protobuf:"varint,3,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
	FamilyName        string       `protobuf:"bytes,4,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	GivenName         string       `protobuf:"bytes,5,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	ActionToken       *ActionToken `protobuf:"bytes,100,opt,name=action_token,json=actionToken,proto3" json:"action_token,omitempty"`
}

func (m *Claims) Reset()         { *m = Claims{} }
func (m *Claims) String() string { return proto.CompactTextString(m) }
func (*Claims) ProtoMessage()    {}
func (*Claims) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2edcc2d73c5b661, []int{1}
}
func (m *Claims) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claims) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claims.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claims) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claims.Merge(m, src)
}
func (m *Claims) XXX_Size() int {
	return m.Size()
}
func (m *Claims) XXX_DiscardUnknown() {
	xxx_messageInfo_Claims.DiscardUnknown(m)
}

var xxx_messageInfo_Claims proto.InternalMessageInfo

func (m *Claims) GetPreferredUsername() string {
	if m != nil {
		return m.PreferredUsername
	}
	return ""
}

func (m *Claims) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Claims) GetEmailVerified() bool {
	if m != nil {
		return m.EmailVerified
	}
	return false
}

func (m *Claims) GetFamilyName() string {
	if m != nil {
		return m.FamilyName
	}
	return ""
}

func (m *Claims) GetGivenName() string {
	if m != nil {
		return m.GivenName
	}
	return ""
}

func (m *Claims) GetActionToken() *ActionToken {
	if m != nil {
		return m.ActionToken
	}
	return nil
}

func init() {
	proto.RegisterType((*ActionToken)(nil), "pathwar.sso.ActionToken")
	proto.RegisterType((*Claims)(nil), "pathwar.sso.Claims")
}

func init() { proto.RegisterFile("pwsso.proto", fileDescriptor_e2edcc2d73c5b661) }

var fileDescriptor_e2edcc2d73c5b661 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xb1, 0x6e, 0xdb, 0x3c,
	0x10, 0xc7, 0xad, 0x38, 0xf1, 0x67, 0x53, 0xc9, 0x87, 0x96, 0xe8, 0xc0, 0x1a, 0xa8, 0x6c, 0xa4,
	0x28, 0xe0, 0x25, 0x32, 0x90, 0x00, 0x5d, 0x32, 0x25, 0xdd, 0x3b, 0xa8, 0x69, 0x87, 0x2e, 0x02,
	0x65, 0x51, 0x32, 0x13, 0x89, 0x24, 0x74, 0x54, 0x12, 0xe7, 0x29, 0xf2, 0x0e, 0x7d, 0x99, 0x8c,
	0x19, 0x3b, 0xb5, 0x85, 0xfd, 0x04, 0x7d, 0x83, 0x82, 0x47, 0xbb, 0x4e, 0xc7, 0x6c, 0x77, 0xbf,
	0xbb, 0x3f, 0xef, 0x70, 0x77, 0x24, 0xa1, 0xb9, 0x01, 0xd0, 0xb1, 0x69, 0xb4, 0xd5, 0x34, 0x34,
	0xdc, 0xce, 0x6f, 0x78, 0x13, 0x03, 0xe8, 0xe1, 0x51, 0x29, 0xed, 0xbc, 0xcd, 0xe2, 0x99, 0xae,
	0xa7, 0xa5, 0x2e, 0xf5, 0x14, 0x73, 0xb2, 0xb6, 0x40, 0x0f, 0x1d, 0xb4, 0xbc, 0x76, 0x78, 0xfa,
	0x4f, 0x7a, 0xc5, 0x55, 0xb9, 0x15, 0x18, 0xbb, 0x30, 0x02, 0xa6, 0x56, 0xd6, 0x02, 0x2c, 0xaf,
	0xcd, 0xd6, 0xf2, 0xe2, 0xc3, 0x6f, 0x5d, 0x12, 0x9e, 0xcd, 0xac, 0xd4, 0xea, 0x42, 0x5f, 0x09,
	0x45, 0x5f, 0x90, 0xae, 0x5d, 0x18, 0x16, 0x8c, 0x83, 0xc9, 0x20, 0x71, 0x26, 0x7d, 0x4f, 0xba,
	0x92, 0x5b, 0xb6, 0x33, 0x0e, 0x26, 0xe1, 0xf1, 0x30, 0x2e, 0xb5, 0x2e, 0x2b, 0x11, 0x6f, 0x2a,
	0xc4, 0x17, 0x9b, 0x07, 0xcf, 0xfb, 0x0f, 0x3f, 0x46, 0xc1, 0xfd, 0xcf, 0x51, 0x90, 0x38, 0x81,
	0xd3, 0x89, 0x5b, 0xc3, 0xba, 0xcf, 0xd1, 0x89, 0x5b, 0xe3, 0x3a, 0x80, 0x36, 0x63, 0xbb, 0xbe,
	0x03, 0x68, 0x33, 0x47, 0xf8, 0x9d, 0x61, 0x7b, 0x9e, 0xf0, 0x3b, 0xcc, 0x91, 0x00, 0xac, 0xe7,
	0x89, 0x04, 0xc0, 0x9c, 0x36, 0x67, 0xff, 0xad, 0x73, 0xda, 0x9c, 0x52, 0xb2, 0xcb, 0x41, 0xe6,
	0xac, 0x8f, 0x08, 0x6d, 0xfa, 0x8a, 0xec, 0x29, 0xad, 0x66, 0x82, 0x0d, 0x10, 0x7a, 0x87, 0xbe,
	0x25, 0x07, 0x20, 0x00, 0xa4, 0x56, 0x29, 0x58, 0x6e, 0x05, 0xcb, 0x31, 0xba, 0xbf, 0x86, 0x9f,
	0x1c, 0x73, 0x52, 0x98, 0x69, 0x23, 0x98, 0xf0, 0x52, 0x74, 0x5c, 0x59, 0x95, 0x15, 0xac, 0x18,
	0x07, 0x93, 0x9d, 0xc4, 0x99, 0x8e, 0x5c, 0x5a, 0xc9, 0x4a, 0xdf, 0xc8, 0xa5, 0x95, 0xf4, 0x8c,
	0x0c, 0x78, 0x6b, 0xe7, 0xa9, 0x1b, 0x3d, 0x9b, 0x3f, 0x63, 0x1c, 0x7d, 0x27, 0x73, 0x81, 0xc3,
	0xdf, 0x01, 0xe9, 0x7d, 0xa8, 0xb8, 0xac, 0x81, 0x1e, 0x11, 0x6a, 0x1a, 0x51, 0x88, 0xa6, 0x11,
	0x79, 0xda, 0x82, 0x68, 0x14, 0xaf, 0xc5, 0x7a, 0x5f, 0x2f, 0xff, 0x46, 0x3e, 0xaf, 0x03, 0xae,
	0x6d, 0x51, 0x73, 0x59, 0xe1, 0xfe, 0x06, 0x89, 0x77, 0xe8, 0x3b, 0xf2, 0x3f, 0x1a, 0xe9, 0xb5,
	0x68, 0x64, 0x21, 0x45, 0x8e, 0x6b, 0xea, 0x27, 0x07, 0x48, 0xbf, 0xac, 0x21, 0x1d, 0x91, 0xb0,
	0xe0, 0xb5, 0xac, 0x16, 0x29, 0x16, 0xf1, 0x2b, 0x21, 0x1e, 0x7d, 0x74, 0xaf, 0xbf, 0x21, 0xa4,
	0x94, 0xd7, 0x42, 0xf9, 0xb8, 0x5f, 0xd0, 0x00, 0x09, 0x86, 0x4f, 0xc9, 0x3e, 0xc7, 0xdb, 0x4a,
	0xad, 0x3b, 0x2e, 0x9c, 0x6b, 0x78, 0xcc, 0xe2, 0x27, 0xc7, 0x1e, 0x3f, 0x39, 0xbe, 0x24, 0xe4,
	0x5b, 0xe7, 0xfc, 0xe4, 0x61, 0x19, 0x05, 0x8f, 0xcb, 0x28, 0xf8, 0xb5, 0x8c, 0x82, 0xfb, 0x55,
	0xd4, 0x79, 0x5c, 0x45, 0x9d, 0xef, 0xab, 0xa8, 0xf3, 0xf5, 0xf5, 0x46, 0x5f, 0x71, 0x95, 0x4f,
	0xdd, 0xff, 0xb8, 0x2a, 0xa7, 0xf8, 0x9b, 0xb2, 0x1e, 0x0e, 0xf4, 0xe4, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xf6, 0x43, 0x50, 0xe6, 0x5d, 0x03, 0x00, 0x00,
}

func (m *ActionToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthTime != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.AuthTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.AuthTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintPwsso(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Jti) > 0 {
		i -= len(m.Jti)
		copy(dAtA[i:], m.Jti)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.Jti)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if m.Nbf != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Nbf))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb5
	}
	if len(m.Scope) > 0 {
		i -= len(m.Scope)
		copy(dAtA[i:], m.Scope)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.Scope)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.SessionState) > 0 {
		i -= len(m.SessionState)
		copy(dAtA[i:], m.SessionState)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.SessionState)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Asid) > 0 {
		i -= len(m.Asid)
		copy(dAtA[i:], m.Asid)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.Asid)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Aud) > 0 {
		i -= len(m.Aud)
		copy(dAtA[i:], m.Aud)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.Aud)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Iss) > 0 {
		i -= len(m.Iss)
		copy(dAtA[i:], m.Iss)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.Iss)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Azp) > 0 {
		i -= len(m.Azp)
		copy(dAtA[i:], m.Azp)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.Azp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sub) > 0 {
		i -= len(m.Sub)
		copy(dAtA[i:], m.Sub)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.Sub)))
		i--
		dAtA[i] = 0x22
	}
	if m.Exp != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Exp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Exp):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintPwsso(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x1a
	}
	if m.Iat != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Iat, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Iat):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintPwsso(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Typ) > 0 {
		i -= len(m.Typ)
		copy(dAtA[i:], m.Typ)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.Typ)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Claims) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claims) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claims) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionToken != nil {
		{
			size, err := m.ActionToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwsso(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if len(m.GivenName) > 0 {
		i -= len(m.GivenName)
		copy(dAtA[i:], m.GivenName)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.GivenName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FamilyName) > 0 {
		i -= len(m.FamilyName)
		copy(dAtA[i:], m.FamilyName)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.FamilyName)))
		i--
		dAtA[i] = 0x22
	}
	if m.EmailVerified {
		i--
		if m.EmailVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PreferredUsername) > 0 {
		i -= len(m.PreferredUsername)
		copy(dAtA[i:], m.PreferredUsername)
		i = encodeVarintPwsso(dAtA, i, uint64(len(m.PreferredUsername)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPwsso(dAtA []byte, offset int, v uint64) int {
	offset -= sovPwsso(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActionToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Typ)
	if l > 0 {
		n += 1 + l + sovPwsso(uint64(l))
	}
	if m.Iat != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Iat)
		n += 1 + l + sovPwsso(uint64(l))
	}
	if m.Exp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Exp)
		n += 1 + l + sovPwsso(uint64(l))
	}
	l = len(m.Sub)
	if l > 0 {
		n += 1 + l + sovPwsso(uint64(l))
	}
	l = len(m.Azp)
	if l > 0 {
		n += 1 + l + sovPwsso(uint64(l))
	}
	l = len(m.Iss)
	if l > 0 {
		n += 1 + l + sovPwsso(uint64(l))
	}
	l = len(m.Aud)
	if l > 0 {
		n += 1 + l + sovPwsso(uint64(l))
	}
	l = len(m.Asid)
	if l > 0 {
		n += 1 + l + sovPwsso(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovPwsso(uint64(l))
	}
	l = len(m.SessionState)
	if l > 0 {
		n += 2 + l + sovPwsso(uint64(l))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 2 + l + sovPwsso(uint64(l))
	}
	if m.Nbf != 0 {
		n += 6
	}
	l = len(m.Jti)
	if l > 0 {
		n += 2 + l + sovPwsso(uint64(l))
	}
	if m.AuthTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.AuthTime)
		n += 2 + l + sovPwsso(uint64(l))
	}
	return n
}

func (m *Claims) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PreferredUsername)
	if l > 0 {
		n += 1 + l + sovPwsso(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPwsso(uint64(l))
	}
	if m.EmailVerified {
		n += 2
	}
	l = len(m.FamilyName)
	if l > 0 {
		n += 1 + l + sovPwsso(uint64(l))
	}
	l = len(m.GivenName)
	if l > 0 {
		n += 1 + l + sovPwsso(uint64(l))
	}
	if m.ActionToken != nil {
		l = m.ActionToken.Size()
		n += 2 + l + sovPwsso(uint64(l))
	}
	return n
}

func sovPwsso(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPwsso(x uint64) (n int) {
	return sovPwsso(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActionToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwsso
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Typ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iat == nil {
				m.Iat = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Iat, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exp == nil {
				m.Exp = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Exp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Azp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iss = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aud", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aud = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nbf", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Nbf = float32(math.Float32frombits(v))
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthTime == nil {
				m.AuthTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.AuthTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwsso(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwsso
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwsso
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Claims) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwsso
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claims: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claims: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmailVerified = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FamilyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GivenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GivenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwsso
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwsso
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionToken == nil {
				m.ActionToken = &ActionToken{}
			}
			if err := m.ActionToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwsso(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwsso
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwsso
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPwsso(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPwsso
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwsso
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPwsso
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPwsso
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPwsso
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPwsso(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPwsso
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPwsso = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPwsso   = fmt.Errorf("proto: integer overflow")
)
