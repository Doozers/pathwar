// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pwdb.proto

package pwdb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeletionStatus int32

const (
	DeletionStatus_Unknown    DeletionStatus = 0
	DeletionStatus_Active     DeletionStatus = 1
	DeletionStatus_Requested  DeletionStatus = 2
	DeletionStatus_Anonymized DeletionStatus = 3
)

var DeletionStatus_name = map[int32]string{
	0: "Unknown",
	1: "Active",
	2: "Requested",
	3: "Anonymized",
}

var DeletionStatus_value = map[string]int32{
	"Unknown":    0,
	"Active":     1,
	"Requested":  2,
	"Anonymized": 3,
}

func (x DeletionStatus) String() string {
	return proto.EnumName(DeletionStatus_name, int32(x))
}

func (DeletionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{0}
}

type ChallengeFlavor_Driver int32

const (
	ChallengeFlavor_Unknown       ChallengeFlavor_Driver = 0
	ChallengeFlavor_Docker        ChallengeFlavor_Driver = 1
	ChallengeFlavor_DockerCompose ChallengeFlavor_Driver = 2
)

var ChallengeFlavor_Driver_name = map[int32]string{
	0: "Unknown",
	1: "Docker",
	2: "DockerCompose",
}

var ChallengeFlavor_Driver_value = map[string]int32{
	"Unknown":       0,
	"Docker":        1,
	"DockerCompose": 2,
}

func (x ChallengeFlavor_Driver) String() string {
	return proto.EnumName(ChallengeFlavor_Driver_name, int32(x))
}

func (ChallengeFlavor_Driver) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{2, 0}
}

type ChallengeInstance_Status int32

const (
	ChallengeInstance_Unknown  ChallengeInstance_Status = 0
	ChallengeInstance_Active   ChallengeInstance_Status = 1
	ChallengeInstance_Inactive ChallengeInstance_Status = 2
)

var ChallengeInstance_Status_name = map[int32]string{
	0: "Unknown",
	1: "Active",
	2: "Inactive",
}

var ChallengeInstance_Status_value = map[string]int32{
	"Unknown":  0,
	"Active":   1,
	"Inactive": 2,
}

func (x ChallengeInstance_Status) String() string {
	return proto.EnumName(ChallengeInstance_Status_name, int32(x))
}

func (ChallengeInstance_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{5, 0}
}

type Agent_Status int32

const (
	Agent_Unknown  Agent_Status = 0
	Agent_Active   Agent_Status = 1
	Agent_Inactive Agent_Status = 2
)

var Agent_Status_name = map[int32]string{
	0: "Unknown",
	1: "Active",
	2: "Inactive",
}

var Agent_Status_value = map[string]int32{
	"Unknown":  0,
	"Active":   1,
	"Inactive": 2,
}

func (x Agent_Status) String() string {
	return proto.EnumName(Agent_Status_name, int32(x))
}

func (Agent_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{6, 0}
}

type OrganizationMember_Role int32

const (
	OrganizationMember_Undefined OrganizationMember_Role = 0
	OrganizationMember_Owner     OrganizationMember_Role = 1
	OrganizationMember_Member    OrganizationMember_Role = 2
)

var OrganizationMember_Role_name = map[int32]string{
	0: "Undefined",
	1: "Owner",
	2: "Member",
}

var OrganizationMember_Role_value = map[string]int32{
	"Undefined": 0,
	"Owner":     1,
	"Member":    2,
}

func (x OrganizationMember_Role) String() string {
	return proto.EnumName(OrganizationMember_Role_name, int32(x))
}

func (OrganizationMember_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{7, 0}
}

type TeamMember_Role int32

const (
	TeamMember_Undefined TeamMember_Role = 0
	TeamMember_Owner     TeamMember_Role = 1
	TeamMember_Member    TeamMember_Role = 2
)

var TeamMember_Role_name = map[int32]string{
	0: "Undefined",
	1: "Owner",
	2: "Member",
}

var TeamMember_Role_value = map[string]int32{
	"Undefined": 0,
	"Owner":     1,
	"Member":    2,
}

func (x TeamMember_Role) String() string {
	return proto.EnumName(TeamMember_Role_name, int32(x))
}

func (TeamMember_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{8, 0}
}

type Season_Status int32

const (
	Season_UnknownStatus Season_Status = 0
	Season_Started       Season_Status = 1
	Season_Stopped       Season_Status = 2
)

var Season_Status_name = map[int32]string{
	0: "UnknownStatus",
	1: "Started",
	2: "Stopped",
}

var Season_Status_value = map[string]int32{
	"UnknownStatus": 0,
	"Started":       1,
	"Stopped":       2,
}

func (x Season_Status) String() string {
	return proto.EnumName(Season_Status_name, int32(x))
}

func (Season_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{13, 0}
}

type Season_Visibility int32

const (
	Season_UnknownVisibility Season_Visibility = 0
	Season_Private           Season_Visibility = 1
	Season_Unlisted          Season_Visibility = 2
	Season_Public            Season_Visibility = 3
)

var Season_Visibility_name = map[int32]string{
	0: "UnknownVisibility",
	1: "Private",
	2: "Unlisted",
	3: "Public",
}

var Season_Visibility_value = map[string]int32{
	"UnknownVisibility": 0,
	"Private":           1,
	"Unlisted":          2,
	"Public":            3,
}

func (x Season_Visibility) String() string {
	return proto.EnumName(Season_Visibility_name, int32(x))
}

func (Season_Visibility) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{13, 1}
}

type ChallengeValidation_Status int32

const (
	ChallengeValidation_Unknown      ChallengeValidation_Status = 0
	ChallengeValidation_NeedReview   ChallengeValidation_Status = 1
	ChallengeValidation_Accepted     ChallengeValidation_Status = 2
	ChallengeValidation_Refused      ChallengeValidation_Status = 3
	ChallengeValidation_AutoAccepted ChallengeValidation_Status = 4
)

var ChallengeValidation_Status_name = map[int32]string{
	0: "Unknown",
	1: "NeedReview",
	2: "Accepted",
	3: "Refused",
	4: "AutoAccepted",
}

var ChallengeValidation_Status_value = map[string]int32{
	"Unknown":      0,
	"NeedReview":   1,
	"Accepted":     2,
	"Refused":      3,
	"AutoAccepted": 4,
}

func (x ChallengeValidation_Status) String() string {
	return proto.EnumName(ChallengeValidation_Status_name, int32(x))
}

func (ChallengeValidation_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{18, 0}
}

type ChallengeSubscription_Status int32

const (
	ChallengeSubscription_Unknown ChallengeSubscription_Status = 0
	ChallengeSubscription_Active  ChallengeSubscription_Status = 1
	ChallengeSubscription_Closed  ChallengeSubscription_Status = 2
)

var ChallengeSubscription_Status_name = map[int32]string{
	0: "Unknown",
	1: "Active",
	2: "Closed",
}

var ChallengeSubscription_Status_value = map[string]int32{
	"Unknown": 0,
	"Active":  1,
	"Closed":  2,
}

func (x ChallengeSubscription_Status) String() string {
	return proto.EnumName(ChallengeSubscription_Status_name, int32(x))
}

func (ChallengeSubscription_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{19, 0}
}

type InventoryItem_Item int32

const (
	InventoryItem_Unknown InventoryItem_Item = 0
)

var InventoryItem_Item_name = map[int32]string{
	0: "Unknown",
}

var InventoryItem_Item_value = map[string]int32{
	"Unknown": 0,
}

func (x InventoryItem_Item) String() string {
	return proto.EnumName(InventoryItem_Item_name, int32(x))
}

func (InventoryItem_Item) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{20, 0}
}

//
// fields
//
type Achievement_Type int32

const (
	Achievement_Undefined            Achievement_Type = 0
	Achievement_Buy1Challenge        Achievement_Type = 1
	Achievement_Buy5Challenges       Achievement_Type = 2
	Achievement_Buy10Challenges      Achievement_Type = 3
	Achievement_Buy20Challenges      Achievement_Type = 4
	Achievement_Buy50Challenges      Achievement_Type = 5
	Achievement_Validate1Challenge   Achievement_Type = 10
	Achievement_Validate5Challenges  Achievement_Type = 11
	Achievement_Validate10Challenges Achievement_Type = 12
	Achievement_Validate20Challenges Achievement_Type = 13
	Achievement_Validate50Challenges Achievement_Type = 14
	Achievement_Validate1Coupon      Achievement_Type = 20
	Achievement_Validate5Coupons     Achievement_Type = 21
	Achievement_Validate10Coupons    Achievement_Type = 22
	Achievement_Validate20Coupons    Achievement_Type = 23
	Achievement_Validate50Coupons    Achievement_Type = 24
	Achievement_Validate100Coupons   Achievement_Type = 25
	Achievement_Author1Challenge     Achievement_Type = 30
	Achievement_Author2Challenges    Achievement_Type = 31
	Achievement_Author5Challenges    Achievement_Type = 32
	Achievement_Author10Challenges   Achievement_Type = 33
	Achievement_EarlyAdopterTop100   Achievement_Type = 40
	Achievement_EarlyAdopterTop1000  Achievement_Type = 41
	Achievement_Old1Year             Achievement_Type = 50
	Achievement_Send1PullRequest     Achievement_Type = 90
	Achievement_Send2PullRequests    Achievement_Type = 91
	Achievement_Send5PullRequests    Achievement_Type = 92
	Achievement_Send10Pullrequests   Achievement_Type = 93
	Achievement_Staff                Achievement_Type = 100
	Achievement_Contributor          Achievement_Type = 101
	Achievement_BugHunter            Achievement_Type = 102
	Achievement_Moderator            Achievement_Type = 103
	Achievement_HackThePlatform      Achievement_Type = 104
)

var Achievement_Type_name = map[int32]string{
	0:   "Undefined",
	1:   "Buy1Challenge",
	2:   "Buy5Challenges",
	3:   "Buy10Challenges",
	4:   "Buy20Challenges",
	5:   "Buy50Challenges",
	10:  "Validate1Challenge",
	11:  "Validate5Challenges",
	12:  "Validate10Challenges",
	13:  "Validate20Challenges",
	14:  "Validate50Challenges",
	20:  "Validate1Coupon",
	21:  "Validate5Coupons",
	22:  "Validate10Coupons",
	23:  "Validate20Coupons",
	24:  "Validate50Coupons",
	25:  "Validate100Coupons",
	30:  "Author1Challenge",
	31:  "Author2Challenges",
	32:  "Author5Challenges",
	33:  "Author10Challenges",
	40:  "EarlyAdopterTop100",
	41:  "EarlyAdopterTop1000",
	50:  "Old1Year",
	90:  "Send1PullRequest",
	91:  "Send2PullRequests",
	92:  "Send5PullRequests",
	93:  "Send10Pullrequests",
	100: "Staff",
	101: "Contributor",
	102: "BugHunter",
	103: "Moderator",
	104: "HackThePlatform",
}

var Achievement_Type_value = map[string]int32{
	"Undefined":            0,
	"Buy1Challenge":        1,
	"Buy5Challenges":       2,
	"Buy10Challenges":      3,
	"Buy20Challenges":      4,
	"Buy50Challenges":      5,
	"Validate1Challenge":   10,
	"Validate5Challenges":  11,
	"Validate10Challenges": 12,
	"Validate20Challenges": 13,
	"Validate50Challenges": 14,
	"Validate1Coupon":      20,
	"Validate5Coupons":     21,
	"Validate10Coupons":    22,
	"Validate20Coupons":    23,
	"Validate50Coupons":    24,
	"Validate100Coupons":   25,
	"Author1Challenge":     30,
	"Author2Challenges":    31,
	"Author5Challenges":    32,
	"Author10Challenges":   33,
	"EarlyAdopterTop100":   40,
	"EarlyAdopterTop1000":  41,
	"Old1Year":             50,
	"Send1PullRequest":     90,
	"Send2PullRequests":    91,
	"Send5PullRequests":    92,
	"Send10Pullrequests":   93,
	"Staff":                100,
	"Contributor":          101,
	"BugHunter":            102,
	"Moderator":            103,
	"HackThePlatform":      104,
}

func (x Achievement_Type) String() string {
	return proto.EnumName(Achievement_Type_name, int32(x))
}

func (Achievement_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{24, 0}
}

type Challenge struct {
	ID          int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt   *time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt   *time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Name        string     `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Description string     `protobuf:"bytes,101,opt,name=description,proto3" json:"description,omitempty"`
	Author      string     `protobuf:"bytes,102,opt,name=author,proto3" json:"author,omitempty"`
	// AuthorProfile
	Locale     string `protobuf:"bytes,105,opt,name=locale,proto3" json:"locale,omitempty"`
	IsDraft    bool   `protobuf:"varint,106,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
	PreviewUrl string `protobuf:"bytes,107,opt,name=preview_url,json=previewUrl,proto3" json:"preview_url,omitempty"`
	// repeated string tags = ;
	Homepage string             `protobuf:"bytes,108,opt,name=homepage,proto3" json:"homepage,omitempty"`
	Flavors  []*ChallengeFlavor `protobuf:"bytes,200,rep,name=flavors,proto3" json:"flavors,omitempty" gorm:"PRELOAD:false"`
}

func (m *Challenge) Reset()         { *m = Challenge{} }
func (m *Challenge) String() string { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()    {}
func (*Challenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{0}
}
func (m *Challenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Challenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Challenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Challenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge.Merge(m, src)
}
func (m *Challenge) XXX_Size() int {
	return m.Size()
}
func (m *Challenge) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge proto.InternalMessageInfo

func (m *Challenge) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Challenge) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Challenge) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Challenge) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Challenge) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Challenge) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Challenge) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *Challenge) GetIsDraft() bool {
	if m != nil {
		return m.IsDraft
	}
	return false
}

func (m *Challenge) GetPreviewUrl() string {
	if m != nil {
		return m.PreviewUrl
	}
	return ""
}

func (m *Challenge) GetHomepage() string {
	if m != nil {
		return m.Homepage
	}
	return ""
}

func (m *Challenge) GetFlavors() []*ChallengeFlavor {
	if m != nil {
		return m.Flavors
	}
	return nil
}

type ChallengeList struct {
	Items []*Challenge `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ChallengeList) Reset()         { *m = ChallengeList{} }
func (m *ChallengeList) String() string { return proto.CompactTextString(m) }
func (*ChallengeList) ProtoMessage()    {}
func (*ChallengeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{1}
}
func (m *ChallengeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeList.Merge(m, src)
}
func (m *ChallengeList) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeList.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeList proto.InternalMessageInfo

func (m *ChallengeList) GetItems() []*Challenge {
	if m != nil {
		return m.Items
	}
	return nil
}

type ChallengeFlavor struct {
	ID               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt        *time.Time             `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt        *time.Time             `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Version          string                 `protobuf:"bytes,100,opt,name=version,proto3" json:"version,omitempty"`
	Changelog        string                 `protobuf:"bytes,101,opt,name=changelog,proto3" json:"changelog,omitempty"`
	IsDraft          bool                   `protobuf:"varint,102,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
	IsLatest         bool                   `protobuf:"varint,103,opt,name=is_latest,json=isLatest,proto3" json:"is_latest,omitempty"`
	SourceURL        string                 `protobuf:"bytes,104,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	Driver           ChallengeFlavor_Driver `protobuf:"varint,105,opt,name=driver,proto3,enum=pathwar.db.ChallengeFlavor_Driver" json:"driver,omitempty"`
	Challenge        *Challenge             `protobuf:"bytes,200,opt,name=challenge,proto3" json:"challenge,omitempty" gorm:"foreignkey:ChallengeID"`
	ChallengeID      int64                  `protobuf:"varint,201,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty" sql:"not null" gorm:"index"`
	SeasonChallenges []*SeasonChallenge     `protobuf:"bytes,202,rep,name=season_challenges,json=seasonChallenges,proto3" json:"season_challenges,omitempty" gorm:"PRELOAD:false"`
}

func (m *ChallengeFlavor) Reset()         { *m = ChallengeFlavor{} }
func (m *ChallengeFlavor) String() string { return proto.CompactTextString(m) }
func (*ChallengeFlavor) ProtoMessage()    {}
func (*ChallengeFlavor) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{2}
}
func (m *ChallengeFlavor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeFlavor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeFlavor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeFlavor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeFlavor.Merge(m, src)
}
func (m *ChallengeFlavor) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeFlavor) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeFlavor.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeFlavor proto.InternalMessageInfo

func (m *ChallengeFlavor) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ChallengeFlavor) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ChallengeFlavor) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ChallengeFlavor) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ChallengeFlavor) GetChangelog() string {
	if m != nil {
		return m.Changelog
	}
	return ""
}

func (m *ChallengeFlavor) GetIsDraft() bool {
	if m != nil {
		return m.IsDraft
	}
	return false
}

func (m *ChallengeFlavor) GetIsLatest() bool {
	if m != nil {
		return m.IsLatest
	}
	return false
}

func (m *ChallengeFlavor) GetSourceURL() string {
	if m != nil {
		return m.SourceURL
	}
	return ""
}

func (m *ChallengeFlavor) GetDriver() ChallengeFlavor_Driver {
	if m != nil {
		return m.Driver
	}
	return ChallengeFlavor_Unknown
}

func (m *ChallengeFlavor) GetChallenge() *Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *ChallengeFlavor) GetChallengeID() int64 {
	if m != nil {
		return m.ChallengeID
	}
	return 0
}

func (m *ChallengeFlavor) GetSeasonChallenges() []*SeasonChallenge {
	if m != nil {
		return m.SeasonChallenges
	}
	return nil
}

type SeasonChallenge struct {
	ID            int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt     *time.Time               `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt     *time.Time               `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Flavor        *ChallengeFlavor         `protobuf:"bytes,200,opt,name=flavor,proto3" json:"flavor,omitempty" gorm:"foreignkey:FlavorID"`
	FlavorID      int64                    `protobuf:"varint,201,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty" sql:"not null" gorm:"index"`
	Season        *Season                  `protobuf:"bytes,202,opt,name=season,proto3" json:"season,omitempty" gorm:"foreignkey:SeasonID"`
	SeasonID      int64                    `protobuf:"varint,203,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty" sql:"not null" gorm:"index"`
	Instances     []*ChallengeInstance     `protobuf:"bytes,204,rep,name=instances,proto3" json:"instances,omitempty" gorm:"PRELOAD:false"`
	Subscriptions []*ChallengeSubscription `protobuf:"bytes,205,rep,name=subscriptions,proto3" json:"subscriptions,omitempty" gorm:"PRELOAD:false"`
}

func (m *SeasonChallenge) Reset()         { *m = SeasonChallenge{} }
func (m *SeasonChallenge) String() string { return proto.CompactTextString(m) }
func (*SeasonChallenge) ProtoMessage()    {}
func (*SeasonChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{3}
}
func (m *SeasonChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallenge.Merge(m, src)
}
func (m *SeasonChallenge) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallenge proto.InternalMessageInfo

func (m *SeasonChallenge) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SeasonChallenge) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *SeasonChallenge) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *SeasonChallenge) GetFlavor() *ChallengeFlavor {
	if m != nil {
		return m.Flavor
	}
	return nil
}

func (m *SeasonChallenge) GetFlavorID() int64 {
	if m != nil {
		return m.FlavorID
	}
	return 0
}

func (m *SeasonChallenge) GetSeason() *Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *SeasonChallenge) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *SeasonChallenge) GetInstances() []*ChallengeInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *SeasonChallenge) GetSubscriptions() []*ChallengeSubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type SeasonChallengeList struct {
	Items []*SeasonChallenge `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *SeasonChallengeList) Reset()         { *m = SeasonChallengeList{} }
func (m *SeasonChallengeList) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeList) ProtoMessage()    {}
func (*SeasonChallengeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{4}
}
func (m *SeasonChallengeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeList.Merge(m, src)
}
func (m *SeasonChallengeList) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeList) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeList.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeList proto.InternalMessageInfo

func (m *SeasonChallengeList) GetItems() []*SeasonChallenge {
	if m != nil {
		return m.Items
	}
	return nil
}

type ChallengeInstance struct {
	ID        int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt *time.Time               `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time               `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Status    ChallengeInstance_Status `protobuf:"varint,100,opt,name=status,proto3,enum=pathwar.db.ChallengeInstance_Status" json:"status,omitempty"`
	Agent     *Agent                   `protobuf:"bytes,200,opt,name=agent,proto3" json:"agent,omitempty" gorm:"foreignkey:AgentID"`
	AgentID   int64                    `protobuf:"varint,201,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty" sql:"not null" gorm:"index"`
	Flavor    *ChallengeFlavor         `protobuf:"bytes,202,opt,name=flavor,proto3" json:"flavor,omitempty" gorm:"foreignkey:FlavorID"`
	FlavorID  int64                    `protobuf:"varint,203,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *ChallengeInstance) Reset()         { *m = ChallengeInstance{} }
func (m *ChallengeInstance) String() string { return proto.CompactTextString(m) }
func (*ChallengeInstance) ProtoMessage()    {}
func (*ChallengeInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{5}
}
func (m *ChallengeInstance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeInstance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeInstance.Merge(m, src)
}
func (m *ChallengeInstance) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeInstance.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeInstance proto.InternalMessageInfo

func (m *ChallengeInstance) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ChallengeInstance) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ChallengeInstance) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ChallengeInstance) GetStatus() ChallengeInstance_Status {
	if m != nil {
		return m.Status
	}
	return ChallengeInstance_Unknown
}

func (m *ChallengeInstance) GetAgent() *Agent {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (m *ChallengeInstance) GetAgentID() int64 {
	if m != nil {
		return m.AgentID
	}
	return 0
}

func (m *ChallengeInstance) GetFlavor() *ChallengeFlavor {
	if m != nil {
		return m.Flavor
	}
	return nil
}

func (m *ChallengeInstance) GetFlavorID() int64 {
	if m != nil {
		return m.FlavorID
	}
	return 0
}

type Agent struct {
	ID                 int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt          *time.Time           `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt          *time.Time           `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Name               string               `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Address            string               `protobuf:"bytes,101,opt,name=address,proto3" json:"address,omitempty"`
	Status             Agent_Status         `protobuf:"varint,102,opt,name=status,proto3,enum=pathwar.db.Agent_Status" json:"status,omitempty"`
	ChallengeInstances []*ChallengeInstance `protobuf:"bytes,200,rep,name=challenge_instances,json=challengeInstances,proto3" json:"challenge_instances,omitempty" gorm:"PRELOAD:false"`
}

func (m *Agent) Reset()         { *m = Agent{} }
func (m *Agent) String() string { return proto.CompactTextString(m) }
func (*Agent) ProtoMessage()    {}
func (*Agent) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{6}
}
func (m *Agent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Agent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Agent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Agent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Agent.Merge(m, src)
}
func (m *Agent) XXX_Size() int {
	return m.Size()
}
func (m *Agent) XXX_DiscardUnknown() {
	xxx_messageInfo_Agent.DiscardUnknown(m)
}

var xxx_messageInfo_Agent proto.InternalMessageInfo

func (m *Agent) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Agent) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Agent) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Agent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Agent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Agent) GetStatus() Agent_Status {
	if m != nil {
		return m.Status
	}
	return Agent_Unknown
}

func (m *Agent) GetChallengeInstances() []*ChallengeInstance {
	if m != nil {
		return m.ChallengeInstances
	}
	return nil
}

type OrganizationMember struct {
	ID             int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt      *time.Time              `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt      *time.Time              `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Role           OrganizationMember_Role `protobuf:"varint,100,opt,name=role,proto3,enum=pathwar.db.OrganizationMember_Role" json:"role,omitempty"`
	User           *User                   `protobuf:"bytes,200,opt,name=user,proto3" json:"user,omitempty" gorm:"foreignkey:UserID"`
	UserID         int64                   `protobuf:"varint,201,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:"not null" gorm:"index"`
	Organization   *Organization           `protobuf:"bytes,202,opt,name=organization,proto3" json:"organization,omitempty" gorm:"foreignkey:OrganizationID"`
	OrganizationID int64                   `protobuf:"varint,203,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *OrganizationMember) Reset()         { *m = OrganizationMember{} }
func (m *OrganizationMember) String() string { return proto.CompactTextString(m) }
func (*OrganizationMember) ProtoMessage()    {}
func (*OrganizationMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{7}
}
func (m *OrganizationMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationMember.Merge(m, src)
}
func (m *OrganizationMember) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationMember) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationMember.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationMember proto.InternalMessageInfo

func (m *OrganizationMember) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OrganizationMember) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *OrganizationMember) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *OrganizationMember) GetRole() OrganizationMember_Role {
	if m != nil {
		return m.Role
	}
	return OrganizationMember_Undefined
}

func (m *OrganizationMember) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *OrganizationMember) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *OrganizationMember) GetOrganization() *Organization {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *OrganizationMember) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

type TeamMember struct {
	ID                      int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt               *time.Time             `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt               *time.Time             `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Role                    TeamMember_Role        `protobuf:"varint,100,opt,name=role,proto3,enum=pathwar.db.TeamMember_Role" json:"role,omitempty"`
	User                    *User                  `protobuf:"bytes,200,opt,name=user,proto3" json:"user,omitempty" gorm:"foreignkey:UserID"`
	UserID                  int64                  `protobuf:"varint,201,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:"not null" gorm:"index"`
	Team                    *Team                  `protobuf:"bytes,202,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID                  int64                  `protobuf:"varint,203,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"index"`
	Coupons                 []*Coupon              `protobuf:"bytes,204,rep,name=coupons,proto3" json:"coupons,omitempty" gorm:"PRELOAD:false"`
	Achievements            []*Achievement         `protobuf:"bytes,205,rep,name=achievements,proto3" json:"achievements,omitempty" gorm:"PRELOAD:false"`
	SentWhoswhoAttempts     []*WhoswhoAttempt      `protobuf:"bytes,206,rep,name=sent_whoswho_attempts,json=sentWhoswhoAttempts,proto3" json:"sent_whoswho_attempts,omitempty" gorm:"PRELOAD:false"`
	ReceivedWhoswhoAttempts []*WhoswhoAttempt      `protobuf:"bytes,207,rep,name=received_whoswho_attempts,json=receivedWhoswhoAttempts,proto3" json:"received_whoswho_attempts,omitempty" gorm:"PRELOAD:false"`
	Items                   []*InventoryItem       `protobuf:"bytes,208,rep,name=items,proto3" json:"items,omitempty" gorm:"PRELOAD:false"`
	ChallengeValidations    []*ChallengeValidation `protobuf:"bytes,209,rep,name=challenge_validations,json=challengeValidations,proto3" json:"challenge_validations,omitempty" gorm:"PRELOAD:false"`
}

func (m *TeamMember) Reset()         { *m = TeamMember{} }
func (m *TeamMember) String() string { return proto.CompactTextString(m) }
func (*TeamMember) ProtoMessage()    {}
func (*TeamMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{8}
}
func (m *TeamMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamMember.Merge(m, src)
}
func (m *TeamMember) XXX_Size() int {
	return m.Size()
}
func (m *TeamMember) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamMember.DiscardUnknown(m)
}

var xxx_messageInfo_TeamMember proto.InternalMessageInfo

func (m *TeamMember) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TeamMember) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TeamMember) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *TeamMember) GetRole() TeamMember_Role {
	if m != nil {
		return m.Role
	}
	return TeamMember_Undefined
}

func (m *TeamMember) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TeamMember) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *TeamMember) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *TeamMember) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *TeamMember) GetCoupons() []*Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

func (m *TeamMember) GetAchievements() []*Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

func (m *TeamMember) GetSentWhoswhoAttempts() []*WhoswhoAttempt {
	if m != nil {
		return m.SentWhoswhoAttempts
	}
	return nil
}

func (m *TeamMember) GetReceivedWhoswhoAttempts() []*WhoswhoAttempt {
	if m != nil {
		return m.ReceivedWhoswhoAttempts
	}
	return nil
}

func (m *TeamMember) GetItems() []*InventoryItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *TeamMember) GetChallengeValidations() []*ChallengeValidation {
	if m != nil {
		return m.ChallengeValidations
	}
	return nil
}

// User defines a User Account / Profile
type User struct {
	ID                      int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt               *time.Time            `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt               *time.Time            `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	DeletedAt               *time.Time            `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,stdtime" json:"deleted_at,omitempty"`
	Username                string                `protobuf:"bytes,100,opt,name=username,proto3" json:"username,omitempty"`
	Email                   string                `protobuf:"bytes,101,opt,name=email,proto3" json:"email,omitempty"`
	GravatarURL             string                `protobuf:"bytes,102,opt,name=gravatar_url,json=gravatarUrl,proto3" json:"gravatar_url,omitempty"`
	WebsiteURL              string                `protobuf:"bytes,103,opt,name=website_url,json=websiteUrl,proto3" json:"website_url,omitempty"`
	Locale                  string                `protobuf:"bytes,104,opt,name=locale,proto3" json:"locale,omitempty"`
	OAuthSubject            string                `protobuf:"bytes,105,opt,name=oauth_subject,json=oauthSubject,proto3" json:"oauth_subject,omitempty" gorm:"unique_index"`
	DeletionReason          string                `protobuf:"bytes,106,opt,name=deletion_reason,json=deletionReason,proto3" json:"deletion_reason,omitempty"`
	DeletionStatus          DeletionStatus        `protobuf:"varint,107,opt,name=deletion_status,json=deletionStatus,proto3,enum=pathwar.db.DeletionStatus" json:"deletion_status,omitempty"`
	TeamMemberships         []*TeamMember         `protobuf:"bytes,200,rep,name=team_memberships,json=teamMemberships,proto3" json:"team_memberships,omitempty" gorm:"PRELOAD:false"`
	Notifications           []*Notification       `protobuf:"bytes,201,rep,name=notifications,proto3" json:"notifications,omitempty" gorm:"PRELOAD:false"`
	OrganizationMemberships []*OrganizationMember `protobuf:"bytes,202,rep,name=organization_memberships,json=organizationMemberships,proto3" json:"organization_memberships,omitempty" gorm:"PRELOAD:false"`
	ActiveTeamMember        *TeamMember           `protobuf:"bytes,203,opt,name=active_team_member,json=activeTeamMember,proto3" json:"active_team_member,omitempty" gorm:"foreignkey:ActiveTeamMemberID;PRELOAD:false"`
	ActiveTeamMemberID      int64                 `protobuf:"varint,204,opt,name=active_team_member_id,json=activeTeamMemberId,proto3" json:"active_team_member_id,omitempty" sql:"not null" gorm:"index"`
	ActiveSeason            *Season               `protobuf:"bytes,205,opt,name=active_season,json=activeSeason,proto3" json:"active_season,omitempty" gorm:"foreignkey:ActiveSeasonID;PRELOAD:false"`
	ActiveSeasonID          int64                 `protobuf:"varint,206,opt,name=active_season_id,json=activeSeasonId,proto3" json:"active_season_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{9}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *User) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *User) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetGravatarURL() string {
	if m != nil {
		return m.GravatarURL
	}
	return ""
}

func (m *User) GetWebsiteURL() string {
	if m != nil {
		return m.WebsiteURL
	}
	return ""
}

func (m *User) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *User) GetOAuthSubject() string {
	if m != nil {
		return m.OAuthSubject
	}
	return ""
}

func (m *User) GetDeletionReason() string {
	if m != nil {
		return m.DeletionReason
	}
	return ""
}

func (m *User) GetDeletionStatus() DeletionStatus {
	if m != nil {
		return m.DeletionStatus
	}
	return DeletionStatus_Unknown
}

func (m *User) GetTeamMemberships() []*TeamMember {
	if m != nil {
		return m.TeamMemberships
	}
	return nil
}

func (m *User) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *User) GetOrganizationMemberships() []*OrganizationMember {
	if m != nil {
		return m.OrganizationMemberships
	}
	return nil
}

func (m *User) GetActiveTeamMember() *TeamMember {
	if m != nil {
		return m.ActiveTeamMember
	}
	return nil
}

func (m *User) GetActiveTeamMemberID() int64 {
	if m != nil {
		return m.ActiveTeamMemberID
	}
	return 0
}

func (m *User) GetActiveSeason() *Season {
	if m != nil {
		return m.ActiveSeason
	}
	return nil
}

func (m *User) GetActiveSeasonID() int64 {
	if m != nil {
		return m.ActiveSeasonID
	}
	return 0
}

type UserList struct {
	Items []*User `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{10}
}
func (m *UserList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return m.Size()
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetItems() []*User {
	if m != nil {
		return m.Items
	}
	return nil
}

type Organization struct {
	ID                      int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt               *time.Time            `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt               *time.Time            `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	DeletedAt               *time.Time            `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,stdtime" json:"deleted_at,omitempty"`
	Name                    string                `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	GravatarURL             string                `protobuf:"bytes,101,opt,name=gravatar_url,json=gravatarUrl,proto3" json:"gravatar_url,omitempty"`
	Locale                  string                `protobuf:"bytes,102,opt,name=locale,proto3" json:"locale,omitempty"`
	DeletionStatus          DeletionStatus        `protobuf:"varint,103,opt,name=deletion_status,json=deletionStatus,proto3,enum=pathwar.db.DeletionStatus" json:"deletion_status,omitempty"`
	SoloSeason              bool                  `protobuf:"varint,104,opt,name=solo_season,json=soloSeason,proto3" json:"solo_season,omitempty"`
	Teams                   []*Team               `protobuf:"bytes,200,rep,name=teams,proto3" json:"teams,omitempty" gorm:"PRELOAD:false"`
	ReceivedWhoswhoAttempts []*WhoswhoAttempt     `protobuf:"bytes,201,rep,name=received_whoswho_attempts,json=receivedWhoswhoAttempts,proto3" json:"received_whoswho_attempts,omitempty" gorm:"PRELOAD:false"`
	Members                 []*OrganizationMember `protobuf:"bytes,202,rep,name=members,proto3" json:"members,omitempty" gorm:"PRELOAD:false"`
}

func (m *Organization) Reset()         { *m = Organization{} }
func (m *Organization) String() string { return proto.CompactTextString(m) }
func (*Organization) ProtoMessage()    {}
func (*Organization) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{11}
}
func (m *Organization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Organization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Organization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Organization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Organization.Merge(m, src)
}
func (m *Organization) XXX_Size() int {
	return m.Size()
}
func (m *Organization) XXX_DiscardUnknown() {
	xxx_messageInfo_Organization.DiscardUnknown(m)
}

var xxx_messageInfo_Organization proto.InternalMessageInfo

func (m *Organization) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Organization) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Organization) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Organization) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *Organization) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Organization) GetGravatarURL() string {
	if m != nil {
		return m.GravatarURL
	}
	return ""
}

func (m *Organization) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *Organization) GetDeletionStatus() DeletionStatus {
	if m != nil {
		return m.DeletionStatus
	}
	return DeletionStatus_Unknown
}

func (m *Organization) GetSoloSeason() bool {
	if m != nil {
		return m.SoloSeason
	}
	return false
}

func (m *Organization) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *Organization) GetReceivedWhoswhoAttempts() []*WhoswhoAttempt {
	if m != nil {
		return m.ReceivedWhoswhoAttempts
	}
	return nil
}

func (m *Organization) GetMembers() []*OrganizationMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type OrganizationList struct {
	Items []*Organization `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *OrganizationList) Reset()         { *m = OrganizationList{} }
func (m *OrganizationList) String() string { return proto.CompactTextString(m) }
func (*OrganizationList) ProtoMessage()    {}
func (*OrganizationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{12}
}
func (m *OrganizationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationList.Merge(m, src)
}
func (m *OrganizationList) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationList) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationList.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationList proto.InternalMessageInfo

func (m *OrganizationList) GetItems() []*Organization {
	if m != nil {
		return m.Items
	}
	return nil
}

type Season struct {
	ID            int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt     *time.Time        `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt     *time.Time        `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Name          string            `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Status        Season_Status     `protobuf:"varint,101,opt,name=status,proto3,enum=pathwar.db.Season_Status" json:"status,omitempty"`
	Visibility    Season_Visibility `protobuf:"varint,102,opt,name=visibility,proto3,enum=pathwar.db.Season_Visibility" json:"visibility,omitempty"`
	IsDefault     bool              `protobuf:"varint,103,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Organizations []*Team           `protobuf:"bytes,200,rep,name=organizations,proto3" json:"organizations,omitempty" gorm:"PRELOAD:false"`
	Coupons       []*Coupon         `protobuf:"bytes,201,rep,name=coupons,proto3" json:"coupons,omitempty" gorm:"PRELOAD:false"`
}

func (m *Season) Reset()         { *m = Season{} }
func (m *Season) String() string { return proto.CompactTextString(m) }
func (*Season) ProtoMessage()    {}
func (*Season) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{13}
}
func (m *Season) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Season) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Season.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Season) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Season.Merge(m, src)
}
func (m *Season) XXX_Size() int {
	return m.Size()
}
func (m *Season) XXX_DiscardUnknown() {
	xxx_messageInfo_Season.DiscardUnknown(m)
}

var xxx_messageInfo_Season proto.InternalMessageInfo

func (m *Season) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Season) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Season) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Season) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Season) GetStatus() Season_Status {
	if m != nil {
		return m.Status
	}
	return Season_UnknownStatus
}

func (m *Season) GetVisibility() Season_Visibility {
	if m != nil {
		return m.Visibility
	}
	return Season_UnknownVisibility
}

func (m *Season) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *Season) GetOrganizations() []*Team {
	if m != nil {
		return m.Organizations
	}
	return nil
}

func (m *Season) GetCoupons() []*Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

type SeasonList struct {
	Items []*Season `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *SeasonList) Reset()         { *m = SeasonList{} }
func (m *SeasonList) String() string { return proto.CompactTextString(m) }
func (*SeasonList) ProtoMessage()    {}
func (*SeasonList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{14}
}
func (m *SeasonList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonList.Merge(m, src)
}
func (m *SeasonList) XXX_Size() int {
	return m.Size()
}
func (m *SeasonList) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonList.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonList proto.InternalMessageInfo

func (m *SeasonList) GetItems() []*Season {
	if m != nil {
		return m.Items
	}
	return nil
}

type Team struct {
	ID                     int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt              *time.Time               `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt              *time.Time               `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	DeletedAt              *time.Time               `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,stdtime" json:"deleted_at,omitempty"`
	IsDefault              bool                     `protobuf:"varint,100,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	DeletionStatus         DeletionStatus           `protobuf:"varint,101,opt,name=deletion_status,json=deletionStatus,proto3,enum=pathwar.db.DeletionStatus" json:"deletion_status,omitempty"`
	Cash                   int64                    `protobuf:"varint,102,opt,name=cash,proto3" json:"cash,omitempty"`
	Score                  int64                    `protobuf:"varint,103,opt,name=score,proto3" json:"score,omitempty"`
	GoldMedals             int64                    `protobuf:"varint,104,opt,name=gold_medals,json=goldMedals,proto3" json:"gold_medals,omitempty"`
	SilverMedals           int64                    `protobuf:"varint,105,opt,name=silver_medals,json=silverMedals,proto3" json:"silver_medals,omitempty"`
	BronzeMedals           int64                    `protobuf:"varint,106,opt,name=bronze_medals,json=bronzeMedals,proto3" json:"bronze_medals,omitempty"`
	NbAchievements         int64                    `protobuf:"varint,107,opt,name=nb_achievements,json=nbAchievements,proto3" json:"nb_achievements,omitempty"`
	Season                 *Season                  `protobuf:"bytes,200,opt,name=season,proto3" json:"season,omitempty" gorm:"foreignkey:SeasonID"`
	SeasonID               int64                    `protobuf:"varint,201,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty" sql:"not null" gorm:"index;unique_index:idx_team_season_organization"`
	Organization           *Organization            `protobuf:"bytes,202,opt,name=organization,proto3" json:"organization,omitempty" gorm:"foreignkey:OrganizationID"`
	OrganizationID         int64                    `protobuf:"varint,203,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty" sql:"not null" gorm:"index;unique_index:idx_team_season_organization"`
	ChallengeSubscriptions []*ChallengeSubscription `protobuf:"bytes,205,rep,name=challenge_subscriptions,json=challengeSubscriptions,proto3" json:"challenge_subscriptions,omitempty" gorm:"PRELOAD:false"`
	Members                []*TeamMember            `protobuf:"bytes,206,rep,name=members,proto3" json:"members,omitempty" gorm:"PRELOAD:false"`
	Achievements           []*Achievement           `protobuf:"bytes,207,rep,name=achievements,proto3" json:"achievements,omitempty" gorm:"PRELOAD:false"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{15}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Team) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Team) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Team) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *Team) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *Team) GetDeletionStatus() DeletionStatus {
	if m != nil {
		return m.DeletionStatus
	}
	return DeletionStatus_Unknown
}

func (m *Team) GetCash() int64 {
	if m != nil {
		return m.Cash
	}
	return 0
}

func (m *Team) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Team) GetGoldMedals() int64 {
	if m != nil {
		return m.GoldMedals
	}
	return 0
}

func (m *Team) GetSilverMedals() int64 {
	if m != nil {
		return m.SilverMedals
	}
	return 0
}

func (m *Team) GetBronzeMedals() int64 {
	if m != nil {
		return m.BronzeMedals
	}
	return 0
}

func (m *Team) GetNbAchievements() int64 {
	if m != nil {
		return m.NbAchievements
	}
	return 0
}

func (m *Team) GetSeason() *Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *Team) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *Team) GetOrganization() *Organization {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *Team) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *Team) GetChallengeSubscriptions() []*ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscriptions
	}
	return nil
}

func (m *Team) GetMembers() []*TeamMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Team) GetAchievements() []*Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

type TeamList struct {
	Items []*Team `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *TeamList) Reset()         { *m = TeamList{} }
func (m *TeamList) String() string { return proto.CompactTextString(m) }
func (*TeamList) ProtoMessage()    {}
func (*TeamList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{16}
}
func (m *TeamList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamList.Merge(m, src)
}
func (m *TeamList) XXX_Size() int {
	return m.Size()
}
func (m *TeamList) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamList.DiscardUnknown(m)
}

var xxx_messageInfo_TeamList proto.InternalMessageInfo

func (m *TeamList) GetItems() []*Team {
	if m != nil {
		return m.Items
	}
	return nil
}

type WhoswhoAttempt struct {
	ID        int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt *time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	//
	// fields
	//
	Success bool `protobuf:"varint,100,opt,name=success,proto3" json:"success,omitempty"`
	//
	// associations
	//
	Author       *User `protobuf:"bytes,200,opt,name=author,proto3" json:"author,omitempty" sql:"not null" gorm:"foreignkey:AuthorID"`
	AuthorID     int64 `protobuf:"varint,201,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:"not null" gorm:"index"`
	AuthorTeam   *Team `protobuf:"bytes,202,opt,name=author_team,json=authorTeam,proto3" json:"author_team,omitempty" sql:"not null" gorm:"foreignkey:AuthorTeamID"`
	AuthorTeamID int64 `protobuf:"varint,203,opt,name=author_team_id,json=authorTeamId,proto3" json:"author_team_id,omitempty" sql:"not null" gorm:"index"`
	TargetUser   *User `protobuf:"bytes,204,opt,name=target_user,json=targetUser,proto3" json:"target_user,omitempty" sql:"not null" gorm:"foreignkey:TargetUserID"`
	TargetUserID int64 `protobuf:"varint,205,opt,name=target_user_id,json=targetUserId,proto3" json:"target_user_id,omitempty" sql:"not null" gorm:"index"`
	TargetTeam   *Team `protobuf:"bytes,206,opt,name=target_team,json=targetTeam,proto3" json:"target_team,omitempty" sql:"not null" gorm:"foreignkey:TargetTeamID"`
	TargetTeamID int64 `protobuf:"varint,207,opt,name=target_team_id,json=targetTeamId,proto3" json:"target_team_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *WhoswhoAttempt) Reset()         { *m = WhoswhoAttempt{} }
func (m *WhoswhoAttempt) String() string { return proto.CompactTextString(m) }
func (*WhoswhoAttempt) ProtoMessage()    {}
func (*WhoswhoAttempt) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{17}
}
func (m *WhoswhoAttempt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhoswhoAttempt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhoswhoAttempt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhoswhoAttempt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhoswhoAttempt.Merge(m, src)
}
func (m *WhoswhoAttempt) XXX_Size() int {
	return m.Size()
}
func (m *WhoswhoAttempt) XXX_DiscardUnknown() {
	xxx_messageInfo_WhoswhoAttempt.DiscardUnknown(m)
}

var xxx_messageInfo_WhoswhoAttempt proto.InternalMessageInfo

func (m *WhoswhoAttempt) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WhoswhoAttempt) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *WhoswhoAttempt) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *WhoswhoAttempt) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *WhoswhoAttempt) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *WhoswhoAttempt) GetAuthorID() int64 {
	if m != nil {
		return m.AuthorID
	}
	return 0
}

func (m *WhoswhoAttempt) GetAuthorTeam() *Team {
	if m != nil {
		return m.AuthorTeam
	}
	return nil
}

func (m *WhoswhoAttempt) GetAuthorTeamID() int64 {
	if m != nil {
		return m.AuthorTeamID
	}
	return 0
}

func (m *WhoswhoAttempt) GetTargetUser() *User {
	if m != nil {
		return m.TargetUser
	}
	return nil
}

func (m *WhoswhoAttempt) GetTargetUserID() int64 {
	if m != nil {
		return m.TargetUserID
	}
	return 0
}

func (m *WhoswhoAttempt) GetTargetTeam() *Team {
	if m != nil {
		return m.TargetTeam
	}
	return nil
}

func (m *WhoswhoAttempt) GetTargetTeamID() int64 {
	if m != nil {
		return m.TargetTeamID
	}
	return 0
}

type ChallengeValidation struct {
	ID                      int64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt               *time.Time                 `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt               *time.Time                 `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Status                  ChallengeValidation_Status `protobuf:"varint,100,opt,name=status,proto3,enum=pathwar.db.ChallengeValidation_Status" json:"status,omitempty"`
	AuthorComment           string                     `protobuf:"bytes,101,opt,name=author_comment,json=authorComment,proto3" json:"author_comment,omitempty"`
	CorrectorComment        string                     `protobuf:"bytes,102,opt,name=corrector_comment,json=correctorComment,proto3" json:"corrector_comment,omitempty"`
	PassphraseKey           string                     `protobuf:"bytes,103,opt,name=passphrase_key,json=passphraseKey,proto3" json:"passphrase_key,omitempty"`
	Passphrase              string                     `protobuf:"bytes,104,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	ChallengeSubscription   *ChallengeSubscription     `protobuf:"bytes,200,opt,name=challenge_subscription,json=challengeSubscription,proto3" json:"challenge_subscription,omitempty" gorm:"foreignkey:ChallengeSubscriptionID"`
	ChallengeSubscriptionID int64                      `protobuf:"varint,201,opt,name=challenge_subscription_id,json=challengeSubscriptionId,proto3" json:"challenge_subscription_id,omitempty" sql:"not null" gorm:"index"`
	Author                  *User                      `protobuf:"bytes,202,opt,name=author,proto3" json:"author,omitempty" gorm:"foreignkey:AuthorID"`
	AuthorID                int64                      `protobuf:"varint,203,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:"not null" gorm:"index"`
	Team                    *Team                      `protobuf:"bytes,204,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID                  int64                      `protobuf:"varint,205,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *ChallengeValidation) Reset()         { *m = ChallengeValidation{} }
func (m *ChallengeValidation) String() string { return proto.CompactTextString(m) }
func (*ChallengeValidation) ProtoMessage()    {}
func (*ChallengeValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{18}
}
func (m *ChallengeValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeValidation.Merge(m, src)
}
func (m *ChallengeValidation) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeValidation.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeValidation proto.InternalMessageInfo

func (m *ChallengeValidation) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ChallengeValidation) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ChallengeValidation) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ChallengeValidation) GetStatus() ChallengeValidation_Status {
	if m != nil {
		return m.Status
	}
	return ChallengeValidation_Unknown
}

func (m *ChallengeValidation) GetAuthorComment() string {
	if m != nil {
		return m.AuthorComment
	}
	return ""
}

func (m *ChallengeValidation) GetCorrectorComment() string {
	if m != nil {
		return m.CorrectorComment
	}
	return ""
}

func (m *ChallengeValidation) GetPassphraseKey() string {
	if m != nil {
		return m.PassphraseKey
	}
	return ""
}

func (m *ChallengeValidation) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

func (m *ChallengeValidation) GetChallengeSubscription() *ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscription
	}
	return nil
}

func (m *ChallengeValidation) GetChallengeSubscriptionID() int64 {
	if m != nil {
		return m.ChallengeSubscriptionID
	}
	return 0
}

func (m *ChallengeValidation) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *ChallengeValidation) GetAuthorID() int64 {
	if m != nil {
		return m.AuthorID
	}
	return 0
}

func (m *ChallengeValidation) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *ChallengeValidation) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

type ChallengeSubscription struct {
	ID                int64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt         *time.Time                   `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt         *time.Time                   `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Status            ChallengeSubscription_Status `protobuf:"varint,100,opt,name=status,proto3,enum=pathwar.db.ChallengeSubscription_Status" json:"status,omitempty"`
	ClosedAt          *time.Time                   `protobuf:"bytes,101,opt,name=closed_at,json=closedAt,proto3,stdtime" json:"closed_at,omitempty"`
	Team              *Team                        `protobuf:"bytes,200,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID            int64                        `protobuf:"varint,201,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"unique_index:idx_team_season_challenge"`
	SeasonChallenge   *SeasonChallenge             `protobuf:"bytes,202,opt,name=season_challenge,json=seasonChallenge,proto3" json:"season_challenge,omitempty" gorm:"foreignkey:SeasonChallengeID"`
	SeasonChallengeID int64                        `protobuf:"varint,203,opt,name=season_challenge_id,json=seasonChallengeId,proto3" json:"season_challenge_id,omitempty" sql:"not null" gorm:"unique_index:idx_team_season_challenge"`
	Buyer             *User                        `protobuf:"bytes,204,opt,name=buyer,proto3" json:"buyer,omitempty" gorm:"foreignkey:BuyerID"`
	BuyerID           int64                        `protobuf:"varint,205,opt,name=buyer_id,json=buyerId,proto3" json:"buyer_id,omitempty" sql:"not null" gorm:"index"`
	Closer            *User                        `protobuf:"bytes,206,opt,name=closer,proto3" json:"closer,omitempty" gorm:"foreignkey:CloserID"`
	CloserID          int64                        `protobuf:"varint,207,opt,name=closer_id,json=closerId,proto3" json:"closer_id,omitempty" sql:"null" gorm:"index"`
	Validations       []*ChallengeValidation       `protobuf:"bytes,208,rep,name=validations,proto3" json:"validations,omitempty" gorm:"PRELOAD:false"`
}

func (m *ChallengeSubscription) Reset()         { *m = ChallengeSubscription{} }
func (m *ChallengeSubscription) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscription) ProtoMessage()    {}
func (*ChallengeSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{19}
}
func (m *ChallengeSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscription.Merge(m, src)
}
func (m *ChallengeSubscription) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscription proto.InternalMessageInfo

func (m *ChallengeSubscription) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ChallengeSubscription) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ChallengeSubscription) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ChallengeSubscription) GetStatus() ChallengeSubscription_Status {
	if m != nil {
		return m.Status
	}
	return ChallengeSubscription_Unknown
}

func (m *ChallengeSubscription) GetClosedAt() *time.Time {
	if m != nil {
		return m.ClosedAt
	}
	return nil
}

func (m *ChallengeSubscription) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *ChallengeSubscription) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *ChallengeSubscription) GetSeasonChallenge() *SeasonChallenge {
	if m != nil {
		return m.SeasonChallenge
	}
	return nil
}

func (m *ChallengeSubscription) GetSeasonChallengeID() int64 {
	if m != nil {
		return m.SeasonChallengeID
	}
	return 0
}

func (m *ChallengeSubscription) GetBuyer() *User {
	if m != nil {
		return m.Buyer
	}
	return nil
}

func (m *ChallengeSubscription) GetBuyerID() int64 {
	if m != nil {
		return m.BuyerID
	}
	return 0
}

func (m *ChallengeSubscription) GetCloser() *User {
	if m != nil {
		return m.Closer
	}
	return nil
}

func (m *ChallengeSubscription) GetCloserID() int64 {
	if m != nil {
		return m.CloserID
	}
	return 0
}

func (m *ChallengeSubscription) GetValidations() []*ChallengeValidation {
	if m != nil {
		return m.Validations
	}
	return nil
}

type InventoryItem struct {
	ID        int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt *time.Time         `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time         `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Item      InventoryItem_Item `protobuf:"varint,100,opt,name=item,proto3,enum=pathwar.db.InventoryItem_Item" json:"item,omitempty"`
	Owner     *TeamMember        `protobuf:"bytes,200,opt,name=owner,proto3" json:"owner,omitempty" gorm:"foreignkey:OwnerID"`
	OwnerID   int64              `protobuf:"varint,201,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *InventoryItem) Reset()         { *m = InventoryItem{} }
func (m *InventoryItem) String() string { return proto.CompactTextString(m) }
func (*InventoryItem) ProtoMessage()    {}
func (*InventoryItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{20}
}
func (m *InventoryItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InventoryItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InventoryItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InventoryItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InventoryItem.Merge(m, src)
}
func (m *InventoryItem) XXX_Size() int {
	return m.Size()
}
func (m *InventoryItem) XXX_DiscardUnknown() {
	xxx_messageInfo_InventoryItem.DiscardUnknown(m)
}

var xxx_messageInfo_InventoryItem proto.InternalMessageInfo

func (m *InventoryItem) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *InventoryItem) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *InventoryItem) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *InventoryItem) GetItem() InventoryItem_Item {
	if m != nil {
		return m.Item
	}
	return InventoryItem_Unknown
}

func (m *InventoryItem) GetOwner() *TeamMember {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *InventoryItem) GetOwnerID() int64 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

type Notification struct {
	ID        int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt *time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	IsRead    bool       `protobuf:"varint,100,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	ClickUrl  string     `protobuf:"bytes,101,opt,name=click_url,json=clickUrl,proto3" json:"click_url,omitempty"`
	Msg       string     `protobuf:"bytes,102,opt,name=msg,proto3" json:"msg,omitempty"`
	Args      string     `protobuf:"bytes,103,opt,name=args,proto3" json:"args,omitempty"`
	User      *User      `protobuf:"bytes,200,opt,name=user,proto3" json:"user,omitempty" gorm:"foreignkey:UserID"`
	UserID    int64      `protobuf:"varint,201,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{21}
}
func (m *Notification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return m.Size()
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Notification) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Notification) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Notification) GetIsRead() bool {
	if m != nil {
		return m.IsRead
	}
	return false
}

func (m *Notification) GetClickUrl() string {
	if m != nil {
		return m.ClickUrl
	}
	return ""
}

func (m *Notification) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Notification) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *Notification) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Notification) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type Coupon struct {
	ID        int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt *time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	//
	// fields
	//
	Hash               string `protobuf:"bytes,100,opt,name=hash,proto3" json:"hash,omitempty" gorm:"unique_index"`
	Value              int32  `protobuf:"varint,101,opt,name=value,proto3" json:"value,omitempty"`
	MaxValidationCount int32  `protobuf:"varint,102,opt,name=max_validation_count,json=maxValidationCount,proto3" json:"max_validation_count,omitempty"`
	//
	// associations
	//
	Season      *Season             `protobuf:"bytes,200,opt,name=season,proto3" json:"season,omitempty" gorm:"foreignkey:SeasonID"`
	SeasonID    int64               `protobuf:"varint,201,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty" gorm:"index"`
	Validations []*CouponValidation `protobuf:"bytes,202,rep,name=validations,proto3" json:"validations,omitempty" gorm:"PRELOAD:false"`
}

func (m *Coupon) Reset()         { *m = Coupon{} }
func (m *Coupon) String() string { return proto.CompactTextString(m) }
func (*Coupon) ProtoMessage()    {}
func (*Coupon) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{22}
}
func (m *Coupon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coupon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coupon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coupon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coupon.Merge(m, src)
}
func (m *Coupon) XXX_Size() int {
	return m.Size()
}
func (m *Coupon) XXX_DiscardUnknown() {
	xxx_messageInfo_Coupon.DiscardUnknown(m)
}

var xxx_messageInfo_Coupon proto.InternalMessageInfo

func (m *Coupon) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Coupon) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Coupon) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Coupon) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Coupon) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Coupon) GetMaxValidationCount() int32 {
	if m != nil {
		return m.MaxValidationCount
	}
	return 0
}

func (m *Coupon) GetSeason() *Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *Coupon) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *Coupon) GetValidations() []*CouponValidation {
	if m != nil {
		return m.Validations
	}
	return nil
}

type CouponValidation struct {
	ID        int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt *time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	//
	// fields
	//
	Comment string `protobuf:"bytes,100,opt,name=comment,proto3" json:"comment,omitempty"`
	//
	// associations
	//
	Author   *User   `protobuf:"bytes,200,opt,name=author,proto3" json:"author,omitempty" gorm:"foreignkey:AuthorID"`
	AuthorID int64   `protobuf:"varint,201,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:"not null" gorm:"index"`
	Team     *Team   `protobuf:"bytes,202,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID   int64   `protobuf:"varint,203,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"index"`
	Coupon   *Coupon `protobuf:"bytes,204,opt,name=coupon,proto3" json:"coupon,omitempty" gorm:"foreignkey:CouponID"`
	CouponID int64   `protobuf:"varint,205,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *CouponValidation) Reset()         { *m = CouponValidation{} }
func (m *CouponValidation) String() string { return proto.CompactTextString(m) }
func (*CouponValidation) ProtoMessage()    {}
func (*CouponValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{23}
}
func (m *CouponValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CouponValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CouponValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CouponValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CouponValidation.Merge(m, src)
}
func (m *CouponValidation) XXX_Size() int {
	return m.Size()
}
func (m *CouponValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_CouponValidation.DiscardUnknown(m)
}

var xxx_messageInfo_CouponValidation proto.InternalMessageInfo

func (m *CouponValidation) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CouponValidation) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *CouponValidation) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *CouponValidation) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *CouponValidation) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *CouponValidation) GetAuthorID() int64 {
	if m != nil {
		return m.AuthorID
	}
	return 0
}

func (m *CouponValidation) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *CouponValidation) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *CouponValidation) GetCoupon() *Coupon {
	if m != nil {
		return m.Coupon
	}
	return nil
}

func (m *CouponValidation) GetCouponID() int64 {
	if m != nil {
		return m.CouponID
	}
	return 0
}

type Achievement struct {
	ID                    int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt             *time.Time           `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt             *time.Time           `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Type                  Achievement_Type     `protobuf:"varint,100,opt,name=type,proto3,enum=pathwar.db.Achievement_Type" json:"type,omitempty"`
	IsGlobal              bool                 `protobuf:"varint,101,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
	Comment               string               `protobuf:"bytes,102,opt,name=comment,proto3" json:"comment,omitempty"`
	Argument              string               `protobuf:"bytes,103,opt,name=argument,proto3" json:"argument,omitempty"`
	Author                *User                `protobuf:"bytes,200,opt,name=author,proto3" json:"author,omitempty" gorm:"foreignkey:AuthorID"`
	AuthorID              int64                `protobuf:"varint,201,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:"not null" gorm:"index"`
	Team                  *Team                `protobuf:"bytes,202,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID                int64                `protobuf:"varint,203,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"index"`
	ChallengeValidation   *ChallengeValidation `protobuf:"bytes,204,opt,name=challenge_validation,json=challengeValidation,proto3" json:"challenge_validation,omitempty" gorm:"foreignkey:ChallengeValidationID"`
	ChallengeValidationID int64                `protobuf:"varint,205,opt,name=challenge_validation_id,json=challengeValidationId,proto3" json:"challenge_validation_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *Achievement) Reset()         { *m = Achievement{} }
func (m *Achievement) String() string { return proto.CompactTextString(m) }
func (*Achievement) ProtoMessage()    {}
func (*Achievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{24}
}
func (m *Achievement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement.Merge(m, src)
}
func (m *Achievement) XXX_Size() int {
	return m.Size()
}
func (m *Achievement) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement proto.InternalMessageInfo

func (m *Achievement) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Achievement) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Achievement) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Achievement) GetType() Achievement_Type {
	if m != nil {
		return m.Type
	}
	return Achievement_Undefined
}

func (m *Achievement) GetIsGlobal() bool {
	if m != nil {
		return m.IsGlobal
	}
	return false
}

func (m *Achievement) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Achievement) GetArgument() string {
	if m != nil {
		return m.Argument
	}
	return ""
}

func (m *Achievement) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Achievement) GetAuthorID() int64 {
	if m != nil {
		return m.AuthorID
	}
	return 0
}

func (m *Achievement) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *Achievement) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *Achievement) GetChallengeValidation() *ChallengeValidation {
	if m != nil {
		return m.ChallengeValidation
	}
	return nil
}

func (m *Achievement) GetChallengeValidationID() int64 {
	if m != nil {
		return m.ChallengeValidationID
	}
	return 0
}

type Dump struct {
	Achievements           []*Achievement           `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty"`
	Challenges             []*Challenge             `protobuf:"bytes,2,rep,name=challenges,proto3" json:"challenges,omitempty"`
	ChallengeFlavors       []*ChallengeFlavor       `protobuf:"bytes,3,rep,name=challenge_flavors,json=challengeFlavors,proto3" json:"challenge_flavors,omitempty"`
	ChallengeInstances     []*ChallengeInstance     `protobuf:"bytes,4,rep,name=challenge_instances,json=challengeInstances,proto3" json:"challenge_instances,omitempty"`
	ChallengeSubscriptions []*ChallengeSubscription `protobuf:"bytes,5,rep,name=challenge_subscriptions,json=challengeSubscriptions,proto3" json:"challenge_subscriptions,omitempty"`
	ChallengeValidations   []*ChallengeValidation   `protobuf:"bytes,6,rep,name=challenge_validations,json=challengeValidations,proto3" json:"challenge_validations,omitempty"`
	Coupons                []*Coupon                `protobuf:"bytes,7,rep,name=coupons,proto3" json:"coupons,omitempty"`
	CouponValidations      []*CouponValidation      `protobuf:"bytes,8,rep,name=coupon_validations,json=couponValidations,proto3" json:"coupon_validations,omitempty"`
	Agents                 []*Agent                 `protobuf:"bytes,9,rep,name=agents,proto3" json:"agents,omitempty"`
	InventoryItems         []*InventoryItem         `protobuf:"bytes,10,rep,name=inventory_items,json=inventoryItems,proto3" json:"inventory_items,omitempty"`
	Notifications          []*Notification          `protobuf:"bytes,11,rep,name=notifications,proto3" json:"notifications,omitempty"`
	Organizations          []*Organization          `protobuf:"bytes,12,rep,name=organizations,proto3" json:"organizations,omitempty"`
	OrganizationMembers    []*OrganizationMember    `protobuf:"bytes,13,rep,name=organization_members,json=organizationMembers,proto3" json:"organization_members,omitempty"`
	Seasons                []*Season                `protobuf:"bytes,14,rep,name=seasons,proto3" json:"seasons,omitempty"`
	SeasonChallenges       []*SeasonChallenge       `protobuf:"bytes,15,rep,name=season_challenges,json=seasonChallenges,proto3" json:"season_challenges,omitempty"`
	Teams                  []*Team                  `protobuf:"bytes,16,rep,name=teams,proto3" json:"teams,omitempty"`
	TeamMembers            []*TeamMember            `protobuf:"bytes,17,rep,name=team_members,json=teamMembers,proto3" json:"team_members,omitempty"`
	Users                  []*User                  `protobuf:"bytes,18,rep,name=users,proto3" json:"users,omitempty"`
	WhoswhoAttempts        []*WhoswhoAttempt        `protobuf:"bytes,19,rep,name=whoswho_attempts,json=whoswhoAttempts,proto3" json:"whoswho_attempts,omitempty"`
}

func (m *Dump) Reset()         { *m = Dump{} }
func (m *Dump) String() string { return proto.CompactTextString(m) }
func (*Dump) ProtoMessage()    {}
func (*Dump) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{25}
}
func (m *Dump) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dump.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dump.Merge(m, src)
}
func (m *Dump) XXX_Size() int {
	return m.Size()
}
func (m *Dump) XXX_DiscardUnknown() {
	xxx_messageInfo_Dump.DiscardUnknown(m)
}

var xxx_messageInfo_Dump proto.InternalMessageInfo

func (m *Dump) GetAchievements() []*Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

func (m *Dump) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *Dump) GetChallengeFlavors() []*ChallengeFlavor {
	if m != nil {
		return m.ChallengeFlavors
	}
	return nil
}

func (m *Dump) GetChallengeInstances() []*ChallengeInstance {
	if m != nil {
		return m.ChallengeInstances
	}
	return nil
}

func (m *Dump) GetChallengeSubscriptions() []*ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscriptions
	}
	return nil
}

func (m *Dump) GetChallengeValidations() []*ChallengeValidation {
	if m != nil {
		return m.ChallengeValidations
	}
	return nil
}

func (m *Dump) GetCoupons() []*Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

func (m *Dump) GetCouponValidations() []*CouponValidation {
	if m != nil {
		return m.CouponValidations
	}
	return nil
}

func (m *Dump) GetAgents() []*Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

func (m *Dump) GetInventoryItems() []*InventoryItem {
	if m != nil {
		return m.InventoryItems
	}
	return nil
}

func (m *Dump) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *Dump) GetOrganizations() []*Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

func (m *Dump) GetOrganizationMembers() []*OrganizationMember {
	if m != nil {
		return m.OrganizationMembers
	}
	return nil
}

func (m *Dump) GetSeasons() []*Season {
	if m != nil {
		return m.Seasons
	}
	return nil
}

func (m *Dump) GetSeasonChallenges() []*SeasonChallenge {
	if m != nil {
		return m.SeasonChallenges
	}
	return nil
}

func (m *Dump) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *Dump) GetTeamMembers() []*TeamMember {
	if m != nil {
		return m.TeamMembers
	}
	return nil
}

func (m *Dump) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Dump) GetWhoswhoAttempts() []*WhoswhoAttempt {
	if m != nil {
		return m.WhoswhoAttempts
	}
	return nil
}

type Info struct {
	TableRows map[string]uint32 `protobuf:"bytes,1,rep,name=table_rows,json=tableRows,proto3" json:"table_rows,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{26}
}
func (m *Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(m, src)
}
func (m *Info) XXX_Size() int {
	return m.Size()
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetTableRows() map[string]uint32 {
	if m != nil {
		return m.TableRows
	}
	return nil
}

func init() {
	proto.RegisterEnum("pathwar.db.DeletionStatus", DeletionStatus_name, DeletionStatus_value)
	proto.RegisterEnum("pathwar.db.ChallengeFlavor_Driver", ChallengeFlavor_Driver_name, ChallengeFlavor_Driver_value)
	proto.RegisterEnum("pathwar.db.ChallengeInstance_Status", ChallengeInstance_Status_name, ChallengeInstance_Status_value)
	proto.RegisterEnum("pathwar.db.Agent_Status", Agent_Status_name, Agent_Status_value)
	proto.RegisterEnum("pathwar.db.OrganizationMember_Role", OrganizationMember_Role_name, OrganizationMember_Role_value)
	proto.RegisterEnum("pathwar.db.TeamMember_Role", TeamMember_Role_name, TeamMember_Role_value)
	proto.RegisterEnum("pathwar.db.Season_Status", Season_Status_name, Season_Status_value)
	proto.RegisterEnum("pathwar.db.Season_Visibility", Season_Visibility_name, Season_Visibility_value)
	proto.RegisterEnum("pathwar.db.ChallengeValidation_Status", ChallengeValidation_Status_name, ChallengeValidation_Status_value)
	proto.RegisterEnum("pathwar.db.ChallengeSubscription_Status", ChallengeSubscription_Status_name, ChallengeSubscription_Status_value)
	proto.RegisterEnum("pathwar.db.InventoryItem_Item", InventoryItem_Item_name, InventoryItem_Item_value)
	proto.RegisterEnum("pathwar.db.Achievement_Type", Achievement_Type_name, Achievement_Type_value)
	proto.RegisterType((*Challenge)(nil), "pathwar.db.Challenge")
	proto.RegisterType((*ChallengeList)(nil), "pathwar.db.ChallengeList")
	proto.RegisterType((*ChallengeFlavor)(nil), "pathwar.db.ChallengeFlavor")
	proto.RegisterType((*SeasonChallenge)(nil), "pathwar.db.SeasonChallenge")
	proto.RegisterType((*SeasonChallengeList)(nil), "pathwar.db.SeasonChallengeList")
	proto.RegisterType((*ChallengeInstance)(nil), "pathwar.db.ChallengeInstance")
	proto.RegisterType((*Agent)(nil), "pathwar.db.Agent")
	proto.RegisterType((*OrganizationMember)(nil), "pathwar.db.OrganizationMember")
	proto.RegisterType((*TeamMember)(nil), "pathwar.db.TeamMember")
	proto.RegisterType((*User)(nil), "pathwar.db.User")
	proto.RegisterType((*UserList)(nil), "pathwar.db.UserList")
	proto.RegisterType((*Organization)(nil), "pathwar.db.Organization")
	proto.RegisterType((*OrganizationList)(nil), "pathwar.db.OrganizationList")
	proto.RegisterType((*Season)(nil), "pathwar.db.Season")
	proto.RegisterType((*SeasonList)(nil), "pathwar.db.SeasonList")
	proto.RegisterType((*Team)(nil), "pathwar.db.Team")
	proto.RegisterType((*TeamList)(nil), "pathwar.db.TeamList")
	proto.RegisterType((*WhoswhoAttempt)(nil), "pathwar.db.WhoswhoAttempt")
	proto.RegisterType((*ChallengeValidation)(nil), "pathwar.db.ChallengeValidation")
	proto.RegisterType((*ChallengeSubscription)(nil), "pathwar.db.ChallengeSubscription")
	proto.RegisterType((*InventoryItem)(nil), "pathwar.db.InventoryItem")
	proto.RegisterType((*Notification)(nil), "pathwar.db.Notification")
	proto.RegisterType((*Coupon)(nil), "pathwar.db.Coupon")
	proto.RegisterType((*CouponValidation)(nil), "pathwar.db.CouponValidation")
	proto.RegisterType((*Achievement)(nil), "pathwar.db.Achievement")
	proto.RegisterType((*Dump)(nil), "pathwar.db.Dump")
	proto.RegisterType((*Info)(nil), "pathwar.db.Info")
	proto.RegisterMapType((map[string]uint32)(nil), "pathwar.db.Info.TableRowsEntry")
}

func init() { proto.RegisterFile("pwdb.proto", fileDescriptor_debbe06253822cef) }

var fileDescriptor_debbe06253822cef = []byte{
	// 4053 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3b, 0x4d, 0x73, 0x1b, 0x47,
	0x76, 0x02, 0x09, 0x80, 0xc0, 0x03, 0x41, 0x0e, 0x9b, 0xa4, 0x08, 0xc9, 0x12, 0x87, 0x1e, 0xef,
	0x5a, 0xb2, 0x65, 0x91, 0x12, 0x13, 0x6d, 0x36, 0x92, 0xe3, 0x0a, 0x3f, 0x64, 0x0b, 0xb6, 0x6c,
	0x69, 0x87, 0xa2, 0x1c, 0x7f, 0xa4, 0x50, 0x83, 0x99, 0x06, 0x30, 0xe6, 0x60, 0x06, 0x9a, 0x1e,
	0x90, 0x86, 0xab, 0x52, 0x95, 0xc3, 0x26, 0x95, 0xe3, 0x5e, 0x53, 0x95, 0x43, 0x4e, 0xa9, 0x4a,
	0x55, 0x2e, 0x39, 0xa7, 0x2a, 0xa7, 0x1c, 0x24, 0xdb, 0x92, 0x9d, 0xda, 0x4b, 0x0e, 0x29, 0x24,
	0x45, 0x1f, 0x93, 0x43, 0x8a, 0xf9, 0x01, 0x49, 0x75, 0xf7, 0x7c, 0xf4, 0x0c, 0x06, 0x00, 0x65,
	0x6a, 0x93, 0xe5, 0x7a, 0x2f, 0x24, 0xfa, 0xf5, 0x7b, 0xaf, 0x5f, 0x77, 0xbf, 0x7e, 0xfd, 0xfa,
	0xbd, 0x37, 0x00, 0x9d, 0x03, 0xa3, 0xbe, 0xda, 0x71, 0x1d, 0xcf, 0x41, 0xd0, 0xd1, 0xbc, 0xd6,
	0x81, 0xe6, 0xae, 0x1a, 0xf5, 0xf3, 0xb7, 0x9a, 0xa6, 0xd7, 0xea, 0xd6, 0x57, 0x75, 0xa7, 0xbd,
	0xd6, 0x74, 0x2c, 0xcd, 0x6e, 0xae, 0x31, 0xa4, 0x7a, 0xb7, 0xb1, 0xd6, 0xf1, 0x7a, 0x1d, 0x4c,
	0xd6, 0x3c, 0xb3, 0x8d, 0x89, 0xa7, 0xb5, 0x3b, 0xd1, 0x2f, 0xce, 0xe8, 0xfc, 0x85, 0xa6, 0xe3,
	0x34, 0x2d, 0xbc, 0xa6, 0x75, 0xcc, 0x35, 0xcd, 0xb6, 0x1d, 0x4f, 0xf3, 0x4c, 0xc7, 0x26, 0x7e,
	0xef, 0xd5, 0x18, 0xeb, 0xa6, 0x13, 0x31, 0xa6, 0x2d, 0xd6, 0x60, 0xbf, 0x7c, 0xf4, 0x1d, 0x11,
	0xdd, 0xed, 0xe8, 0x57, 0xb1, 0xee, 0x90, 0x1e, 0xf1, 0xb0, 0xdf, 0x6c, 0x6a, 0x1e, 0x3e, 0xd0,
	0x7a, 0x9c, 0x8b, 0x7e, 0xb5, 0x89, 0xed, 0xab, 0xe4, 0x40, 0x6b, 0x36, 0xb1, 0xbb, 0xe6, 0x74,
	0xd8, 0xb8, 0x83, 0x32, 0x28, 0xbf, 0x9c, 0x84, 0xe2, 0x56, 0x4b, 0xb3, 0x2c, 0x6c, 0x37, 0x31,
	0x7a, 0x03, 0x26, 0x4c, 0xa3, 0x92, 0x59, 0xc9, 0x5c, 0x9e, 0xdc, 0xbc, 0x70, 0xd8, 0x97, 0x27,
	0xaa, 0xdb, 0x47, 0x7d, 0x19, 0x35, 0x1d, 0xb7, 0x7d, 0x53, 0xe9, 0xb8, 0x66, 0x5b, 0x73, 0x7b,
	0xb5, 0x3d, 0xdc, 0x53, 0xd4, 0x09, 0xd3, 0x40, 0x5b, 0x00, 0xba, 0x8b, 0x35, 0x0f, 0x1b, 0x35,
	0xcd, 0xab, 0x4c, 0xac, 0x64, 0x2e, 0x97, 0xd6, 0xcf, 0xaf, 0xf2, 0x29, 0xaf, 0x06, 0x73, 0x59,
	0x7d, 0x10, 0xac, 0xc9, 0x66, 0xe1, 0x71, 0x5f, 0xce, 0xfc, 0xe2, 0xdf, 0xe4, 0x8c, 0x5a, 0xf4,
	0xe9, 0x36, 0x3c, 0xca, 0xa4, 0xdb, 0x31, 0x02, 0x26, 0x93, 0xcf, 0xc3, 0xc4, 0xa7, 0xdb, 0xf0,
	0x10, 0x82, 0xac, 0xad, 0xb5, 0x71, 0xc5, 0x58, 0xc9, 0x5c, 0x2e, 0xaa, 0xec, 0x37, 0x5a, 0x81,
	0x92, 0x81, 0x89, 0xee, 0x9a, 0x6c, 0xee, 0x15, 0xcc, 0xba, 0x44, 0x10, 0x3a, 0x0b, 0x79, 0xad,
	0xeb, 0xb5, 0x1c, 0xb7, 0xd2, 0x60, 0x9d, 0x7e, 0x8b, 0xc2, 0x2d, 0x47, 0xd7, 0x2c, 0x5c, 0x31,
	0x39, 0x9c, 0xb7, 0xd0, 0x39, 0x28, 0x98, 0xa4, 0x66, 0xb8, 0x5a, 0xc3, 0xab, 0x7c, 0xb6, 0x92,
	0xb9, 0x5c, 0x50, 0xa7, 0x4c, 0xb2, 0x4d, 0x9b, 0x48, 0x86, 0x52, 0xc7, 0xc5, 0xfb, 0x26, 0x3e,
	0xa8, 0x75, 0x5d, 0xab, 0xb2, 0xc7, 0xe8, 0xc0, 0x07, 0xed, 0xba, 0x16, 0x3a, 0x0f, 0x85, 0x96,
	0xd3, 0xc6, 0x1d, 0xad, 0x89, 0x2b, 0x16, 0xeb, 0x0d, 0xdb, 0xe8, 0x3e, 0x4c, 0x35, 0x2c, 0x6d,
	0xdf, 0x71, 0x49, 0xe5, 0x71, 0x66, 0x65, 0xf2, 0x72, 0x69, 0xfd, 0xa5, 0xd5, 0x48, 0x03, 0x57,
	0xc3, 0xed, 0x79, 0x9b, 0x21, 0x6d, 0x56, 0x8e, 0xfa, 0xf2, 0x02, 0xdf, 0x92, 0xfb, 0xea, 0xed,
	0xbb, 0xf7, 0x36, 0xb6, 0x6f, 0x36, 0x34, 0x8b, 0x60, 0x45, 0x0d, 0xd8, 0x28, 0x6f, 0x42, 0x39,
	0xa4, 0xba, 0x6b, 0x12, 0x0f, 0x5d, 0x81, 0x9c, 0xe9, 0xe1, 0x36, 0xa9, 0x70, 0xfe, 0x8b, 0xa9,
	0xfc, 0x55, 0x8e, 0xa3, 0xfc, 0x47, 0x0e, 0x66, 0x13, 0x83, 0x9e, 0x5a, 0xcd, 0xa8, 0xc0, 0xd4,
	0x3e, 0x76, 0x09, 0xd5, 0x00, 0xae, 0x1c, 0x41, 0x13, 0x5d, 0x80, 0xa2, 0xde, 0xd2, 0xec, 0x26,
	0xb6, 0x9c, 0xa6, 0xaf, 0x1d, 0x11, 0x20, 0xb6, 0xd7, 0x8d, 0xf8, 0x5e, 0xbf, 0x04, 0x45, 0x93,
	0xd4, 0x2c, 0xcd, 0xc3, 0xc4, 0xab, 0x34, 0x59, 0x5f, 0xc1, 0x24, 0x77, 0x59, 0x1b, 0xbd, 0x01,
	0x40, 0x9c, 0xae, 0xab, 0x63, 0xa6, 0x07, 0x2d, 0xca, 0x76, 0xb3, 0x7c, 0xd8, 0x97, 0x8b, 0x3b,
	0x0c, 0xba, 0xab, 0xde, 0x55, 0x8b, 0x1c, 0x81, 0x6a, 0xc5, 0x4d, 0xc8, 0x1b, 0xae, 0xb9, 0x8f,
	0x5d, 0xa6, 0x69, 0x33, 0xeb, 0xca, 0x88, 0x7d, 0x5f, 0xdd, 0x66, 0x98, 0xaa, 0x4f, 0x81, 0x3e,
	0x64, 0xf2, 0x73, 0x0c, 0xaa, 0x37, 0x99, 0xa1, 0xfb, 0xba, 0xf9, 0xf2, 0x51, 0x5f, 0xbe, 0xc8,
	0xb7, 0xaa, 0xe1, 0xb8, 0xd8, 0x6c, 0xda, 0x7b, 0xb8, 0x77, 0x33, 0xec, 0xaf, 0x6e, 0x2b, 0x6a,
	0xc4, 0x0b, 0xa9, 0x30, 0x1d, 0x36, 0x6a, 0xa6, 0x51, 0x79, 0xc2, 0x77, 0x7d, 0xf5, 0xb0, 0x2f,
	0x97, 0x04, 0x9a, 0xa3, 0xbe, 0xfc, 0x12, 0x79, 0x64, 0xdd, 0x54, 0x6c, 0xc7, 0x5b, 0xb1, 0xbb,
	0x96, 0xa5, 0xac, 0xf0, 0x21, 0x4c, 0xdb, 0xc0, 0x9f, 0x2b, 0x6a, 0x29, 0x64, 0x52, 0x35, 0x90,
	0x0e, 0x73, 0x04, 0x6b, 0xc4, 0xb1, 0x6b, 0x21, 0x94, 0x54, 0xbe, 0x4c, 0x51, 0xf6, 0x1d, 0x86,
	0x15, 0x89, 0x3e, 0x5c, 0xd9, 0x25, 0x12, 0x47, 0x25, 0xca, 0xef, 0x42, 0x9e, 0xaf, 0x11, 0x2a,
	0xc1, 0xd4, 0xae, 0xbd, 0x67, 0x3b, 0x07, 0xb6, 0x74, 0x06, 0x01, 0xe4, 0xb7, 0x1d, 0x7d, 0x0f,
	0xbb, 0x52, 0x06, 0xcd, 0x41, 0x99, 0xff, 0xde, 0x72, 0xda, 0x1d, 0x87, 0x60, 0x69, 0x42, 0xf9,
	0xc7, 0x1c, 0xcc, 0x26, 0x46, 0x3d, 0xb5, 0xda, 0xfe, 0x00, 0xf2, 0xdc, 0x04, 0x04, 0x0a, 0x31,
	0xd2, 0x90, 0x2c, 0x1f, 0xf5, 0xe5, 0xf3, 0x03, 0x6a, 0xc1, 0x3b, 0xa9, 0x4e, 0xf8, 0xbc, 0x50,
	0x15, 0x8a, 0xfc, 0x97, 0xa0, 0x0d, 0x57, 0x0e, 0xfb, 0x72, 0x21, 0x40, 0x1d, 0xa7, 0x0a, 0x05,
	0x4e, 0x5e, 0x35, 0xd0, 0x7b, 0x90, 0xe7, 0xdb, 0x46, 0x37, 0x9f, 0x0a, 0x88, 0x06, 0x37, 0x7f,
	0x88, 0x5c, 0xbc, 0x93, 0xc9, 0xc5, 0x59, 0x50, 0xb9, 0x7c, 0xa5, 0x32, 0x8d, 0xca, 0x57, 0x82,
	0x5c, 0x01, 0xea, 0x58, 0xb9, 0x38, 0x79, 0xd5, 0x40, 0x0f, 0xa1, 0x68, 0xda, 0xc4, 0xd3, 0x6c,
	0x1d, 0x93, 0xca, 0xd7, 0x5c, 0x2f, 0x2f, 0xa6, 0xae, 0x5d, 0xd5, 0x47, 0x1b, 0xa1, 0x99, 0x11,
	0x2b, 0x54, 0x87, 0x32, 0xe9, 0xd6, 0xc3, 0x2b, 0x87, 0x54, 0x9e, 0x72, 0xde, 0x2f, 0xa7, 0xf2,
	0xde, 0x11, 0x50, 0x47, 0xf0, 0x8f, 0xb3, 0x54, 0xee, 0xc0, 0x7c, 0x42, 0x7f, 0x99, 0xc9, 0xbf,
	0x1e, 0x37, 0xf9, 0xa3, 0x4e, 0x59, 0x60, 0xf8, 0xff, 0x33, 0x0b, 0x73, 0x03, 0x13, 0x3d, 0xb5,
	0x87, 0xe1, 0x4d, 0xc8, 0x13, 0x4f, 0xf3, 0xba, 0x84, 0x59, 0xfe, 0x99, 0xf5, 0x1f, 0x8d, 0xdc,
	0xcf, 0xd5, 0x1d, 0x86, 0xab, 0xfa, 0x34, 0xe8, 0x1d, 0xc8, 0x69, 0x4d, 0x6c, 0x7b, 0xc1, 0x49,
	0x9a, 0x13, 0xa9, 0x37, 0x68, 0xcf, 0xe6, 0xc5, 0xa3, 0xbe, 0x7c, 0x6e, 0x40, 0x4f, 0x59, 0x1f,
	0x55, 0x53, 0x4e, 0x8f, 0xde, 0x86, 0x02, 0xfb, 0x21, 0x1c, 0x9e, 0xd7, 0x0f, 0xfb, 0xf2, 0x94,
	0x8f, 0x37, 0x4e, 0x47, 0xa7, 0x18, 0x71, 0xd5, 0x10, 0xce, 0xf6, 0x97, 0xbf, 0xaa, 0xb3, 0xfd,
	0xd5, 0x49, 0xce, 0xb6, 0xb2, 0x06, 0x79, 0xbe, 0x86, 0x03, 0xe6, 0x77, 0x43, 0xf7, 0xcc, 0x7d,
	0x2c, 0x65, 0xd0, 0x34, 0x14, 0xaa, 0xb6, 0xc6, 0x5b, 0x13, 0xca, 0x3f, 0x4c, 0x42, 0x8e, 0xad,
	0xc2, 0x6f, 0x94, 0xdf, 0x59, 0x81, 0x29, 0xcd, 0x30, 0x5c, 0x4c, 0x88, 0xef, 0x55, 0x04, 0x4d,
	0x74, 0x2d, 0x54, 0xc8, 0x06, 0x53, 0xc8, 0xca, 0x80, 0x4a, 0x25, 0x95, 0xd0, 0x84, 0x79, 0xe1,
	0x2a, 0x0e, 0x0d, 0xd4, 0xe3, 0x13, 0x1a, 0x28, 0xa4, 0x27, 0x91, 0xc9, 0xf3, 0xef, 0xde, 0xff,
	0x64, 0x01, 0xdd, 0x73, 0x9b, 0x9a, 0x6d, 0x7e, 0xc1, 0x5e, 0x14, 0xef, 0xe3, 0x76, 0x1d, 0x9f,
	0x5e, 0x47, 0xf1, 0xf7, 0x20, 0xeb, 0x3a, 0x16, 0xf6, 0x6d, 0xc5, 0x2b, 0xe2, 0xd2, 0x0e, 0xce,
	0x72, 0x55, 0x75, 0x2c, 0xac, 0x32, 0x02, 0xb4, 0x05, 0xd9, 0x2e, 0xc1, 0xe1, 0x8d, 0x2b, 0x89,
	0x94, 0xbb, 0x04, 0xbb, 0x9b, 0x17, 0x8e, 0xfa, 0x72, 0x65, 0xe0, 0x28, 0xd2, 0x2e, 0x7a, 0x10,
	0x19, 0x31, 0xda, 0x82, 0x29, 0xfa, 0x5f, 0xb0, 0x11, 0xaf, 0x1d, 0xf6, 0xe5, 0x3c, 0x47, 0x1a,
	0x77, 0x04, 0xf3, 0x94, 0x94, 0x39, 0x59, 0xd3, 0x8e, 0x20, 0x6a, 0x60, 0x27, 0x2a, 0xc3, 0xe6,
	0xb2, 0xf9, 0xa3, 0xa3, 0xbe, 0xbc, 0x32, 0x20, 0x99, 0x88, 0x42, 0x25, 0x8c, 0x31, 0x45, 0x9f,
	0xc0, 0xac, 0xd8, 0x16, 0xcc, 0xc6, 0xf5, 0xc3, 0xbe, 0x3c, 0x13, 0x27, 0x1e, 0x27, 0xf9, 0x8c,
	0xc8, 0xaa, 0x6a, 0x28, 0x6f, 0x40, 0x96, 0xae, 0x2c, 0x2a, 0x43, 0x71, 0xd7, 0x36, 0x70, 0xc3,
	0xb4, 0xb1, 0x21, 0x9d, 0x41, 0x45, 0xc8, 0xdd, 0x3b, 0xb0, 0x99, 0x03, 0x07, 0x90, 0xe7, 0x5b,
	0x20, 0x4d, 0x28, 0xff, 0x5d, 0x00, 0x78, 0x80, 0xb5, 0xf6, 0x29, 0xd7, 0xbc, 0xb5, 0x98, 0xe6,
	0xc5, 0xac, 0x7a, 0x34, 0xbb, 0x5f, 0x4f, 0x8d, 0xdb, 0x82, 0xac, 0x87, 0xb5, 0x76, 0xa0, 0x69,
	0x52, 0x52, 0xf6, 0x21, 0x92, 0xd0, 0x2e, 0x26, 0x09, 0x25, 0xa6, 0x92, 0xd0, 0xff, 0x82, 0x26,
	0x31, 0x49, 0x38, 0xd2, 0x58, 0x49, 0x28, 0x69, 0xd5, 0x40, 0xef, 0xc0, 0x94, 0xee, 0x74, 0x3b,
	0xd4, 0xc5, 0xf2, 0xdd, 0xb7, 0x98, 0x67, 0xb9, 0xc5, 0xfa, 0x46, 0x3d, 0x9d, 0x7d, 0x6a, 0xf4,
	0x10, 0xa6, 0x35, 0xbd, 0x65, 0xe2, 0x7d, 0xdc, 0xc6, 0xb6, 0x17, 0x3a, 0x6c, 0x4b, 0x31, 0x5b,
	0x1d, 0x21, 0x8c, 0x60, 0x19, 0xe3, 0x83, 0x4c, 0x58, 0x24, 0xd4, 0x0b, 0x38, 0x68, 0x39, 0xe4,
	0xa0, 0xe5, 0xd4, 0x34, 0xcf, 0xc3, 0xed, 0x8e, 0x47, 0x2a, 0xcf, 0xf8, 0x00, 0xe7, 0xc5, 0x01,
	0x3e, 0xe4, 0x48, 0x1b, 0x1c, 0x67, 0xc4, 0x18, 0xf3, 0x94, 0x67, 0x1c, 0x9b, 0xa0, 0x47, 0x70,
	0xce, 0xc5, 0x3a, 0x36, 0xf7, 0xb1, 0x31, 0x38, 0xdc, 0x37, 0x27, 0x19, 0x6e, 0x29, 0xe0, 0x9b,
	0x1c, 0xf2, 0xdd, 0xc0, 0xd9, 0xfc, 0x96, 0xb3, 0x3f, 0x27, 0xb2, 0xaf, 0xda, 0xfb, 0xd8, 0xf6,
	0x1c, 0xb7, 0x57, 0xf5, 0x70, 0x7b, 0x04, 0x77, 0xce, 0x02, 0x39, 0xb0, 0x18, 0x5d, 0x7a, 0xfb,
	0x9a, 0x65, 0x1a, 0x3c, 0x62, 0x55, 0xf9, 0x67, 0xce, 0x5b, 0x4e, 0xbd, 0xf6, 0x1e, 0x86, 0x88,
	0x23, 0x46, 0x58, 0xd0, 0x07, 0xd1, 0xc9, 0x73, 0x5a, 0x9d, 0x5f, 0x02, 0x64, 0xe9, 0x29, 0x39,
	0xb5, 0xf6, 0x66, 0x0b, 0xc0, 0xc0, 0x16, 0xf6, 0x99, 0x64, 0x9f, 0x87, 0x89, 0x4f, 0xb7, 0xe1,
	0xa1, 0xf3, 0x50, 0xa0, 0x36, 0x40, 0xf0, 0x7e, 0xc2, 0x36, 0x5a, 0x80, 0x1c, 0x6e, 0x6b, 0xa6,
	0xe5, 0xfb, 0x3f, 0xbc, 0x81, 0xd6, 0x61, 0xba, 0xe9, 0x6a, 0xfb, 0x9a, 0xa7, 0xb9, 0x2c, 0x36,
	0xc2, 0x62, 0x6e, 0x9b, 0xb3, 0x87, 0x7d, 0xb9, 0xf4, 0x8e, 0x0f, 0xdf, 0x55, 0xef, 0xaa, 0xa5,
	0x00, 0x69, 0xd7, 0xb5, 0xd0, 0x1a, 0x94, 0x0e, 0x70, 0x9d, 0x98, 0x1e, 0x0f, 0xa7, 0x34, 0x19,
	0xc9, 0xcc, 0x61, 0x5f, 0x86, 0x0f, 0x39, 0x98, 0x52, 0x80, 0x8f, 0x42, 0x09, 0xa2, 0xd0, 0x5d,
	0x2b, 0x16, 0xba, 0xbb, 0x0b, 0x65, 0x47, 0xeb, 0x7a, 0xad, 0x1a, 0xe9, 0xd6, 0x3f, 0xc3, 0xba,
	0xc7, 0x23, 0x7b, 0x9b, 0x97, 0x0e, 0xfb, 0xf2, 0xf4, 0xbd, 0x8d, 0xae, 0xd7, 0xda, 0xe1, 0xf0,
	0xa3, 0xbe, 0x3c, 0xcf, 0x37, 0xb0, 0x6b, 0x9b, 0x8f, 0xba, 0xd4, 0xe9, 0x62, 0x66, 0x66, 0x9a,
	0x51, 0xfb, 0x48, 0xe8, 0x12, 0xcc, 0xb2, 0x95, 0xa0, 0xf7, 0x9f, 0xcb, 0x9f, 0xb3, 0x9f, 0xb1,
	0xe1, 0x66, 0x02, 0xb0, 0xca, 0x5f, 0xa8, 0x5b, 0x02, 0xa2, 0xef, 0xfa, 0xed, 0x31, 0x2b, 0x1f,
	0x3b, 0x7e, 0xdb, 0x3e, 0x8a, 0xef, 0xfc, 0x85, 0x4c, 0x7c, 0x7f, 0xec, 0x53, 0x90, 0x98, 0x7d,
	0x6c, 0x33, 0x0d, 0x24, 0x2d, 0xb3, 0x13, 0x7a, 0x80, 0x67, 0xd3, 0x2f, 0x8b, 0x11, 0x27, 0x60,
	0xd6, 0x0b, 0xb1, 0x18, 0x27, 0xf4, 0x11, 0x94, 0x6d, 0xc7, 0x33, 0x1b, 0xa6, 0xee, 0x9f, 0xb2,
	0x27, 0x9c, 0x75, 0xcc, 0x6b, 0xf8, 0x40, 0xc0, 0x18, 0xf5, 0x30, 0x8d, 0x71, 0x42, 0x1e, 0x54,
	0x62, 0xae, 0x82, 0x38, 0x01, 0x3f, 0xf6, 0xb3, 0x3c, 0xda, 0xcf, 0x1a, 0x65, 0x8a, 0x9c, 0x01,
	0x6c, 0x3e, 0xa1, 0x3f, 0x01, 0xc4, 0x7d, 0xd4, 0x9a, 0xb0, 0x6a, 0xfc, 0x66, 0x19, 0xbe, 0x60,
	0x3f, 0x39, 0xea, 0xcb, 0xeb, 0x83, 0x4f, 0x39, 0xc6, 0x27, 0x42, 0xab, 0x6e, 0xdf, 0x4a, 0x06,
	0xa1, 0xb4, 0x04, 0x0a, 0xb5, 0xf3, 0x83, 0xc3, 0xd3, 0xbb, 0xed, 0x6b, 0x6e, 0x29, 0x6e, 0x1c,
	0xf6, 0x65, 0x34, 0xc8, 0x78, 0xdc, 0x3d, 0x87, 0x92, 0x03, 0x55, 0x0d, 0x64, 0x41, 0xd9, 0x1f,
	0xca, 0x8f, 0xa9, 0x3c, 0x1d, 0x1e, 0x53, 0x59, 0x3f, 0xea, 0xcb, 0xab, 0x43, 0x26, 0x18, 0x84,
	0x4b, 0x6e, 0x0d, 0x5e, 0x60, 0x51, 0x37, 0x55, 0xc3, 0xd8, 0x68, 0x74, 0x4e, 0xcf, 0x04, 0xcf,
	0x2f, 0xce, 0x6b, 0xac, 0xe7, 0x27, 0xf2, 0xae, 0x1a, 0xca, 0x3a, 0x14, 0xa8, 0x51, 0x65, 0x91,
	0x8b, 0x57, 0xe3, 0x91, 0x8b, 0x01, 0xff, 0x26, 0x08, 0x57, 0xfc, 0x6b, 0x0e, 0xa6, 0x45, 0x9d,
	0xf9, 0x61, 0x5b, 0xe4, 0xb4, 0xb7, 0x68, 0xd2, 0xe6, 0xe2, 0x63, 0xd8, 0xdc, 0xc8, 0x84, 0x36,
	0x62, 0x26, 0x34, 0xc5, 0x96, 0x35, 0x9f, 0xdb, 0x96, 0xc9, 0x50, 0x22, 0x8e, 0xe5, 0x04, 0x0a,
	0xdb, 0x62, 0xd1, 0x73, 0xa0, 0x20, 0x5f, 0xcb, 0x36, 0x20, 0x47, 0xcf, 0x4d, 0x68, 0xe1, 0x06,
	0x5d, 0xca, 0x11, 0xfe, 0x03, 0xa3, 0x1c, 0xed, 0xfe, 0x3c, 0xf9, 0x95, 0xb8, 0x3f, 0x3b, 0x30,
	0xe5, 0x1b, 0xb7, 0x93, 0x1b, 0xb6, 0x80, 0x93, 0xb2, 0x09, 0x92, 0x48, 0xc8, 0x8e, 0xc6, 0x6a,
	0xfc, 0x68, 0x0c, 0x7d, 0xda, 0x05, 0x47, 0xe4, 0xe7, 0x39, 0xc8, 0xfb, 0x2b, 0xfb, 0x9b, 0x14,
	0x63, 0xb9, 0x1e, 0x46, 0x52, 0x30, 0x53, 0xc1, 0x73, 0x83, 0x16, 0x2f, 0x19, 0x4a, 0xf9, 0x03,
	0x80, 0x7d, 0x93, 0x98, 0x75, 0xd3, 0x32, 0xbd, 0x9e, 0x1f, 0x80, 0xb9, 0x98, 0x42, 0xf6, 0x30,
	0x44, 0x52, 0x05, 0x02, 0x74, 0x11, 0xc0, 0x24, 0x35, 0x03, 0x37, 0xb4, 0xae, 0x15, 0x64, 0x7d,
	0x8a, 0x26, 0xd9, 0xe6, 0x00, 0xf4, 0x33, 0x28, 0x8b, 0xf7, 0xd1, 0xf7, 0x52, 0xdf, 0x38, 0x07,
	0xf1, 0x45, 0xf3, 0xe4, 0x24, 0x2f, 0x1a, 0xe5, 0x46, 0x18, 0xd9, 0x99, 0x83, 0xb2, 0x1f, 0xd9,
	0xe1, 0x00, 0xe9, 0x0c, 0x2a, 0xc1, 0xd4, 0x8e, 0xa7, 0xb9, 0x1e, 0x36, 0xa4, 0x0c, 0x6f, 0x38,
	0x9d, 0x0e, 0x36, 0xa4, 0x09, 0xe5, 0x5d, 0x80, 0x68, 0x2d, 0xd0, 0x22, 0xcc, 0xf9, 0xa4, 0x11,
	0x90, 0x93, 0xdf, 0x77, 0xcd, 0x7d, 0xcd, 0xf3, 0xe3, 0x43, 0xbb, 0xb6, 0x65, 0x12, 0xca, 0x6c,
	0x82, 0xfa, 0xcc, 0xf7, 0xbb, 0x75, 0xcb, 0xd4, 0xa5, 0x49, 0xe5, 0x27, 0x00, 0x7c, 0x79, 0x99,
	0x12, 0x5f, 0x8e, 0x2b, 0x71, 0xca, 0x75, 0x15, 0xa8, 0xef, 0x7f, 0x15, 0x21, 0x4b, 0x57, 0xed,
	0x87, 0x6d, 0xd9, 0xe3, 0xba, 0x67, 0x24, 0x75, 0x2f, 0xc5, 0x30, 0xe3, 0xe7, 0x36, 0xcc, 0x08,
	0xb2, 0xba, 0x46, 0x5a, 0xec, 0x60, 0x4c, 0xaa, 0xec, 0x37, 0xf5, 0xe3, 0x89, 0xee, 0xb8, 0x98,
	0xa9, 0xfb, 0xa4, 0xca, 0x1b, 0xd4, 0x84, 0x37, 0x1d, 0xcb, 0xa8, 0xb5, 0xb1, 0xa1, 0x59, 0x84,
	0x99, 0xf0, 0x49, 0x15, 0x28, 0xe8, 0x7d, 0x06, 0x41, 0xaf, 0x40, 0x99, 0x98, 0xd6, 0x3e, 0x76,
	0x03, 0x14, 0x93, 0xa1, 0x4c, 0x73, 0x60, 0x84, 0x54, 0x77, 0x1d, 0xfb, 0x0b, 0x1c, 0x20, 0x7d,
	0xc6, 0x91, 0x38, 0xd0, 0x47, 0xba, 0x04, 0xb3, 0x76, 0xbd, 0x16, 0x7b, 0x8e, 0xef, 0x31, 0xb4,
	0x19, 0xbb, 0xbe, 0x21, 0x3e, 0xae, 0xa3, 0xb4, 0xd2, 0xe3, 0x93, 0xa7, 0x95, 0x88, 0x98, 0x56,
	0xf2, 0x63, 0x23, 0xbb, 0x89, 0xb4, 0xd2, 0xed, 0xe1, 0xbe, 0xcd, 0x2d, 0xf1, 0xe5, 0x70, 0xd3,
	0x34, 0x3e, 0xe7, 0x8e, 0xa0, 0xcf, 0x52, 0x3c, 0xe3, 0x62, 0x02, 0xea, 0xff, 0x24, 0x76, 0xf7,
	0x67, 0x99, 0xa1, 0xc1, 0xbb, 0x4f, 0x52, 0x83, 0x77, 0x2f, 0x68, 0x9a, 0x89, 0x30, 0x1f, 0xea,
	0xc2, 0x52, 0xf4, 0xc2, 0x7f, 0xf1, 0xf9, 0xb1, 0xb3, 0x7a, 0x1a, 0x01, 0xd5, 0x92, 0xf0, 0x96,
	0x7e, 0xf6, 0x7d, 0xdf, 0x4f, 0x01, 0x87, 0x81, 0x38, 0xd1, 0x37, 0x2f, 0x26, 0x4e, 0x44, 0x1d,
	0x61, 0x2a, 0xc8, 0x58, 0x47, 0x98, 0x22, 0x05, 0x66, 0xf2, 0x9f, 0xa6, 0x60, 0x26, 0xee, 0x92,
	0x9c, 0xe6, 0x7a, 0x0d, 0xd2, 0xd5, 0x75, 0x4c, 0x88, 0x6f, 0xe8, 0x82, 0x26, 0xfa, 0xa3, 0xb0,
	0x5a, 0x67, 0x68, 0xdc, 0xf3, 0xea, 0x51, 0x5f, 0x7e, 0x2d, 0x55, 0x65, 0xc5, 0x37, 0x0f, 0x63,
	0xc2, 0x0e, 0xbc, 0x5f, 0xef, 0x53, 0x85, 0x22, 0xff, 0x95, 0xcc, 0x6f, 0x07, 0xa8, 0x63, 0x73,
	0x60, 0x9c, 0xbc, 0x6a, 0x20, 0x0c, 0x25, 0x9f, 0xd5, 0xe8, 0xb8, 0xe8, 0xf5, 0xa3, 0xbe, 0x7c,
	0xf5, 0x78, 0x92, 0x06, 0xc1, 0x52, 0xd0, 0xc2, 0x26, 0x7a, 0x08, 0x33, 0xc2, 0x30, 0xc2, 0x31,
	0x5e, 0x3b, 0xec, 0xcb, 0xd3, 0x22, 0xdd, 0x38, 0xd1, 0xa7, 0x23, 0xae, 0x5c, 0x7c, 0x4f, 0x73,
	0x9b, 0xd8, 0xab, 0xb1, 0x00, 0xf3, 0xd7, 0xc3, 0x16, 0xfa, 0x58, 0xe2, 0x3f, 0x60, 0x9c, 0x82,
	0xa8, 0x33, 0x78, 0x61, 0x93, 0x8a, 0x2f, 0x0c, 0x43, 0xc5, 0x7f, 0x2a, 0x88, 0x2f, 0xd2, 0x8d,
	0x15, 0x3f, 0xe2, 0x1a, 0x13, 0x9f, 0xad, 0xfe, 0xb3, 0x13, 0xad, 0x3e, 0x17, 0x23, 0x5c, 0x7d,
	0x2f, 0x6c, 0x0a, 0xe2, 0x07, 0xab, 0xff, 0xcd, 0x80, 0xf8, 0xc7, 0x5c, 0xfd, 0x88, 0x6b, 0xd5,
	0x50, 0xfe, 0xba, 0x00, 0xf3, 0x29, 0xf1, 0xcc, 0x53, 0x7b, 0x96, 0xdf, 0x4a, 0x24, 0xe0, 0x5f,
	0x1d, 0x13, 0xb8, 0x4d, 0xba, 0xec, 0x3f, 0x0e, 0xb5, 0x5c, 0x77, 0xda, 0xd4, 0x3a, 0xfa, 0x01,
	0xc5, 0x32, 0x87, 0x6e, 0x71, 0x20, 0xba, 0x02, 0x73, 0xba, 0xe3, 0xba, 0x58, 0xf7, 0x04, 0x4c,
	0xfe, 0x76, 0x95, 0xc2, 0x8e, 0x00, 0xf9, 0xc7, 0x30, 0xd3, 0xd1, 0x08, 0xe9, 0xb4, 0x5c, 0x8d,
	0x60, 0xba, 0x68, 0x3c, 0xa8, 0xa8, 0x96, 0x23, 0xe8, 0x7b, 0xb8, 0x87, 0x96, 0x01, 0x22, 0x80,
	0x1f, 0x4b, 0x14, 0x20, 0xe8, 0x2f, 0x32, 0x70, 0x36, 0xfd, 0x0a, 0x0b, 0xac, 0xd3, 0x31, 0x6e,
	0x30, 0x66, 0xae, 0x86, 0x97, 0x65, 0x89, 0xb8, 0x54, 0x05, 0x17, 0x53, 0xaf, 0x35, 0x74, 0x00,
	0xe7, 0xd2, 0x25, 0x11, 0xac, 0xd9, 0xcd, 0xc3, 0xbe, 0xbc, 0x34, 0x84, 0xf1, 0x38, 0x1d, 0x5d,
	0x4a, 0x1d, 0xb6, 0x6a, 0xa0, 0x6a, 0x68, 0x90, 0xbf, 0x1c, 0x66, 0x27, 0xd2, 0x5d, 0xae, 0x31,
	0x16, 0xf8, 0xab, 0x13, 0x59, 0xe0, 0x20, 0x25, 0xf5, 0xf5, 0x0b, 0x4a, 0x49, 0x3d, 0xfd, 0xbe,
	0x29, 0x29, 0x45, 0x4d, 0xcf, 0xa8, 0xcf, 0x00, 0x7c, 0x80, 0xb1, 0xa1, 0xb2, 0xd2, 0x50, 0xfe,
	0x6a, 0xda, 0xd0, 0x75, 0xdc, 0xe1, 0xaf, 0xa6, 0x12, 0x4c, 0xa9, 0xb8, 0xd1, 0x25, 0xd8, 0x90,
	0x26, 0x91, 0x04, 0xd4, 0x96, 0x3b, 0x61, 0x77, 0x56, 0xf9, 0xdb, 0x22, 0x2c, 0xa6, 0xee, 0xe3,
	0xa9, 0x35, 0x12, 0x7f, 0x98, 0x30, 0x12, 0x97, 0xc7, 0x9e, 0x9b, 0xa4, 0x99, 0xd8, 0x80, 0xa2,
	0x6e, 0x39, 0x84, 0x4b, 0x81, 0x9f, 0x43, 0x8a, 0x02, 0x27, 0x63, 0x33, 0xe1, 0x4a, 0xf3, 0xf8,
	0x24, 0x4a, 0x63, 0x44, 0x4a, 0xe3, 0x1f, 0xbb, 0x77, 0x63, 0x4a, 0xf3, 0x66, 0xaa, 0xd2, 0x8c,
	0x74, 0xa3, 0xc3, 0xa3, 0x17, 0x25, 0x3a, 0x3b, 0x20, 0x25, 0x3b, 0x53, 0x0b, 0x82, 0x92, 0x85,
	0x94, 0x97, 0x8e, 0xfa, 0xf2, 0x2b, 0x43, 0x5e, 0x3f, 0xb1, 0x4a, 0xd0, 0xd9, 0x44, 0x5d, 0x25,
	0xfa, 0xf3, 0x0c, 0xcc, 0x27, 0x87, 0x14, 0xce, 0x29, 0x7d, 0x1a, 0xcd, 0x0d, 0xf0, 0x39, 0xf1,
	0x7c, 0xe7, 0x12, 0x62, 0x54, 0x0d, 0xf4, 0x36, 0xe4, 0xea, 0xdd, 0xde, 0x28, 0xbf, 0x24, 0xbd,
	0x22, 0x6b, 0x93, 0x12, 0xb1, 0x8a, 0x2c, 0x46, 0x8e, 0xde, 0x86, 0x02, 0xfb, 0x21, 0x1c, 0x6f,
	0x56, 0x91, 0xe5, 0xe3, 0x8d, 0xad, 0xc8, 0x62, 0xc4, 0xdc, 0x00, 0x32, 0x0d, 0x72, 0x53, 0x3d,
	0x8d, 0x11, 0x06, 0x70, 0x8b, 0x51, 0x31, 0x03, 0xc8, 0x19, 0xa0, 0xdb, 0xbe, 0x0e, 0xbb, 0x82,
	0x37, 0x71, 0x89, 0x1a, 0xc0, 0x00, 0xf5, 0xa8, 0x2f, 0x2f, 0x71, 0xa1, 0x52, 0x8c, 0x1f, 0x27,
	0xad, 0x1a, 0xe8, 0x53, 0x28, 0x89, 0x09, 0xd3, 0x6f, 0x4f, 0x9c, 0x30, 0x15, 0xd9, 0x29, 0x57,
	0xc7, 0x97, 0x08, 0x01, 0xe4, 0x99, 0xc4, 0x86, 0x34, 0xa1, 0xfc, 0xcd, 0x24, 0x94, 0x63, 0xa9,
	0xdf, 0x53, 0x6b, 0xa3, 0xd6, 0x21, 0x4b, 0x1f, 0x5a, 0xbe, 0x85, 0x5a, 0x1e, 0x9a, 0xdb, 0x5e,
	0xa5, 0x7f, 0x54, 0x86, 0x8b, 0xee, 0x42, 0xce, 0x39, 0xb0, 0xa3, 0x2a, 0x8d, 0x61, 0x4f, 0xcd,
	0x74, 0x95, 0x65, 0x89, 0x67, 0xa6, 0xb2, 0x8c, 0x09, 0x55, 0x59, 0xf6, 0x23, 0x59, 0x44, 0xe8,
	0xe3, 0x8d, 0x55, 0x59, 0x46, 0x5c, 0x35, 0x94, 0x79, 0xc8, 0xb2, 0x9d, 0x10, 0x37, 0x50, 0xf9,
	0xbb, 0x49, 0x98, 0x16, 0x33, 0x7c, 0xa7, 0x76, 0x9f, 0x96, 0x60, 0xca, 0x24, 0x35, 0x17, 0x6b,
	0x86, 0xff, 0x78, 0xcc, 0x9b, 0x44, 0xc5, 0x9a, 0x81, 0x5e, 0xa2, 0xc7, 0xcb, 0xd4, 0xf7, 0xa2,
	0x24, 0x08, 0x3d, 0x34, 0xa6, 0xbe, 0xb7, 0xeb, 0x5a, 0x48, 0x82, 0xc9, 0x36, 0x69, 0xfa, 0x1e,
	0x23, 0xfd, 0x89, 0x10, 0x64, 0x35, 0xb7, 0x49, 0x7c, 0xd7, 0x90, 0xfd, 0xfe, 0xf5, 0x29, 0xba,
	0x51, 0xfe, 0x32, 0x0b, 0x79, 0x1e, 0xfd, 0x3d, 0xb5, 0x1b, 0x75, 0x05, 0xb2, 0x2d, 0x8d, 0xb4,
	0x78, 0x4c, 0x7f, 0x73, 0x69, 0x58, 0xd6, 0x9d, 0x21, 0xa1, 0x05, 0xc8, 0xed, 0x6b, 0x56, 0x17,
	0xb3, 0x8d, 0xcb, 0xa9, 0xbc, 0x81, 0xae, 0xc1, 0x42, 0x5b, 0xfb, 0x5c, 0xa8, 0x0f, 0xa9, 0xe9,
	0x4e, 0xd7, 0x77, 0xfc, 0x73, 0x2a, 0x6a, 0x6b, 0x9f, 0x47, 0x06, 0x6e, 0x8b, 0xf6, 0xbc, 0xd8,
	0x20, 0xe1, 0xcd, 0x94, 0x20, 0xe1, 0x85, 0x44, 0x90, 0x70, 0x7a, 0x48, 0xb1, 0xf9, 0x47, 0x71,
	0x2b, 0xed, 0x67, 0x8c, 0x2e, 0x0c, 0x46, 0xf7, 0x9f, 0xdf, 0x44, 0xff, 0x55, 0x0e, 0xa4, 0x24,
	0xed, 0x69, 0x8e, 0x05, 0x05, 0xcf, 0x39, 0xff, 0xdb, 0x1d, 0xbf, 0x29, 0x3c, 0x3d, 0x1e, 0xbf,
	0xd0, 0xa7, 0xc7, 0x93, 0x17, 0xf2, 0xf4, 0xf8, 0xff, 0xaf, 0x86, 0x7b, 0x0f, 0xf2, 0x3c, 0xfb,
	0x13, 0xb8, 0x4a, 0x69, 0xa9, 0xa3, 0x21, 0xbe, 0x09, 0xeb, 0xe4, 0xbe, 0x09, 0x37, 0x32, 0x55,
	0x28, 0xf2, 0x5f, 0x82, 0xbf, 0xc4, 0x56, 0x28, 0x40, 0x1d, 0xbb, 0x42, 0x9c, 0xbc, 0x6a, 0x28,
	0x7f, 0x3f, 0x0d, 0x25, 0x21, 0x28, 0x7a, 0x6a, 0x35, 0xf3, 0x1a, 0x64, 0xbd, 0x5e, 0x27, 0x28,
	0xd9, 0xbc, 0x30, 0x24, 0xe6, 0xbb, 0xfa, 0xa0, 0xd7, 0xc1, 0x2a, 0xc3, 0xf4, 0x3f, 0x1a, 0x6b,
	0x5a, 0x4e, 0x5d, 0xe3, 0x37, 0x10, 0xfb, 0x68, 0xec, 0x1d, 0xd6, 0x16, 0x15, 0xbd, 0x11, 0x57,
	0xf4, 0xf3, 0x50, 0xd0, 0xdc, 0x66, 0x97, 0x75, 0xf1, 0xdb, 0x28, 0x6c, 0xff, 0xf6, 0x10, 0x8c,
	0x39, 0x04, 0x7f, 0x9a, 0x81, 0x85, 0xb4, 0x42, 0xc2, 0xe0, 0x4c, 0x8c, 0x75, 0x8b, 0xaf, 0x1c,
	0xf5, 0xe5, 0x4b, 0xc3, 0xe3, 0x33, 0x11, 0x26, 0x15, 0x7c, 0x3e, 0xa5, 0xb4, 0x10, 0x3d, 0x12,
	0x13, 0x1d, 0xc2, 0x55, 0x15, 0x1d, 0xa4, 0x9f, 0x1e, 0xf6, 0xe5, 0xc5, 0x54, 0x96, 0xe3, 0xa6,
	0xb9, 0x98, 0x32, 0x60, 0xd5, 0x50, 0x9e, 0xe5, 0x20, 0x4b, 0xf5, 0x2e, 0x59, 0xcd, 0x38, 0x07,
	0xe5, 0xcd, 0x6e, 0xef, 0x7a, 0x38, 0x94, 0x94, 0x41, 0x08, 0x66, 0x36, 0xbb, 0xbd, 0x1b, 0xd1,
	0x17, 0x74, 0xd2, 0x04, 0x9a, 0x87, 0x59, 0x8a, 0x76, 0x4d, 0x00, 0x4e, 0xfa, 0xc0, 0x75, 0x11,
	0x98, 0xf5, 0x81, 0x37, 0x44, 0x60, 0x0e, 0x9d, 0x05, 0xe4, 0x4b, 0x83, 0x85, 0xa1, 0x00, 0x2d,
	0xc1, 0x7c, 0x00, 0x17, 0xc7, 0x2b, 0xa1, 0x0a, 0x2c, 0x84, 0x04, 0x22, 0xab, 0x69, 0xb1, 0x27,
	0x36, 0x72, 0x59, 0xec, 0x89, 0x0d, 0x3f, 0x43, 0x65, 0x8a, 0x86, 0x67, 0x46, 0x47, 0x5a, 0x40,
	0x0b, 0x20, 0x45, 0x63, 0xf3, 0x9c, 0xb8, 0xb4, 0x88, 0x16, 0x61, 0x4e, 0x18, 0xd8, 0x07, 0x9f,
	0x15, 0xc1, 0xeb, 0x21, 0x78, 0x49, 0x04, 0xdf, 0x08, 0xc1, 0x95, 0xd8, 0x74, 0xaf, 0x85, 0xf0,
	0x73, 0x74, 0x48, 0x7e, 0x72, 0x84, 0x45, 0x58, 0xa6, 0x4c, 0x38, 0x74, 0x5d, 0x10, 0x5a, 0x8e,
	0xc0, 0xe2, 0xca, 0xac, 0x50, 0xde, 0x3e, 0x0f, 0x71, 0x8e, 0x2f, 0x53, 0xf8, 0x6d, 0xcd, 0xb5,
	0x7a, 0x1b, 0x86, 0xd3, 0xf1, 0xb0, 0xfb, 0xc0, 0xe9, 0x5c, 0xbf, 0x76, 0x4d, 0xba, 0x4c, 0x97,
	0x78, 0x10, 0x7e, 0x4d, 0x7a, 0x0d, 0x4d, 0x43, 0xe1, 0x9e, 0x65, 0x5c, 0xff, 0x08, 0x6b, 0xae,
	0xb4, 0x4e, 0x45, 0xdb, 0xc1, 0xb6, 0x71, 0xfd, 0x7e, 0xd7, 0xb2, 0x54, 0xfc, 0xa8, 0x8b, 0x89,
	0x27, 0x7d, 0x4c, 0x65, 0xa0, 0xd0, 0x75, 0x01, 0x4a, 0xa4, 0x4f, 0x02, 0xf0, 0x8d, 0x18, 0xf8,
	0x53, 0x2a, 0x02, 0xe3, 0x71, 0x8d, 0xc2, 0xdd, 0x00, 0xfe, 0xc7, 0xa8, 0x08, 0xb9, 0x1d, 0x4f,
	0x6b, 0x34, 0x24, 0x03, 0xcd, 0x42, 0x69, 0xcb, 0xb1, 0x3d, 0xd7, 0xac, 0x77, 0x3d, 0xc7, 0x95,
	0x98, 0x3a, 0x6e, 0x76, 0x9b, 0x77, 0xba, 0xb6, 0x87, 0x5d, 0xa9, 0x41, 0x9b, 0xef, 0x3b, 0x06,
	0x76, 0x35, 0xda, 0xdb, 0xa4, 0x1b, 0x77, 0x47, 0xd3, 0xf7, 0x1e, 0xb4, 0xf0, 0x7d, 0x4b, 0xf3,
	0x1a, 0x8e, 0xdb, 0x96, 0x5a, 0x4a, 0xb6, 0xf0, 0xba, 0xf4, 0xba, 0xf2, 0xb4, 0x08, 0xd9, 0xed,
	0x6e, 0xbb, 0x83, 0x6e, 0x25, 0x32, 0x6e, 0xa3, 0x13, 0x6e, 0x89, 0xf2, 0xeb, 0x1b, 0x00, 0xc2,
	0x97, 0xa7, 0x13, 0xa3, 0xbe, 0x82, 0x16, 0x10, 0xd1, 0x1d, 0x98, 0x8b, 0x0e, 0x70, 0xf0, 0x91,
	0xf6, 0xe4, 0xd8, 0x6f, 0xb4, 0x55, 0x49, 0x8f, 0x03, 0x08, 0xfa, 0x20, 0xfd, 0x53, 0x9e, 0xec,
	0x31, 0xbe, 0xe4, 0x49, 0xfb, 0x5e, 0x07, 0x7d, 0x3c, 0x3c, 0x87, 0x9a, 0x3b, 0x66, 0x0a, 0x75,
	0x68, 0xa2, 0xf4, 0xc1, 0xb0, 0x0a, 0xec, 0xfc, 0xb1, 0xe2, 0x09, 0xe9, 0x65, 0xd6, 0xe8, 0x8d,
	0xa8, 0xa0, 0x65, 0x6a, 0x58, 0x3d, 0x4b, 0x54, 0x87, 0xff, 0x1e, 0x20, 0xdf, 0xeb, 0x10, 0x05,
	0x28, 0x8c, 0x77, 0x95, 0xd5, 0x39, 0x3d, 0x01, 0x21, 0xe8, 0x35, 0xc8, 0xb3, 0xcf, 0xe8, 0x48,
	0xa5, 0xc8, 0x18, 0x0c, 0x7e, 0xcc, 0xa7, 0xfa, 0x08, 0x68, 0x13, 0x66, 0xcd, 0xe0, 0x4d, 0x5f,
	0xe3, 0xd9, 0x57, 0x18, 0x53, 0xd2, 0xae, 0xce, 0x98, 0x62, 0x93, 0xa0, 0xb7, 0x92, 0x35, 0xb5,
	0xa5, 0xd1, 0x25, 0xb5, 0xc9, 0xc2, 0xd9, 0xb7, 0x92, 0xd5, 0x44, 0xd3, 0x63, 0xaa, 0xbd, 0x12,
	0xa5, 0x43, 0x3f, 0x83, 0x85, 0xb4, 0xc2, 0xdb, 0x4a, 0xf9, 0x38, 0xa5, 0x69, 0xea, 0x7c, 0x4a,
	0x65, 0x2d, 0xdd, 0x3c, 0xfe, 0x7e, 0x21, 0x95, 0x99, 0xa1, 0x55, 0x3b, 0x01, 0x0a, 0x3d, 0x36,
	0x83, 0x9f, 0x7b, 0xcf, 0x8e, 0xff, 0x0e, 0x75, 0xe0, 0x9b, 0x6e, 0xf4, 0x6a, 0x50, 0x0f, 0x28,
	0x0d, 0x4b, 0x81, 0xf3, 0xa2, 0xbf, 0xdf, 0x87, 0x69, 0xb1, 0x48, 0xba, 0x32, 0x37, 0x2a, 0xbf,
	0xaf, 0x96, 0x84, 0x2a, 0x68, 0x3a, 0x04, 0x7d, 0x59, 0x93, 0x0a, 0x1a, 0x56, 0x6e, 0xca, 0xba,
	0xd1, 0x6d, 0x90, 0x06, 0xca, 0x09, 0xe7, 0xc7, 0x55, 0x13, 0xaa, 0xb3, 0x07, 0xf1, 0x5a, 0x41,
	0xe5, 0xe7, 0x19, 0xc8, 0x56, 0xed, 0x86, 0x83, 0xde, 0x02, 0xf0, 0xb4, 0xba, 0x85, 0x6b, 0xae,
	0x73, 0x10, 0x58, 0x33, 0x39, 0xae, 0x64, 0x0d, 0x67, 0xf5, 0x01, 0x45, 0x51, 0x9d, 0x03, 0x72,
	0xdb, 0xf6, 0xdc, 0x9e, 0x5a, 0xf4, 0x82, 0xf6, 0xf9, 0x37, 0x61, 0x26, 0xde, 0x89, 0x24, 0x98,
	0xdc, 0xc3, 0x3d, 0xe6, 0x4f, 0x17, 0x55, 0xfa, 0x33, 0x7a, 0x3b, 0x53, 0x6f, 0xb9, 0xec, 0xbf,
	0x9d, 0x6f, 0x4e, 0xfc, 0x34, 0xf3, 0xfa, 0x1d, 0x98, 0x89, 0x97, 0x04, 0x0d, 0x0f, 0xea, 0x95,
	0xa1, 0xe8, 0x1b, 0x7f, 0x96, 0xa2, 0x98, 0x01, 0xd8, 0xb0, 0x1d, 0xbb, 0xd7, 0x36, 0xbf, 0xc0,
	0x86, 0x34, 0xb9, 0xb9, 0xfe, 0xf8, 0x70, 0x39, 0xf3, 0xed, 0xe1, 0x72, 0xe6, 0xdf, 0x0f, 0x97,
	0x33, 0xbf, 0xf8, 0x6e, 0xf9, 0xcc, 0xb7, 0xdf, 0x2d, 0x9f, 0xf9, 0x97, 0xef, 0x96, 0xcf, 0x7c,
	0x5c, 0x09, 0x26, 0x63, 0x69, 0xb6, 0xb1, 0xd6, 0x74, 0xd6, 0x3a, 0x7b, 0xcd, 0xb5, 0xce, 0x81,
	0x51, 0xaf, 0xe7, 0x99, 0xa7, 0xfd, 0x3b, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xc5, 0x04,
	0x41, 0x76, 0x45, 0x00, 0x00,
}

func (m *Challenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Challenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Challenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Flavors) > 0 {
		for iNdEx := len(m.Flavors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Flavors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Homepage) > 0 {
		i -= len(m.Homepage)
		copy(dAtA[i:], m.Homepage)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Homepage)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	if len(m.PreviewUrl) > 0 {
		i -= len(m.PreviewUrl)
		copy(dAtA[i:], m.PreviewUrl)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.PreviewUrl)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xda
	}
	if m.IsDraft {
		i--
		if m.IsDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd0
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintPwdb(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintPwdb(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeFlavor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeFlavor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeFlavor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SeasonChallenges) > 0 {
		for iNdEx := len(m.SeasonChallenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SeasonChallenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.ChallengeID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ChallengeID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Challenge != nil {
		{
			size, err := m.Challenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Driver != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Driver))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc8
	}
	if len(m.SourceURL) > 0 {
		i -= len(m.SourceURL)
		copy(dAtA[i:], m.SourceURL)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.SourceURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if m.IsLatest {
		i--
		if m.IsLatest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if m.IsDraft {
		i--
		if m.IsDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if len(m.Changelog) > 0 {
		i -= len(m.Changelog)
		copy(dAtA[i:], m.Changelog)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Changelog)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintPwdb(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintPwdb(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for iNdEx := len(m.Subscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.Instances) > 0 {
		for iNdEx := len(m.Instances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.SeasonID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.FlavorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.FlavorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Flavor != nil {
		{
			size, err := m.Flavor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.UpdatedAt != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintPwdb(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintPwdb(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeInstance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeInstance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeInstance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlavorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.FlavorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Flavor != nil {
		{
			size, err := m.Flavor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.AgentID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AgentID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Agent != nil {
		{
			size, err := m.Agent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Status != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err12 != nil {
			return 0, err12
		}
		i -= n12
		i = encodeVarintPwdb(dAtA, i, uint64(n12))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n13, err13 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err13 != nil {
			return 0, err13
		}
		i -= n13
		i = encodeVarintPwdb(dAtA, i, uint64(n13))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Agent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Agent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeInstances) > 0 {
		for iNdEx := len(m.ChallengeInstances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeInstances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.Status != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n14, err14 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err14 != nil {
			return 0, err14
		}
		i -= n14
		i = encodeVarintPwdb(dAtA, i, uint64(n14))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err15 != nil {
			return 0, err15
		}
		i -= n15
		i = encodeVarintPwdb(dAtA, i, uint64(n15))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrganizationMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrganizationID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.OrganizationID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Organization != nil {
		{
			size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.UserID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Role != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err18 != nil {
			return 0, err18
		}
		i -= n18
		i = encodeVarintPwdb(dAtA, i, uint64(n18))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n19, err19 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err19 != nil {
			return 0, err19
		}
		i -= n19
		i = encodeVarintPwdb(dAtA, i, uint64(n19))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeValidations) > 0 {
		for iNdEx := len(m.ChallengeValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xd
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xd
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ReceivedWhoswhoAttempts) > 0 {
		for iNdEx := len(m.ReceivedWhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReceivedWhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.SentWhoswhoAttempts) > 0 {
		for iNdEx := len(m.SentWhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SentWhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.Coupons) > 0 {
		for iNdEx := len(m.Coupons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coupons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.TeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.UserID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Role != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n22, err22 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err22 != nil {
			return 0, err22
		}
		i -= n22
		i = encodeVarintPwdb(dAtA, i, uint64(n22))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n23, err23 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err23 != nil {
			return 0, err23
		}
		i -= n23
		i = encodeVarintPwdb(dAtA, i, uint64(n23))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveSeasonID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ActiveSeasonID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf0
	}
	if m.ActiveSeason != nil {
		{
			size, err := m.ActiveSeason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xea
	}
	if m.ActiveTeamMemberID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ActiveTeamMemberID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe0
	}
	if m.ActiveTeamMember != nil {
		{
			size, err := m.ActiveTeamMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if len(m.OrganizationMemberships) > 0 {
		for iNdEx := len(m.OrganizationMemberships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrganizationMemberships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.TeamMemberships) > 0 {
		for iNdEx := len(m.TeamMemberships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamMemberships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.DeletionStatus != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.DeletionStatus))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd8
	}
	if len(m.DeletionReason) > 0 {
		i -= len(m.DeletionReason)
		copy(dAtA[i:], m.DeletionReason)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.DeletionReason)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	if len(m.OAuthSubject) > 0 {
		i -= len(m.OAuthSubject)
		copy(dAtA[i:], m.OAuthSubject)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.OAuthSubject)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if len(m.WebsiteURL) > 0 {
		i -= len(m.WebsiteURL)
		copy(dAtA[i:], m.WebsiteURL)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.WebsiteURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.GravatarURL) > 0 {
		i -= len(m.GravatarURL)
		copy(dAtA[i:], m.GravatarURL)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.GravatarURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.DeletedAt != nil {
		n26, err26 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.DeletedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt):])
		if err26 != nil {
			return 0, err26
		}
		i -= n26
		i = encodeVarintPwdb(dAtA, i, uint64(n26))
		i--
		dAtA[i] = 0x22
	}
	if m.UpdatedAt != nil {
		n27, err27 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err27 != nil {
			return 0, err27
		}
		i -= n27
		i = encodeVarintPwdb(dAtA, i, uint64(n27))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n28, err28 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err28 != nil {
			return 0, err28
		}
		i -= n28
		i = encodeVarintPwdb(dAtA, i, uint64(n28))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Organization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Organization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Organization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.ReceivedWhoswhoAttempts) > 0 {
		for iNdEx := len(m.ReceivedWhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReceivedWhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.SoloSeason {
		i--
		if m.SoloSeason {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc0
	}
	if m.DeletionStatus != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.DeletionStatus))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.GravatarURL) > 0 {
		i -= len(m.GravatarURL)
		copy(dAtA[i:], m.GravatarURL)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.GravatarURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.DeletedAt != nil {
		n29, err29 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.DeletedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt):])
		if err29 != nil {
			return 0, err29
		}
		i -= n29
		i = encodeVarintPwdb(dAtA, i, uint64(n29))
		i--
		dAtA[i] = 0x22
	}
	if m.UpdatedAt != nil {
		n30, err30 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err30 != nil {
			return 0, err30
		}
		i -= n30
		i = encodeVarintPwdb(dAtA, i, uint64(n30))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n31, err31 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err31 != nil {
			return 0, err31
		}
		i -= n31
		i = encodeVarintPwdb(dAtA, i, uint64(n31))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrganizationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Season) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Season) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Season) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coupons) > 0 {
		for iNdEx := len(m.Coupons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coupons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.IsDefault {
		i--
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if m.Visibility != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Visibility))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.Status != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n32, err32 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err32 != nil {
			return 0, err32
		}
		i -= n32
		i = encodeVarintPwdb(dAtA, i, uint64(n32))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n33, err33 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err33 != nil {
			return 0, err33
		}
		i -= n33
		i = encodeVarintPwdb(dAtA, i, uint64(n33))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.ChallengeSubscriptions) > 0 {
		for iNdEx := len(m.ChallengeSubscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeSubscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xea
		}
	}
	if m.OrganizationID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.OrganizationID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Organization != nil {
		{
			size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.SeasonID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.NbAchievements != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.NbAchievements))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd8
	}
	if m.BronzeMedals != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.BronzeMedals))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd0
	}
	if m.SilverMedals != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.SilverMedals))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc8
	}
	if m.GoldMedals != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.GoldMedals))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc0
	}
	if m.Score != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if m.Cash != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Cash))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.DeletionStatus != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.DeletionStatus))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if m.IsDefault {
		i--
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.DeletedAt != nil {
		n36, err36 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.DeletedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt):])
		if err36 != nil {
			return 0, err36
		}
		i -= n36
		i = encodeVarintPwdb(dAtA, i, uint64(n36))
		i--
		dAtA[i] = 0x22
	}
	if m.UpdatedAt != nil {
		n37, err37 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err37 != nil {
			return 0, err37
		}
		i -= n37
		i = encodeVarintPwdb(dAtA, i, uint64(n37))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n38, err38 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err38 != nil {
			return 0, err38
		}
		i -= n38
		i = encodeVarintPwdb(dAtA, i, uint64(n38))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WhoswhoAttempt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhoswhoAttempt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhoswhoAttempt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetTeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TargetTeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf8
	}
	if m.TargetTeam != nil {
		{
			size, err := m.TargetTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf2
	}
	if m.TargetUserID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TargetUserID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe8
	}
	if m.TargetUser != nil {
		{
			size, err := m.TargetUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.AuthorTeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AuthorTeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.AuthorTeam != nil {
		{
			size, err := m.AuthorTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.AuthorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AuthorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n43, err43 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err43 != nil {
			return 0, err43
		}
		i -= n43
		i = encodeVarintPwdb(dAtA, i, uint64(n43))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n44, err44 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err44 != nil {
			return 0, err44
		}
		i -= n44
		i = encodeVarintPwdb(dAtA, i, uint64(n44))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe8
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.AuthorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AuthorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.ChallengeSubscriptionID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ChallengeSubscriptionID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.ChallengeSubscription != nil {
		{
			size, err := m.ChallengeSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Passphrase) > 0 {
		i -= len(m.Passphrase)
		copy(dAtA[i:], m.Passphrase)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Passphrase)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if len(m.PassphraseKey) > 0 {
		i -= len(m.PassphraseKey)
		copy(dAtA[i:], m.PassphraseKey)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.PassphraseKey)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.CorrectorComment) > 0 {
		i -= len(m.CorrectorComment)
		copy(dAtA[i:], m.CorrectorComment)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.CorrectorComment)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.AuthorComment) > 0 {
		i -= len(m.AuthorComment)
		copy(dAtA[i:], m.AuthorComment)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.AuthorComment)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.Status != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n48, err48 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err48 != nil {
			return 0, err48
		}
		i -= n48
		i = encodeVarintPwdb(dAtA, i, uint64(n48))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n49, err49 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err49 != nil {
			return 0, err49
		}
		i -= n49
		i = encodeVarintPwdb(dAtA, i, uint64(n49))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validations) > 0 {
		for iNdEx := len(m.Validations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xd
			i--
			dAtA[i] = 0x82
		}
	}
	if m.CloserID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.CloserID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf8
	}
	if m.Closer != nil {
		{
			size, err := m.Closer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf2
	}
	if m.BuyerID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.BuyerID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe8
	}
	if m.Buyer != nil {
		{
			size, err := m.Buyer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.SeasonChallengeID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.SeasonChallengeID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.SeasonChallenge != nil {
		{
			size, err := m.SeasonChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.TeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.ClosedAt != nil {
		n54, err54 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ClosedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ClosedAt):])
		if err54 != nil {
			return 0, err54
		}
		i -= n54
		i = encodeVarintPwdb(dAtA, i, uint64(n54))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.Status != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n55, err55 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err55 != nil {
			return 0, err55
		}
		i -= n55
		i = encodeVarintPwdb(dAtA, i, uint64(n55))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n56, err56 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err56 != nil {
			return 0, err56
		}
		i -= n56
		i = encodeVarintPwdb(dAtA, i, uint64(n56))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InventoryItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InventoryItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InventoryItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OwnerID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.OwnerID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Item != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Item))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n58, err58 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err58 != nil {
			return 0, err58
		}
		i -= n58
		i = encodeVarintPwdb(dAtA, i, uint64(n58))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n59, err59 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err59 != nil {
			return 0, err59
		}
		i -= n59
		i = encodeVarintPwdb(dAtA, i, uint64(n59))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Notification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Args) > 0 {
		i -= len(m.Args)
		copy(dAtA[i:], m.Args)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Args)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ClickUrl) > 0 {
		i -= len(m.ClickUrl)
		copy(dAtA[i:], m.ClickUrl)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.ClickUrl)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.IsRead {
		i--
		if m.IsRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n61, err61 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err61 != nil {
			return 0, err61
		}
		i -= n61
		i = encodeVarintPwdb(dAtA, i, uint64(n61))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n62, err62 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err62 != nil {
			return 0, err62
		}
		i -= n62
		i = encodeVarintPwdb(dAtA, i, uint64(n62))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Coupon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coupon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Coupon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validations) > 0 {
		for iNdEx := len(m.Validations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.SeasonID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.MaxValidationCount != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.MaxValidationCount))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.Value != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n64, err64 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err64 != nil {
			return 0, err64
		}
		i -= n64
		i = encodeVarintPwdb(dAtA, i, uint64(n64))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n65, err65 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err65 != nil {
			return 0, err65
		}
		i -= n65
		i = encodeVarintPwdb(dAtA, i, uint64(n65))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CouponValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouponValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CouponValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CouponID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.CouponID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe8
	}
	if m.Coupon != nil {
		{
			size, err := m.Coupon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.TeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.AuthorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AuthorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n69, err69 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err69 != nil {
			return 0, err69
		}
		i -= n69
		i = encodeVarintPwdb(dAtA, i, uint64(n69))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n70, err70 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err70 != nil {
			return 0, err70
		}
		i -= n70
		i = encodeVarintPwdb(dAtA, i, uint64(n70))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Achievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeValidationID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ChallengeValidationID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe8
	}
	if m.ChallengeValidation != nil {
		{
			size, err := m.ChallengeValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.TeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.AuthorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AuthorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Argument) > 0 {
		i -= len(m.Argument)
		copy(dAtA[i:], m.Argument)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Argument)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if m.IsGlobal {
		i--
		if m.IsGlobal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if m.Type != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n74, err74 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err74 != nil {
			return 0, err74
		}
		i -= n74
		i = encodeVarintPwdb(dAtA, i, uint64(n74))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n75, err75 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err75 != nil {
			return 0, err75
		}
		i -= n75
		i = encodeVarintPwdb(dAtA, i, uint64(n75))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dump) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dump) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dump) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhoswhoAttempts) > 0 {
		for iNdEx := len(m.WhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.TeamMembers) > 0 {
		for iNdEx := len(m.TeamMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.SeasonChallenges) > 0 {
		for iNdEx := len(m.SeasonChallenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SeasonChallenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Seasons) > 0 {
		for iNdEx := len(m.Seasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.OrganizationMembers) > 0 {
		for iNdEx := len(m.OrganizationMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrganizationMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.InventoryItems) > 0 {
		for iNdEx := len(m.InventoryItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InventoryItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Agents) > 0 {
		for iNdEx := len(m.Agents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Agents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CouponValidations) > 0 {
		for iNdEx := len(m.CouponValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CouponValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Coupons) > 0 {
		for iNdEx := len(m.Coupons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coupons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ChallengeValidations) > 0 {
		for iNdEx := len(m.ChallengeValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ChallengeSubscriptions) > 0 {
		for iNdEx := len(m.ChallengeSubscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeSubscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ChallengeInstances) > 0 {
		for iNdEx := len(m.ChallengeInstances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeInstances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ChallengeFlavors) > 0 {
		for iNdEx := len(m.ChallengeFlavors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeFlavors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Challenges) > 0 {
		for iNdEx := len(m.Challenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Challenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TableRows) > 0 {
		for k := range m.TableRows {
			v := m.TableRows[k]
			baseI := i
			i = encodeVarintPwdb(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPwdb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPwdb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPwdb(dAtA []byte, offset int, v uint64) int {
	offset -= sovPwdb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Challenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.IsDraft {
		n += 3
	}
	l = len(m.PreviewUrl)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Homepage)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if len(m.Flavors) > 0 {
		for _, e := range m.Flavors {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *ChallengeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *ChallengeFlavor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Changelog)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.IsDraft {
		n += 3
	}
	if m.IsLatest {
		n += 3
	}
	l = len(m.SourceURL)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Driver != 0 {
		n += 2 + sovPwdb(uint64(m.Driver))
	}
	if m.Challenge != nil {
		l = m.Challenge.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ChallengeID != 0 {
		n += 2 + sovPwdb(uint64(m.ChallengeID))
	}
	if len(m.SeasonChallenges) > 0 {
		for _, e := range m.SeasonChallenges {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *SeasonChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Flavor != nil {
		l = m.Flavor.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.FlavorID != 0 {
		n += 2 + sovPwdb(uint64(m.FlavorID))
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.SeasonID != 0 {
		n += 2 + sovPwdb(uint64(m.SeasonID))
	}
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *SeasonChallengeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *ChallengeInstance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovPwdb(uint64(m.Status))
	}
	if m.Agent != nil {
		l = m.Agent.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AgentID != 0 {
		n += 2 + sovPwdb(uint64(m.AgentID))
	}
	if m.Flavor != nil {
		l = m.Flavor.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.FlavorID != 0 {
		n += 2 + sovPwdb(uint64(m.FlavorID))
	}
	return n
}

func (m *Agent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovPwdb(uint64(m.Status))
	}
	if len(m.ChallengeInstances) > 0 {
		for _, e := range m.ChallengeInstances {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *OrganizationMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Role != 0 {
		n += 2 + sovPwdb(uint64(m.Role))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.UserID != 0 {
		n += 2 + sovPwdb(uint64(m.UserID))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.OrganizationID != 0 {
		n += 2 + sovPwdb(uint64(m.OrganizationID))
	}
	return n
}

func (m *TeamMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Role != 0 {
		n += 2 + sovPwdb(uint64(m.Role))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.UserID != 0 {
		n += 2 + sovPwdb(uint64(m.UserID))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamID))
	}
	if len(m.Coupons) > 0 {
		for _, e := range m.Coupons {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.SentWhoswhoAttempts) > 0 {
		for _, e := range m.SentWhoswhoAttempts {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ReceivedWhoswhoAttempts) > 0 {
		for _, e := range m.ReceivedWhoswhoAttempts {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ChallengeValidations) > 0 {
		for _, e := range m.ChallengeValidations {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.DeletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.GravatarURL)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.WebsiteURL)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.OAuthSubject)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.DeletionReason)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.DeletionStatus != 0 {
		n += 2 + sovPwdb(uint64(m.DeletionStatus))
	}
	if len(m.TeamMemberships) > 0 {
		for _, e := range m.TeamMemberships {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.OrganizationMemberships) > 0 {
		for _, e := range m.OrganizationMemberships {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if m.ActiveTeamMember != nil {
		l = m.ActiveTeamMember.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ActiveTeamMemberID != 0 {
		n += 2 + sovPwdb(uint64(m.ActiveTeamMemberID))
	}
	if m.ActiveSeason != nil {
		l = m.ActiveSeason.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ActiveSeasonID != 0 {
		n += 2 + sovPwdb(uint64(m.ActiveSeasonID))
	}
	return n
}

func (m *UserList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *Organization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.DeletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.GravatarURL)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.DeletionStatus != 0 {
		n += 2 + sovPwdb(uint64(m.DeletionStatus))
	}
	if m.SoloSeason {
		n += 3
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ReceivedWhoswhoAttempts) > 0 {
		for _, e := range m.ReceivedWhoswhoAttempts {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *OrganizationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *Season) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovPwdb(uint64(m.Status))
	}
	if m.Visibility != 0 {
		n += 2 + sovPwdb(uint64(m.Visibility))
	}
	if m.IsDefault {
		n += 3
	}
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Coupons) > 0 {
		for _, e := range m.Coupons {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *SeasonList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.DeletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.IsDefault {
		n += 3
	}
	if m.DeletionStatus != 0 {
		n += 2 + sovPwdb(uint64(m.DeletionStatus))
	}
	if m.Cash != 0 {
		n += 2 + sovPwdb(uint64(m.Cash))
	}
	if m.Score != 0 {
		n += 2 + sovPwdb(uint64(m.Score))
	}
	if m.GoldMedals != 0 {
		n += 2 + sovPwdb(uint64(m.GoldMedals))
	}
	if m.SilverMedals != 0 {
		n += 2 + sovPwdb(uint64(m.SilverMedals))
	}
	if m.BronzeMedals != 0 {
		n += 2 + sovPwdb(uint64(m.BronzeMedals))
	}
	if m.NbAchievements != 0 {
		n += 2 + sovPwdb(uint64(m.NbAchievements))
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.SeasonID != 0 {
		n += 2 + sovPwdb(uint64(m.SeasonID))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.OrganizationID != 0 {
		n += 2 + sovPwdb(uint64(m.OrganizationID))
	}
	if len(m.ChallengeSubscriptions) > 0 {
		for _, e := range m.ChallengeSubscriptions {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *TeamList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *WhoswhoAttempt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Success {
		n += 3
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AuthorID != 0 {
		n += 2 + sovPwdb(uint64(m.AuthorID))
	}
	if m.AuthorTeam != nil {
		l = m.AuthorTeam.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AuthorTeamID != 0 {
		n += 2 + sovPwdb(uint64(m.AuthorTeamID))
	}
	if m.TargetUser != nil {
		l = m.TargetUser.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TargetUserID != 0 {
		n += 2 + sovPwdb(uint64(m.TargetUserID))
	}
	if m.TargetTeam != nil {
		l = m.TargetTeam.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TargetTeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TargetTeamID))
	}
	return n
}

func (m *ChallengeValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovPwdb(uint64(m.Status))
	}
	l = len(m.AuthorComment)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.CorrectorComment)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.PassphraseKey)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Passphrase)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ChallengeSubscription != nil {
		l = m.ChallengeSubscription.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ChallengeSubscriptionID != 0 {
		n += 2 + sovPwdb(uint64(m.ChallengeSubscriptionID))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AuthorID != 0 {
		n += 2 + sovPwdb(uint64(m.AuthorID))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamID))
	}
	return n
}

func (m *ChallengeSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovPwdb(uint64(m.Status))
	}
	if m.ClosedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ClosedAt)
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamID))
	}
	if m.SeasonChallenge != nil {
		l = m.SeasonChallenge.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.SeasonChallengeID != 0 {
		n += 2 + sovPwdb(uint64(m.SeasonChallengeID))
	}
	if m.Buyer != nil {
		l = m.Buyer.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.BuyerID != 0 {
		n += 2 + sovPwdb(uint64(m.BuyerID))
	}
	if m.Closer != nil {
		l = m.Closer.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.CloserID != 0 {
		n += 2 + sovPwdb(uint64(m.CloserID))
	}
	if len(m.Validations) > 0 {
		for _, e := range m.Validations {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *InventoryItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Item != 0 {
		n += 2 + sovPwdb(uint64(m.Item))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.OwnerID != 0 {
		n += 2 + sovPwdb(uint64(m.OwnerID))
	}
	return n
}

func (m *Notification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.IsRead {
		n += 3
	}
	l = len(m.ClickUrl)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Args)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.UserID != 0 {
		n += 2 + sovPwdb(uint64(m.UserID))
	}
	return n
}

func (m *Coupon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Value != 0 {
		n += 2 + sovPwdb(uint64(m.Value))
	}
	if m.MaxValidationCount != 0 {
		n += 2 + sovPwdb(uint64(m.MaxValidationCount))
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.SeasonID != 0 {
		n += 2 + sovPwdb(uint64(m.SeasonID))
	}
	if len(m.Validations) > 0 {
		for _, e := range m.Validations {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *CouponValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AuthorID != 0 {
		n += 2 + sovPwdb(uint64(m.AuthorID))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamID))
	}
	if m.Coupon != nil {
		l = m.Coupon.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.CouponID != 0 {
		n += 2 + sovPwdb(uint64(m.CouponID))
	}
	return n
}

func (m *Achievement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Type != 0 {
		n += 2 + sovPwdb(uint64(m.Type))
	}
	if m.IsGlobal {
		n += 3
	}
	l = len(m.Comment)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Argument)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AuthorID != 0 {
		n += 2 + sovPwdb(uint64(m.AuthorID))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamID))
	}
	if m.ChallengeValidation != nil {
		l = m.ChallengeValidation.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ChallengeValidationID != 0 {
		n += 2 + sovPwdb(uint64(m.ChallengeValidationID))
	}
	return n
}

func (m *Dump) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Challenges) > 0 {
		for _, e := range m.Challenges {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ChallengeFlavors) > 0 {
		for _, e := range m.ChallengeFlavors {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ChallengeInstances) > 0 {
		for _, e := range m.ChallengeInstances {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ChallengeSubscriptions) > 0 {
		for _, e := range m.ChallengeSubscriptions {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ChallengeValidations) > 0 {
		for _, e := range m.ChallengeValidations {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Coupons) > 0 {
		for _, e := range m.Coupons {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.CouponValidations) > 0 {
		for _, e := range m.CouponValidations {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Agents) > 0 {
		for _, e := range m.Agents {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.InventoryItems) > 0 {
		for _, e := range m.InventoryItems {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.OrganizationMembers) > 0 {
		for _, e := range m.OrganizationMembers {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Seasons) > 0 {
		for _, e := range m.Seasons {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.SeasonChallenges) > 0 {
		for _, e := range m.SeasonChallenges {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.TeamMembers) > 0 {
		for _, e := range m.TeamMembers {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.WhoswhoAttempts) > 0 {
		for _, e := range m.WhoswhoAttempts {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TableRows) > 0 {
		for k, v := range m.TableRows {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPwdb(uint64(len(k))) + 1 + sovPwdb(uint64(v))
			n += mapEntrySize + 1 + sovPwdb(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPwdb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPwdb(x uint64) (n int) {
	return sovPwdb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Challenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDraft = bool(v != 0)
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Homepage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Homepage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flavors = append(m.Flavors, &ChallengeFlavor{})
			if err := m.Flavors[len(m.Flavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Challenge{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeFlavor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeFlavor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeFlavor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changelog", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changelog = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDraft = bool(v != 0)
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLatest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLatest = bool(v != 0)
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			m.Driver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Driver |= ChallengeFlavor_Driver(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenge == nil {
				m.Challenge = &Challenge{}
			}
			if err := m.Challenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeID", wireType)
			}
			m.ChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonChallenges = append(m.SeasonChallenges, &SeasonChallenge{})
			if err := m.SeasonChallenges[len(m.SeasonChallenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flavor == nil {
				m.Flavor = &ChallengeFlavor{}
			}
			if err := m.Flavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlavorID", wireType)
			}
			m.FlavorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlavorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, &ChallengeInstance{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &ChallengeSubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SeasonChallenge{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeInstance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChallengeInstance_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Agent == nil {
				m.Agent = &Agent{}
			}
			if err := m.Agent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			m.AgentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flavor == nil {
				m.Flavor = &ChallengeFlavor{}
			}
			if err := m.Flavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlavorID", wireType)
			}
			m.FlavorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlavorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Agent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Agent_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeInstances = append(m.ChallengeInstances, &ChallengeInstance{})
			if err := m.ChallengeInstances[len(m.ChallengeInstances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= OrganizationMember_Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &Organization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			m.OrganizationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizationID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= TeamMember_Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupons = append(m.Coupons, &Coupon{})
			if err := m.Coupons[len(m.Coupons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 206:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentWhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentWhoswhoAttempts = append(m.SentWhoswhoAttempts, &WhoswhoAttempt{})
			if err := m.SentWhoswhoAttempts[len(m.SentWhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 207:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedWhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivedWhoswhoAttempts = append(m.ReceivedWhoswhoAttempts, &WhoswhoAttempt{})
			if err := m.ReceivedWhoswhoAttempts[len(m.ReceivedWhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 208:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &InventoryItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 209:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeValidations = append(m.ChallengeValidations, &ChallengeValidation{})
			if err := m.ChallengeValidations[len(m.ChallengeValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravatarURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravatarURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OAuthSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OAuthSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 107:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionStatus", wireType)
			}
			m.DeletionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletionStatus |= DeletionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMemberships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamMemberships = append(m.TeamMemberships, &TeamMember{})
			if err := m.TeamMemberships[len(m.TeamMemberships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationMemberships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationMemberships = append(m.OrganizationMemberships, &OrganizationMember{})
			if err := m.OrganizationMemberships[len(m.OrganizationMemberships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTeamMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveTeamMember == nil {
				m.ActiveTeamMember = &TeamMember{}
			}
			if err := m.ActiveTeamMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 204:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTeamMemberID", wireType)
			}
			m.ActiveTeamMemberID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveTeamMemberID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 205:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSeason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveSeason == nil {
				m.ActiveSeason = &Season{}
			}
			if err := m.ActiveSeason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 206:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSeasonID", wireType)
			}
			m.ActiveSeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveSeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &User{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Organization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Organization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Organization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravatarURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravatarURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionStatus", wireType)
			}
			m.DeletionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletionStatus |= DeletionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 104:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoloSeason", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SoloSeason = bool(v != 0)
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedWhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivedWhoswhoAttempts = append(m.ReceivedWhoswhoAttempts, &WhoswhoAttempt{})
			if err := m.ReceivedWhoswhoAttempts[len(m.ReceivedWhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &OrganizationMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Organization{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Season) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Season: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Season: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Season_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			m.Visibility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Visibility |= Season_Visibility(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, &Team{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupons = append(m.Coupons, &Coupon{})
			if err := m.Coupons[len(m.Coupons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Season{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionStatus", wireType)
			}
			m.DeletionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletionStatus |= DeletionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cash", wireType)
			}
			m.Cash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 104:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldMedals", wireType)
			}
			m.GoldMedals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldMedals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 105:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SilverMedals", wireType)
			}
			m.SilverMedals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SilverMedals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BronzeMedals", wireType)
			}
			m.BronzeMedals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BronzeMedals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 107:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbAchievements", wireType)
			}
			m.NbAchievements = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NbAchievements |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &Organization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			m.OrganizationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizationID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 205:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeSubscriptions = append(m.ChallengeSubscriptions, &ChallengeSubscription{})
			if err := m.ChallengeSubscriptions[len(m.ChallengeSubscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 206:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &TeamMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 207:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Team{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhoswhoAttempt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhoswhoAttempt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhoswhoAttempt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &User{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorID", wireType)
			}
			m.AuthorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorTeam == nil {
				m.AuthorTeam = &Team{}
			}
			if err := m.AuthorTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorTeamID", wireType)
			}
			m.AuthorTeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorTeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetUser == nil {
				m.TargetUser = &User{}
			}
			if err := m.TargetUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUserID", wireType)
			}
			m.TargetUserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 206:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetTeam == nil {
				m.TargetTeam = &Team{}
			}
			if err := m.TargetTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 207:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTeamID", wireType)
			}
			m.TargetTeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetTeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChallengeValidation_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorComment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorComment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrectorComment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrectorComment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassphraseKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassphraseKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passphrase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passphrase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeSubscription == nil {
				m.ChallengeSubscription = &ChallengeSubscription{}
			}
			if err := m.ChallengeSubscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptionID", wireType)
			}
			m.ChallengeSubscriptionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeSubscriptionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &User{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorID", wireType)
			}
			m.AuthorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChallengeSubscription_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClosedAt == nil {
				m.ClosedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ClosedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonChallenge == nil {
				m.SeasonChallenge = &SeasonChallenge{}
			}
			if err := m.SeasonChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallengeID", wireType)
			}
			m.SeasonChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buyer == nil {
				m.Buyer = &User{}
			}
			if err := m.Buyer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerID", wireType)
			}
			m.BuyerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 206:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Closer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Closer == nil {
				m.Closer = &User{}
			}
			if err := m.Closer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 207:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloserID", wireType)
			}
			m.CloserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CloserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 208:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validations = append(m.Validations, &ChallengeValidation{})
			if err := m.Validations[len(m.Validations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InventoryItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InventoryItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InventoryItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			m.Item = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Item |= InventoryItem_Item(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &TeamMember{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRead = bool(v != 0)
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClickUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coupon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coupon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coupon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidationCount", wireType)
			}
			m.MaxValidationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidationCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validations = append(m.Validations, &CouponValidation{})
			if err := m.Validations[len(m.Validations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouponValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CouponValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CouponValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &User{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorID", wireType)
			}
			m.AuthorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coupon == nil {
				m.Coupon = &Coupon{}
			}
			if err := m.Coupon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponID", wireType)
			}
			m.CouponID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CouponID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Achievement_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobal = bool(v != 0)
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Argument", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Argument = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &User{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorID", wireType)
			}
			m.AuthorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeValidation == nil {
				m.ChallengeValidation = &ChallengeValidation{}
			}
			if err := m.ChallengeValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidationID", wireType)
			}
			m.ChallengeValidationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeValidationID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dump) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dump: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dump: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenges = append(m.Challenges, &Challenge{})
			if err := m.Challenges[len(m.Challenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeFlavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeFlavors = append(m.ChallengeFlavors, &ChallengeFlavor{})
			if err := m.ChallengeFlavors[len(m.ChallengeFlavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeInstances = append(m.ChallengeInstances, &ChallengeInstance{})
			if err := m.ChallengeInstances[len(m.ChallengeInstances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeSubscriptions = append(m.ChallengeSubscriptions, &ChallengeSubscription{})
			if err := m.ChallengeSubscriptions[len(m.ChallengeSubscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeValidations = append(m.ChallengeValidations, &ChallengeValidation{})
			if err := m.ChallengeValidations[len(m.ChallengeValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupons = append(m.Coupons, &Coupon{})
			if err := m.Coupons[len(m.Coupons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponValidations = append(m.CouponValidations, &CouponValidation{})
			if err := m.CouponValidations[len(m.CouponValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agents = append(m.Agents, &Agent{})
			if err := m.Agents[len(m.Agents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InventoryItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InventoryItems = append(m.InventoryItems, &InventoryItem{})
			if err := m.InventoryItems[len(m.InventoryItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, &Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationMembers = append(m.OrganizationMembers, &OrganizationMember{})
			if err := m.OrganizationMembers[len(m.OrganizationMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seasons = append(m.Seasons, &Season{})
			if err := m.Seasons[len(m.Seasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonChallenges = append(m.SeasonChallenges, &SeasonChallenge{})
			if err := m.SeasonChallenges[len(m.SeasonChallenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamMembers = append(m.TeamMembers, &TeamMember{})
			if err := m.TeamMembers[len(m.TeamMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhoswhoAttempts = append(m.WhoswhoAttempts, &WhoswhoAttempt{})
			if err := m.WhoswhoAttempts[len(m.WhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableRows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableRows == nil {
				m.TableRows = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPwdb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPwdb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPwdb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPwdb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPwdb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPwdb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPwdb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TableRows[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPwdb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPwdb
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPwdb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPwdb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPwdb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPwdb
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPwdb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPwdb   = fmt.Errorf("proto: integer overflow")
)
