// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pwengine.proto

package pwengine

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	pwdb "pathwar.land/go/pkg/pwdb"
	pwsso "pathwar.land/go/pkg/pwsso"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TeamGetInput struct {
	TeamID int64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (m *TeamGetInput) Reset()         { *m = TeamGetInput{} }
func (m *TeamGetInput) String() string { return proto.CompactTextString(m) }
func (*TeamGetInput) ProtoMessage()    {}
func (*TeamGetInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{0}
}
func (m *TeamGetInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamGetInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamGetInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamGetInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamGetInput.Merge(m, src)
}
func (m *TeamGetInput) XXX_Size() int {
	return m.Size()
}
func (m *TeamGetInput) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamGetInput.DiscardUnknown(m)
}

var xxx_messageInfo_TeamGetInput proto.InternalMessageInfo

func (m *TeamGetInput) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

type TeamGetOutput struct {
	Item *pwdb.Team `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *TeamGetOutput) Reset()         { *m = TeamGetOutput{} }
func (m *TeamGetOutput) String() string { return proto.CompactTextString(m) }
func (*TeamGetOutput) ProtoMessage()    {}
func (*TeamGetOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{1}
}
func (m *TeamGetOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamGetOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamGetOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamGetOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamGetOutput.Merge(m, src)
}
func (m *TeamGetOutput) XXX_Size() int {
	return m.Size()
}
func (m *TeamGetOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamGetOutput.DiscardUnknown(m)
}

var xxx_messageInfo_TeamGetOutput proto.InternalMessageInfo

func (m *TeamGetOutput) GetItem() *pwdb.Team {
	if m != nil {
		return m.Item
	}
	return nil
}

type SeasonChallengeListInput struct {
	SeasonID int64 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
}

func (m *SeasonChallengeListInput) Reset()         { *m = SeasonChallengeListInput{} }
func (m *SeasonChallengeListInput) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeListInput) ProtoMessage()    {}
func (*SeasonChallengeListInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{2}
}
func (m *SeasonChallengeListInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeListInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeListInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeListInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeListInput.Merge(m, src)
}
func (m *SeasonChallengeListInput) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeListInput) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeListInput.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeListInput proto.InternalMessageInfo

func (m *SeasonChallengeListInput) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

type SeasonChallengeListOutput struct {
	Items []*pwdb.SeasonChallenge `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *SeasonChallengeListOutput) Reset()         { *m = SeasonChallengeListOutput{} }
func (m *SeasonChallengeListOutput) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeListOutput) ProtoMessage()    {}
func (*SeasonChallengeListOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{3}
}
func (m *SeasonChallengeListOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeListOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeListOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeListOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeListOutput.Merge(m, src)
}
func (m *SeasonChallengeListOutput) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeListOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeListOutput.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeListOutput proto.InternalMessageInfo

func (m *SeasonChallengeListOutput) GetItems() []*pwdb.SeasonChallenge {
	if m != nil {
		return m.Items
	}
	return nil
}

type SeasonChallengeGetInput struct {
	SeasonChallengeID int64 `protobuf:"varint,1,opt,name=season_challenge_id,json=seasonChallengeId,proto3" json:"season_challenge_id,omitempty"`
}

func (m *SeasonChallengeGetInput) Reset()         { *m = SeasonChallengeGetInput{} }
func (m *SeasonChallengeGetInput) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeGetInput) ProtoMessage()    {}
func (*SeasonChallengeGetInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{4}
}
func (m *SeasonChallengeGetInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeGetInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeGetInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeGetInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeGetInput.Merge(m, src)
}
func (m *SeasonChallengeGetInput) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeGetInput) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeGetInput.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeGetInput proto.InternalMessageInfo

func (m *SeasonChallengeGetInput) GetSeasonChallengeID() int64 {
	if m != nil {
		return m.SeasonChallengeID
	}
	return 0
}

type SeasonChallengeGetOutput struct {
	Item *pwdb.SeasonChallenge `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *SeasonChallengeGetOutput) Reset()         { *m = SeasonChallengeGetOutput{} }
func (m *SeasonChallengeGetOutput) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeGetOutput) ProtoMessage()    {}
func (*SeasonChallengeGetOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{5}
}
func (m *SeasonChallengeGetOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeGetOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeGetOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeGetOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeGetOutput.Merge(m, src)
}
func (m *SeasonChallengeGetOutput) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeGetOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeGetOutput.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeGetOutput proto.InternalMessageInfo

func (m *SeasonChallengeGetOutput) GetItem() *pwdb.SeasonChallenge {
	if m != nil {
		return m.Item
	}
	return nil
}

type ChallengeGetInput struct {
	ChallengeID int64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *ChallengeGetInput) Reset()         { *m = ChallengeGetInput{} }
func (m *ChallengeGetInput) String() string { return proto.CompactTextString(m) }
func (*ChallengeGetInput) ProtoMessage()    {}
func (*ChallengeGetInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{6}
}
func (m *ChallengeGetInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeGetInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeGetInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeGetInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeGetInput.Merge(m, src)
}
func (m *ChallengeGetInput) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeGetInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeGetInput.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeGetInput proto.InternalMessageInfo

func (m *ChallengeGetInput) GetChallengeID() int64 {
	if m != nil {
		return m.ChallengeID
	}
	return 0
}

type ChallengeGetOutput struct {
	Item *pwdb.Challenge `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *ChallengeGetOutput) Reset()         { *m = ChallengeGetOutput{} }
func (m *ChallengeGetOutput) String() string { return proto.CompactTextString(m) }
func (*ChallengeGetOutput) ProtoMessage()    {}
func (*ChallengeGetOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{7}
}
func (m *ChallengeGetOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeGetOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeGetOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeGetOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeGetOutput.Merge(m, src)
}
func (m *ChallengeGetOutput) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeGetOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeGetOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeGetOutput proto.InternalMessageInfo

func (m *ChallengeGetOutput) GetItem() *pwdb.Challenge {
	if m != nil {
		return m.Item
	}
	return nil
}

type SeasonChallengeBuyInput struct {
	SeasonChallengeID int64 `protobuf:"varint,1,opt,name=season_challenge_id,json=seasonChallengeId,proto3" json:"season_challenge_id,omitempty"`
	TeamID            int64 `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (m *SeasonChallengeBuyInput) Reset()         { *m = SeasonChallengeBuyInput{} }
func (m *SeasonChallengeBuyInput) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeBuyInput) ProtoMessage()    {}
func (*SeasonChallengeBuyInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{8}
}
func (m *SeasonChallengeBuyInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeBuyInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeBuyInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeBuyInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeBuyInput.Merge(m, src)
}
func (m *SeasonChallengeBuyInput) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeBuyInput) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeBuyInput.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeBuyInput proto.InternalMessageInfo

func (m *SeasonChallengeBuyInput) GetSeasonChallengeID() int64 {
	if m != nil {
		return m.SeasonChallengeID
	}
	return 0
}

func (m *SeasonChallengeBuyInput) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

type SeasonChallengeBuyOutput struct {
	ChallengeSubscription *pwdb.ChallengeSubscription `protobuf:"bytes,1,opt,name=challenge_subscription,json=challengeSubscription,proto3" json:"challenge_subscription,omitempty"`
}

func (m *SeasonChallengeBuyOutput) Reset()         { *m = SeasonChallengeBuyOutput{} }
func (m *SeasonChallengeBuyOutput) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeBuyOutput) ProtoMessage()    {}
func (*SeasonChallengeBuyOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{9}
}
func (m *SeasonChallengeBuyOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeBuyOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeBuyOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeBuyOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeBuyOutput.Merge(m, src)
}
func (m *SeasonChallengeBuyOutput) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeBuyOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeBuyOutput.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeBuyOutput proto.InternalMessageInfo

func (m *SeasonChallengeBuyOutput) GetChallengeSubscription() *pwdb.ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscription
	}
	return nil
}

type ChallengeSubscriptionValidateInput struct {
	ChallengeSubscriptionID int64  `protobuf:"varint,1,opt,name=challenge_subscription_id,json=challengeSubscriptionId,proto3" json:"challenge_subscription_id,omitempty"`
	Passphrase              string `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Comment                 string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *ChallengeSubscriptionValidateInput) Reset()         { *m = ChallengeSubscriptionValidateInput{} }
func (m *ChallengeSubscriptionValidateInput) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionValidateInput) ProtoMessage()    {}
func (*ChallengeSubscriptionValidateInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{10}
}
func (m *ChallengeSubscriptionValidateInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionValidateInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionValidateInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionValidateInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionValidateInput.Merge(m, src)
}
func (m *ChallengeSubscriptionValidateInput) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionValidateInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionValidateInput.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionValidateInput proto.InternalMessageInfo

func (m *ChallengeSubscriptionValidateInput) GetChallengeSubscriptionID() int64 {
	if m != nil {
		return m.ChallengeSubscriptionID
	}
	return 0
}

func (m *ChallengeSubscriptionValidateInput) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

func (m *ChallengeSubscriptionValidateInput) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type ChallengeSubscriptionValidateOutput struct {
	ChallengeValidation *pwdb.ChallengeValidation `protobuf:"bytes,1,opt,name=challenge_validation,json=challengeValidation,proto3" json:"challenge_validation,omitempty"`
}

func (m *ChallengeSubscriptionValidateOutput) Reset()         { *m = ChallengeSubscriptionValidateOutput{} }
func (m *ChallengeSubscriptionValidateOutput) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionValidateOutput) ProtoMessage()    {}
func (*ChallengeSubscriptionValidateOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{11}
}
func (m *ChallengeSubscriptionValidateOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionValidateOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionValidateOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionValidateOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionValidateOutput.Merge(m, src)
}
func (m *ChallengeSubscriptionValidateOutput) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionValidateOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionValidateOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionValidateOutput proto.InternalMessageInfo

func (m *ChallengeSubscriptionValidateOutput) GetChallengeValidation() *pwdb.ChallengeValidation {
	if m != nil {
		return m.ChallengeValidation
	}
	return nil
}

type ChallengeSubscriptionCloseInput struct {
	ChallengeSubscriptionID int64 `protobuf:"varint,1,opt,name=challenge_subscription_id,json=challengeSubscriptionId,proto3" json:"challenge_subscription_id,omitempty"`
}

func (m *ChallengeSubscriptionCloseInput) Reset()         { *m = ChallengeSubscriptionCloseInput{} }
func (m *ChallengeSubscriptionCloseInput) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionCloseInput) ProtoMessage()    {}
func (*ChallengeSubscriptionCloseInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{12}
}
func (m *ChallengeSubscriptionCloseInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionCloseInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionCloseInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionCloseInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionCloseInput.Merge(m, src)
}
func (m *ChallengeSubscriptionCloseInput) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionCloseInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionCloseInput.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionCloseInput proto.InternalMessageInfo

func (m *ChallengeSubscriptionCloseInput) GetChallengeSubscriptionID() int64 {
	if m != nil {
		return m.ChallengeSubscriptionID
	}
	return 0
}

type ChallengeSubscriptionCloseOutput struct {
	ChallengeSubscription *pwdb.ChallengeSubscription `protobuf:"bytes,1,opt,name=challenge_subscription,json=challengeSubscription,proto3" json:"challenge_subscription,omitempty"`
}

func (m *ChallengeSubscriptionCloseOutput) Reset()         { *m = ChallengeSubscriptionCloseOutput{} }
func (m *ChallengeSubscriptionCloseOutput) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionCloseOutput) ProtoMessage()    {}
func (*ChallengeSubscriptionCloseOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{13}
}
func (m *ChallengeSubscriptionCloseOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionCloseOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionCloseOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionCloseOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionCloseOutput.Merge(m, src)
}
func (m *ChallengeSubscriptionCloseOutput) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionCloseOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionCloseOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionCloseOutput proto.InternalMessageInfo

func (m *ChallengeSubscriptionCloseOutput) GetChallengeSubscription() *pwdb.ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscription
	}
	return nil
}

type TeamListInput struct {
	SeasonID int64 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
}

func (m *TeamListInput) Reset()         { *m = TeamListInput{} }
func (m *TeamListInput) String() string { return proto.CompactTextString(m) }
func (*TeamListInput) ProtoMessage()    {}
func (*TeamListInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{14}
}
func (m *TeamListInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamListInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamListInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamListInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamListInput.Merge(m, src)
}
func (m *TeamListInput) XXX_Size() int {
	return m.Size()
}
func (m *TeamListInput) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamListInput.DiscardUnknown(m)
}

var xxx_messageInfo_TeamListInput proto.InternalMessageInfo

func (m *TeamListInput) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

type TeamListOutput struct {
	Items []*pwdb.Team `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *TeamListOutput) Reset()         { *m = TeamListOutput{} }
func (m *TeamListOutput) String() string { return proto.CompactTextString(m) }
func (*TeamListOutput) ProtoMessage()    {}
func (*TeamListOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{15}
}
func (m *TeamListOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamListOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamListOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamListOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamListOutput.Merge(m, src)
}
func (m *TeamListOutput) XXX_Size() int {
	return m.Size()
}
func (m *TeamListOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamListOutput.DiscardUnknown(m)
}

var xxx_messageInfo_TeamListOutput proto.InternalMessageInfo

func (m *TeamListOutput) GetItems() []*pwdb.Team {
	if m != nil {
		return m.Items
	}
	return nil
}

type UserSetPreferencesInput struct {
	ActiveSeasonID int64 `protobuf:"varint,1,opt,name=active_season_id,json=activeSeasonId,proto3" json:"active_season_id,omitempty"`
}

func (m *UserSetPreferencesInput) Reset()         { *m = UserSetPreferencesInput{} }
func (m *UserSetPreferencesInput) String() string { return proto.CompactTextString(m) }
func (*UserSetPreferencesInput) ProtoMessage()    {}
func (*UserSetPreferencesInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{16}
}
func (m *UserSetPreferencesInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSetPreferencesInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSetPreferencesInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSetPreferencesInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSetPreferencesInput.Merge(m, src)
}
func (m *UserSetPreferencesInput) XXX_Size() int {
	return m.Size()
}
func (m *UserSetPreferencesInput) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSetPreferencesInput.DiscardUnknown(m)
}

var xxx_messageInfo_UserSetPreferencesInput proto.InternalMessageInfo

func (m *UserSetPreferencesInput) GetActiveSeasonID() int64 {
	if m != nil {
		return m.ActiveSeasonID
	}
	return 0
}

type UserSetPreferencesOutput struct {
}

func (m *UserSetPreferencesOutput) Reset()         { *m = UserSetPreferencesOutput{} }
func (m *UserSetPreferencesOutput) String() string { return proto.CompactTextString(m) }
func (*UserSetPreferencesOutput) ProtoMessage()    {}
func (*UserSetPreferencesOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{17}
}
func (m *UserSetPreferencesOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSetPreferencesOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSetPreferencesOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSetPreferencesOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSetPreferencesOutput.Merge(m, src)
}
func (m *UserSetPreferencesOutput) XXX_Size() int {
	return m.Size()
}
func (m *UserSetPreferencesOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSetPreferencesOutput.DiscardUnknown(m)
}

var xxx_messageInfo_UserSetPreferencesOutput proto.InternalMessageInfo

type OrganizationListInput struct {
}

func (m *OrganizationListInput) Reset()         { *m = OrganizationListInput{} }
func (m *OrganizationListInput) String() string { return proto.CompactTextString(m) }
func (*OrganizationListInput) ProtoMessage()    {}
func (*OrganizationListInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{18}
}
func (m *OrganizationListInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationListInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationListInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationListInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationListInput.Merge(m, src)
}
func (m *OrganizationListInput) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationListInput) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationListInput.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationListInput proto.InternalMessageInfo

type OrganizationListOutput struct {
	Items []*pwdb.Organization `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *OrganizationListOutput) Reset()         { *m = OrganizationListOutput{} }
func (m *OrganizationListOutput) String() string { return proto.CompactTextString(m) }
func (*OrganizationListOutput) ProtoMessage()    {}
func (*OrganizationListOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{19}
}
func (m *OrganizationListOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationListOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationListOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationListOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationListOutput.Merge(m, src)
}
func (m *OrganizationListOutput) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationListOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationListOutput.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationListOutput proto.InternalMessageInfo

func (m *OrganizationListOutput) GetItems() []*pwdb.Organization {
	if m != nil {
		return m.Items
	}
	return nil
}

type ChallengeListInput struct {
}

func (m *ChallengeListInput) Reset()         { *m = ChallengeListInput{} }
func (m *ChallengeListInput) String() string { return proto.CompactTextString(m) }
func (*ChallengeListInput) ProtoMessage()    {}
func (*ChallengeListInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{20}
}
func (m *ChallengeListInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeListInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeListInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeListInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeListInput.Merge(m, src)
}
func (m *ChallengeListInput) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeListInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeListInput.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeListInput proto.InternalMessageInfo

type ChallengeListOutput struct {
	Items []*pwdb.Challenge `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ChallengeListOutput) Reset()         { *m = ChallengeListOutput{} }
func (m *ChallengeListOutput) String() string { return proto.CompactTextString(m) }
func (*ChallengeListOutput) ProtoMessage()    {}
func (*ChallengeListOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{21}
}
func (m *ChallengeListOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeListOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeListOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeListOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeListOutput.Merge(m, src)
}
func (m *ChallengeListOutput) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeListOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeListOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeListOutput proto.InternalMessageInfo

func (m *ChallengeListOutput) GetItems() []*pwdb.Challenge {
	if m != nil {
		return m.Items
	}
	return nil
}

type UserGetSessionInput struct {
}

func (m *UserGetSessionInput) Reset()         { *m = UserGetSessionInput{} }
func (m *UserGetSessionInput) String() string { return proto.CompactTextString(m) }
func (*UserGetSessionInput) ProtoMessage()    {}
func (*UserGetSessionInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{22}
}
func (m *UserGetSessionInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetSessionInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetSessionInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGetSessionInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetSessionInput.Merge(m, src)
}
func (m *UserGetSessionInput) XXX_Size() int {
	return m.Size()
}
func (m *UserGetSessionInput) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetSessionInput.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetSessionInput proto.InternalMessageInfo

type UserGetSessionOutput struct {
	User          *pwdb.User                            `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	IsNewUser     bool                                  `protobuf:"varint,2,opt,name=is_new_user,json=isNewUser,proto3" json:"is_new_user,omitempty"`
	Claims        *pwsso.Claims                         `protobuf:"bytes,3,opt,name=claims,proto3" json:"claims,omitempty"`
	Notifications int32                                 `protobuf:"varint,4,opt,name=notifications,proto3" json:"notifications,omitempty"`
	Seasons       []*UserGetSessionOutput_SeasonAndTeam `protobuf:"bytes,5,rep,name=seasons,proto3" json:"seasons,omitempty"`
}

func (m *UserGetSessionOutput) Reset()         { *m = UserGetSessionOutput{} }
func (m *UserGetSessionOutput) String() string { return proto.CompactTextString(m) }
func (*UserGetSessionOutput) ProtoMessage()    {}
func (*UserGetSessionOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{23}
}
func (m *UserGetSessionOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetSessionOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetSessionOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGetSessionOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetSessionOutput.Merge(m, src)
}
func (m *UserGetSessionOutput) XXX_Size() int {
	return m.Size()
}
func (m *UserGetSessionOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetSessionOutput.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetSessionOutput proto.InternalMessageInfo

func (m *UserGetSessionOutput) GetUser() *pwdb.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserGetSessionOutput) GetIsNewUser() bool {
	if m != nil {
		return m.IsNewUser
	}
	return false
}

func (m *UserGetSessionOutput) GetClaims() *pwsso.Claims {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *UserGetSessionOutput) GetNotifications() int32 {
	if m != nil {
		return m.Notifications
	}
	return 0
}

func (m *UserGetSessionOutput) GetSeasons() []*UserGetSessionOutput_SeasonAndTeam {
	if m != nil {
		return m.Seasons
	}
	return nil
}

type UserGetSessionOutput_SeasonAndTeam struct {
	Season   *pwdb.Season `protobuf:"bytes,1,opt,name=season,proto3" json:"season,omitempty"`
	Team     *pwdb.Team   `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	IsActive bool         `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *UserGetSessionOutput_SeasonAndTeam) Reset()         { *m = UserGetSessionOutput_SeasonAndTeam{} }
func (m *UserGetSessionOutput_SeasonAndTeam) String() string { return proto.CompactTextString(m) }
func (*UserGetSessionOutput_SeasonAndTeam) ProtoMessage()    {}
func (*UserGetSessionOutput_SeasonAndTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{23, 0}
}
func (m *UserGetSessionOutput_SeasonAndTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetSessionOutput_SeasonAndTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetSessionOutput_SeasonAndTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGetSessionOutput_SeasonAndTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetSessionOutput_SeasonAndTeam.Merge(m, src)
}
func (m *UserGetSessionOutput_SeasonAndTeam) XXX_Size() int {
	return m.Size()
}
func (m *UserGetSessionOutput_SeasonAndTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetSessionOutput_SeasonAndTeam.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetSessionOutput_SeasonAndTeam proto.InternalMessageInfo

func (m *UserGetSessionOutput_SeasonAndTeam) GetSeason() *pwdb.Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *UserGetSessionOutput_SeasonAndTeam) GetTeam() *pwdb.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *UserGetSessionOutput_SeasonAndTeam) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type Status struct {
	EverythingIsOK bool `protobuf:"varint,1,opt,name=everything_is_ok,json=everythingIsOk,proto3" json:"everything_is_ok,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{24}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetEverythingIsOK() bool {
	if m != nil {
		return m.EverythingIsOK
	}
	return false
}

type Info struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Uptime  int32  `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Commit  string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	BuiltAt string `protobuf:"bytes,4,opt,name=built_at,json=builtAt,proto3" json:"built_at,omitempty"`
	BuiltBy string `protobuf:"bytes,5,opt,name=built_by,json=builtBy,proto3" json:"built_by,omitempty"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{25}
}
func (m *Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(m, src)
}
func (m *Info) XXX_Size() int {
	return m.Size()
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Info) GetUptime() int32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Info) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *Info) GetBuiltAt() string {
	if m != nil {
		return m.BuiltAt
	}
	return ""
}

func (m *Info) GetBuiltBy() string {
	if m != nil {
		return m.BuiltBy
	}
	return ""
}

// Void is an empty message
type Void struct {
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{26}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Void.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return m.Size()
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TeamGetInput)(nil), "pathwar.engine.TeamGetInput")
	proto.RegisterType((*TeamGetOutput)(nil), "pathwar.engine.TeamGetOutput")
	proto.RegisterType((*SeasonChallengeListInput)(nil), "pathwar.engine.SeasonChallengeListInput")
	proto.RegisterType((*SeasonChallengeListOutput)(nil), "pathwar.engine.SeasonChallengeListOutput")
	proto.RegisterType((*SeasonChallengeGetInput)(nil), "pathwar.engine.SeasonChallengeGetInput")
	proto.RegisterType((*SeasonChallengeGetOutput)(nil), "pathwar.engine.SeasonChallengeGetOutput")
	proto.RegisterType((*ChallengeGetInput)(nil), "pathwar.engine.ChallengeGetInput")
	proto.RegisterType((*ChallengeGetOutput)(nil), "pathwar.engine.ChallengeGetOutput")
	proto.RegisterType((*SeasonChallengeBuyInput)(nil), "pathwar.engine.SeasonChallengeBuyInput")
	proto.RegisterType((*SeasonChallengeBuyOutput)(nil), "pathwar.engine.SeasonChallengeBuyOutput")
	proto.RegisterType((*ChallengeSubscriptionValidateInput)(nil), "pathwar.engine.ChallengeSubscriptionValidateInput")
	proto.RegisterType((*ChallengeSubscriptionValidateOutput)(nil), "pathwar.engine.ChallengeSubscriptionValidateOutput")
	proto.RegisterType((*ChallengeSubscriptionCloseInput)(nil), "pathwar.engine.ChallengeSubscriptionCloseInput")
	proto.RegisterType((*ChallengeSubscriptionCloseOutput)(nil), "pathwar.engine.ChallengeSubscriptionCloseOutput")
	proto.RegisterType((*TeamListInput)(nil), "pathwar.engine.TeamListInput")
	proto.RegisterType((*TeamListOutput)(nil), "pathwar.engine.TeamListOutput")
	proto.RegisterType((*UserSetPreferencesInput)(nil), "pathwar.engine.UserSetPreferencesInput")
	proto.RegisterType((*UserSetPreferencesOutput)(nil), "pathwar.engine.UserSetPreferencesOutput")
	proto.RegisterType((*OrganizationListInput)(nil), "pathwar.engine.OrganizationListInput")
	proto.RegisterType((*OrganizationListOutput)(nil), "pathwar.engine.OrganizationListOutput")
	proto.RegisterType((*ChallengeListInput)(nil), "pathwar.engine.ChallengeListInput")
	proto.RegisterType((*ChallengeListOutput)(nil), "pathwar.engine.ChallengeListOutput")
	proto.RegisterType((*UserGetSessionInput)(nil), "pathwar.engine.UserGetSessionInput")
	proto.RegisterType((*UserGetSessionOutput)(nil), "pathwar.engine.UserGetSessionOutput")
	proto.RegisterType((*UserGetSessionOutput_SeasonAndTeam)(nil), "pathwar.engine.UserGetSessionOutput.SeasonAndTeam")
	proto.RegisterType((*Status)(nil), "pathwar.engine.Status")
	proto.RegisterType((*Info)(nil), "pathwar.engine.Info")
	proto.RegisterType((*Void)(nil), "pathwar.engine.Void")
}

func init() { proto.RegisterFile("pwengine.proto", fileDescriptor_02cf22bbbf1a21c2) }

var fileDescriptor_02cf22bbbf1a21c2 = []byte{
	// 1801 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x6f, 0xe3, 0xc6,
	0x15, 0x37, 0x65, 0x5b, 0x96, 0x9e, 0x2d, 0xd9, 0x1e, 0xf9, 0x43, 0xcb, 0xdd, 0x95, 0x18, 0xee,
	0x36, 0xf5, 0x3a, 0x90, 0xe8, 0x68, 0xb7, 0xc0, 0xc2, 0x2d, 0xd0, 0x4a, 0x6b, 0xc7, 0x11, 0xbc,
	0x89, 0x0d, 0x7a, 0xb3, 0xf9, 0xb8, 0xb8, 0x23, 0x6a, 0x2c, 0xb1, 0x96, 0x48, 0x96, 0x33, 0xb4,
	0xaa, 0xf4, 0xe3, 0x10, 0x20, 0x41, 0x8f, 0x45, 0x7a, 0x2b, 0xfa, 0x07, 0xf4, 0xd0, 0x7b, 0xef,
	0x3d, 0xf5, 0x18, 0xa0, 0x97, 0x9e, 0x8c, 0x42, 0xdb, 0xff, 0xa1, 0xa7, 0x02, 0x05, 0x87, 0x43,
	0x89, 0x92, 0x28, 0xdb, 0x29, 0x9a, 0x93, 0x35, 0xf3, 0x7e, 0xef, 0xf7, 0x7e, 0xef, 0xcd, 0xd7,
	0x33, 0x21, 0xeb, 0xf4, 0x88, 0xd5, 0x32, 0x2d, 0x52, 0x76, 0x5c, 0x9b, 0xd9, 0x28, 0xeb, 0x60,
	0xd6, 0xee, 0x61, 0xb7, 0x1c, 0xcc, 0xca, 0x0f, 0x5a, 0xb6, 0xdd, 0xea, 0x10, 0x0d, 0x3b, 0xa6,
	0x86, 0x2d, 0xcb, 0x66, 0x98, 0x99, 0xb6, 0x45, 0x03, 0xb4, 0x5c, 0x6a, 0x99, 0xac, 0xed, 0x35,
	0xca, 0x86, 0xdd, 0xd5, 0x5a, 0x76, 0xcb, 0xd6, 0xf8, 0x74, 0xc3, 0xbb, 0xe0, 0x23, 0x3e, 0xe0,
	0xbf, 0x04, 0xfc, 0x2c, 0x0a, 0x77, 0x1d, 0xa3, 0x44, 0x0c, 0x9b, 0xf6, 0x29, 0x23, 0x62, 0xd8,
	0xc2, 0x8c, 0xf4, 0x70, 0x3f, 0x60, 0x31, 0x4a, 0x2d, 0x62, 0x95, 0x68, 0x0f, 0xb7, 0x5a, 0xc4,
	0xd5, 0x6c, 0x87, 0xc7, 0x8d, 0xd1, 0xb0, 0xec, 0xf4, 0x28, 0x0d, 0x23, 0x80, 0xd3, 0x6b, 0x36,
	0x82, 0xdf, 0xea, 0x53, 0x58, 0x79, 0x45, 0x70, 0xf7, 0x88, 0xb0, 0xba, 0xe5, 0x78, 0x0c, 0x3d,
	0x82, 0x25, 0x46, 0x70, 0xf7, 0xdc, 0x6c, 0xe6, 0x25, 0x45, 0xda, 0x99, 0xaf, 0xc1, 0xe0, 0xba,
	0x98, 0xf4, 0x21, 0xf5, 0x03, 0x3d, 0xe9, 0x9b, 0xea, 0x4d, 0xf5, 0x07, 0x90, 0x11, 0x4e, 0x27,
	0x1e, 0xf3, 0xbd, 0x1e, 0xc3, 0x82, 0xc9, 0x48, 0x97, 0xbb, 0x2c, 0x57, 0xd6, 0xca, 0x61, 0x7d,
	0x9a, 0x8d, 0xb2, 0x0f, 0xd4, 0xb9, 0x55, 0x3d, 0x84, 0xfc, 0x19, 0xc1, 0xd4, 0xb6, 0x5e, 0xb4,
	0x71, 0xa7, 0x43, 0xac, 0x16, 0x79, 0x69, 0x52, 0x11, 0xf7, 0x09, 0xa4, 0x29, 0xb7, 0x8d, 0x22,
	0xaf, 0x0c, 0xae, 0x8b, 0xa9, 0xc0, 0xa1, 0x7e, 0xa0, 0xa7, 0x02, 0x73, 0xbd, 0xa9, 0x7e, 0x08,
	0xf7, 0x62, 0x68, 0x84, 0x92, 0x77, 0x61, 0xd1, 0x8f, 0x45, 0xf3, 0x92, 0x32, 0xbf, 0xb3, 0x5c,
	0xb9, 0x1f, 0x95, 0x32, 0xe1, 0xa5, 0x07, 0x48, 0xf5, 0xa7, 0xb0, 0x3d, 0x61, 0x19, 0x56, 0xe3,
	0x10, 0x72, 0x42, 0x95, 0x11, 0xda, 0x46, 0xfa, 0x36, 0x07, 0xd7, 0xc5, 0xf5, 0x09, 0xcf, 0xfa,
	0x81, 0xbe, 0x4e, 0x27, 0xa6, 0x9a, 0xea, 0xf1, 0x54, 0xe2, 0xa3, 0xd2, 0x69, 0x63, 0xa5, 0xbb,
	0x51, 0x6f, 0x50, 0xc5, 0x23, 0x58, 0x9f, 0x16, 0x5a, 0x81, 0x95, 0x18, 0x85, 0xab, 0x83, 0xeb,
	0xe2, 0x72, 0x54, 0xdb, 0xb2, 0x11, 0x51, 0xf5, 0x63, 0x40, 0x31, 0x7a, 0x9e, 0x8c, 0xe9, 0xd9,
	0x8c, 0xea, 0x99, 0x54, 0xf2, 0xa5, 0x34, 0x55, 0xb9, 0x9a, 0xd7, 0xff, 0x7f, 0x56, 0x2e, 0xba,
	0x1d, 0x13, 0x33, 0xb7, 0x23, 0x9b, 0x2a, 0x6f, 0xcd, 0xeb, 0x8b, 0x74, 0x3e, 0x81, 0xad, 0x91,
	0x00, 0xea, 0x35, 0xa8, 0xe1, 0x9a, 0xfc, 0x94, 0x88, 0x04, 0xdf, 0x8a, 0x4d, 0xf0, 0x2c, 0x02,
	0xd4, 0x37, 0x8d, 0xb8, 0x69, 0xf5, 0x2f, 0x12, 0xa8, 0xb1, 0x0e, 0xaf, 0x71, 0xc7, 0x6c, 0x62,
	0x46, 0x82, 0x42, 0x7c, 0x0c, 0xf7, 0xe2, 0x05, 0x8c, 0xca, 0x71, 0x7f, 0x70, 0x5d, 0xdc, 0x8e,
	0xa5, 0xaa, 0x1f, 0xe8, 0xdb, 0xb1, 0xd1, 0xeb, 0x4d, 0x54, 0x00, 0x70, 0x30, 0xa5, 0x4e, 0xdb,
	0xc5, 0x94, 0xf0, 0xea, 0xa4, 0xf5, 0xc8, 0x0c, 0xca, 0xc3, 0x92, 0x61, 0x77, 0xbb, 0xc4, 0x62,
	0xf9, 0x79, 0x6e, 0x0c, 0x87, 0x6a, 0x1f, 0x1e, 0xdd, 0x28, 0x5c, 0x94, 0x4e, 0x87, 0x8d, 0x91,
	0xf2, 0xab, 0xc0, 0x36, 0x2a, 0x5c, 0x31, 0xb6, 0x70, 0xaf, 0x87, 0x30, 0x3d, 0x67, 0x4c, 0x4f,
	0xaa, 0x9f, 0x43, 0x31, 0x36, 0xf4, 0x8b, 0x8e, 0x4d, 0xbf, 0xe3, 0x82, 0xa9, 0xbf, 0x02, 0x65,
	0x76, 0xec, 0xef, 0x7c, 0xbb, 0xec, 0x07, 0x77, 0xe6, 0xff, 0x74, 0xe3, 0x3d, 0x87, 0x6c, 0xe8,
	0x2b, 0x74, 0xbe, 0x3d, 0x7e, 0xcd, 0x4d, 0xdf, 0xb8, 0xe2, 0x6e, 0xfb, 0x18, 0xb6, 0x3f, 0xa2,
	0xc4, 0x3d, 0x23, 0xec, 0xd4, 0x25, 0x17, 0xc4, 0x25, 0x96, 0x41, 0x68, 0x10, 0xff, 0x47, 0xb0,
	0x86, 0x0d, 0x66, 0x5e, 0x91, 0xf3, 0x49, 0x19, 0x68, 0x70, 0x5d, 0xcc, 0x56, 0xb9, 0x6d, 0x28,
	0x26, 0x8b, 0xa3, 0xe3, 0xa6, 0x2a, 0x43, 0x7e, 0x9a, 0x38, 0x10, 0xa7, 0x6e, 0xc3, 0xe6, 0x89,
	0xdb, 0xc2, 0x96, 0xf9, 0x39, 0x5f, 0xf4, 0x61, 0xca, 0xea, 0xfb, 0xb0, 0x35, 0x69, 0x10, 0xf9,
	0x94, 0xc7, 0xf3, 0xc9, 0x47, 0xf3, 0x89, 0xba, 0x84, 0x79, 0x6d, 0x44, 0xee, 0xae, 0x11, 0x7f,
	0x0d, 0x72, 0x71, 0x6f, 0xc2, 0x3b, 0xe3, 0xe4, 0x33, 0xee, 0x34, 0xc1, 0xbc, 0x09, 0x39, 0x3f,
	0xb1, 0x23, 0xc2, 0xce, 0x08, 0xa5, 0xfe, 0xce, 0xe1, 0xd4, 0xff, 0x49, 0xc0, 0xc6, 0xf8, 0xfc,
	0xe8, 0xe9, 0xf3, 0x28, 0x71, 0xe3, 0x9e, 0x3e, 0x1f, 0xaf, 0x73, 0x2b, 0x2a, 0xc0, 0xb2, 0x49,
	0xcf, 0x2d, 0xd2, 0x3b, 0xe7, 0x60, 0xff, 0xb4, 0xa6, 0xf4, 0xb4, 0x49, 0x3f, 0x24, 0x3d, 0x1f,
	0x85, 0xde, 0x81, 0xa4, 0xd1, 0xc1, 0x66, 0x97, 0xf2, 0xb3, 0xba, 0x5c, 0xc9, 0x0d, 0x79, 0xfc,
	0x67, 0xfb, 0x05, 0x37, 0xe9, 0x02, 0x82, 0x1e, 0x43, 0xc6, 0xb2, 0x99, 0x79, 0x61, 0x1a, 0xc1,
	0x1b, 0x9f, 0x5f, 0x50, 0xa4, 0x9d, 0x45, 0x7d, 0x7c, 0x12, 0xbd, 0x84, 0xa5, 0x60, 0x61, 0x69,
	0x7e, 0x91, 0xe7, 0x5d, 0x29, 0x8f, 0xb7, 0x2d, 0xe5, 0xb8, 0x7c, 0xc4, 0xa3, 0x53, 0xb5, 0x9a,
	0x7c, 0x1b, 0x85, 0x14, 0xf2, 0x6f, 0x20, 0x33, 0x66, 0x41, 0xbb, 0x90, 0x0c, 0x6c, 0x22, 0x73,
	0x34, 0xfd, 0x72, 0xe9, 0x02, 0xe1, 0xd7, 0xc8, 0xbf, 0xaa, 0x79, 0xda, 0xb1, 0xed, 0x81, 0x6f,
	0x45, 0xf7, 0x21, 0x6d, 0xd2, 0xf3, 0x60, 0x9f, 0xf1, 0x32, 0xa4, 0xf4, 0x94, 0x49, 0x83, 0x7d,
	0xa8, 0xbe, 0x07, 0xc9, 0x33, 0x86, 0x99, 0x47, 0xfd, 0x7d, 0x4b, 0xae, 0x88, 0xdb, 0x67, 0x6d,
	0xd3, 0x6a, 0x9d, 0x9b, 0xf4, 0xdc, 0xbe, 0xe4, 0x12, 0x52, 0xc1, 0xbe, 0x3d, 0x1c, 0xda, 0xea,
	0xf4, 0xe4, 0x58, 0xcf, 0x92, 0xe8, 0xf8, 0x52, 0xfd, 0x4a, 0x82, 0x85, 0xba, 0x75, 0x61, 0xfb,
	0xd7, 0xe3, 0x15, 0x71, 0x69, 0x78, 0xb4, 0xd3, 0x7a, 0x38, 0x44, 0x5b, 0x90, 0xf4, 0x1c, 0x66,
	0x76, 0x83, 0x4b, 0x75, 0x51, 0x17, 0x23, 0x7f, 0xde, 0xbf, 0x41, 0xcd, 0xf0, 0x3e, 0x15, 0x23,
	0x74, 0x0f, 0x52, 0x0d, 0xcf, 0xec, 0xb0, 0x73, 0xcc, 0xf8, 0x4a, 0xa4, 0xf5, 0x25, 0x3e, 0xae,
	0x46, 0x4c, 0x8d, 0x7e, 0x7e, 0x31, 0x62, 0xaa, 0xf5, 0xd5, 0x75, 0x58, 0x78, 0x6d, 0x9b, 0xcd,
	0xfd, 0xf4, 0xd7, 0xd5, 0x64, 0x65, 0x01, 0x25, 0x7e, 0xf9, 0xeb, 0xca, 0xbf, 0xb3, 0x90, 0x3c,
	0xe4, 0x4b, 0x83, 0x5c, 0xc8, 0x8e, 0xaf, 0x0e, 0x7a, 0x74, 0xf3, 0xea, 0xf1, 0x5d, 0x2a, 0x3f,
	0xbe, 0xcb, 0x12, 0xab, 0x9b, 0x5f, 0xfc, 0xfd, 0x5f, 0xbf, 0x4f, 0xac, 0xa2, 0x8c, 0xe6, 0x6f,
	0x46, 0x8d, 0x8a, 0x08, 0x5f, 0x4a, 0x80, 0xa6, 0xcf, 0x34, 0xfa, 0x7e, 0x1c, 0x67, 0xcc, 0x85,
	0x22, 0xef, 0xdc, 0x0e, 0x14, 0x02, 0x1e, 0x70, 0x01, 0x5b, 0xea, 0x7a, 0x20, 0xc0, 0x19, 0x01,
	0xf6, 0xa5, 0x5d, 0xd4, 0x85, 0xcc, 0xd8, 0x29, 0x46, 0xea, 0x24, 0xf1, 0xf4, 0xd1, 0x97, 0x1f,
	0xdd, 0x88, 0x11, 0x71, 0x73, 0x3c, 0x6e, 0x06, 0x2d, 0x6b, 0xc3, 0x3b, 0x9a, 0x22, 0x13, 0x56,
	0xa2, 0x6d, 0x10, 0x7a, 0x6b, 0x26, 0x53, 0xd8, 0x6d, 0xc9, 0xea, 0x4d, 0x10, 0x11, 0x0b, 0xf1,
	0x58, 0x2b, 0x08, 0x46, 0xb1, 0xd0, 0x57, 0x12, 0xe4, 0x62, 0x5a, 0x57, 0x34, 0x55, 0xb9, 0x59,
	0x6d, 0xb2, 0xfc, 0xe4, 0x0e, 0x48, 0x21, 0x40, 0xe6, 0x02, 0x36, 0x10, 0xd2, 0x82, 0x53, 0x58,
	0x8a, 0xe4, 0xfc, 0x85, 0x04, 0x68, 0xba, 0x23, 0x9d, 0x5e, 0xea, 0x19, 0x7d, 0xb1, 0xbc, 0x73,
	0x3b, 0x50, 0xa8, 0xb8, 0xc7, 0x55, 0xe4, 0xd0, 0xfa, 0x94, 0x8a, 0x38, 0x11, 0x35, 0xaf, 0x7f,
	0xab, 0x88, 0xb0, 0xc5, 0xbc, 0x55, 0xc4, 0xb0, 0x09, 0x0c, 0x45, 0xa8, 0xd9, 0xd1, 0x5a, 0x68,
	0x0d, 0xaf, 0xef, 0x6f, 0xb6, 0x3f, 0x49, 0xf0, 0xf0, 0xc6, 0x66, 0x08, 0x55, 0x66, 0x2e, 0xf6,
	0xcc, 0xa6, 0x4f, 0x7e, 0xfa, 0xad, 0x7c, 0x84, 0xca, 0x02, 0x57, 0x99, 0x57, 0x73, 0x11, 0x95,
	0xa2, 0xed, 0x22, 0xbe, 0xd4, 0x3f, 0x4a, 0x20, 0xcf, 0x6e, 0x60, 0x90, 0x76, 0xa7, 0x98, 0xa3,
	0x46, 0x4b, 0xde, 0xbb, 0xbb, 0x83, 0x50, 0x78, 0x9f, 0x2b, 0xdc, 0x54, 0xd7, 0x22, 0x0a, 0x0d,
	0xdf, 0xee, 0xcb, 0xeb, 0xc3, 0xda, 0xe4, 0xe3, 0x8e, 0xbe, 0x37, 0x19, 0x22, 0xb6, 0x2f, 0x90,
	0xdf, 0xbe, 0x0d, 0x26, 0xe2, 0x6f, 0xf1, 0xf8, 0x6b, 0x28, 0xab, 0xd9, 0x11, 0x00, 0x45, 0x9f,
	0x42, 0x2a, 0xec, 0x8f, 0xd0, 0xc3, 0x49, 0xae, 0xb1, 0xae, 0x4b, 0x2e, 0xcc, 0x32, 0x8b, 0x10,
	0x59, 0x1e, 0x22, 0x85, 0x92, 0x9a, 0xff, 0x26, 0x51, 0xf4, 0x11, 0x2c, 0x89, 0x7f, 0x75, 0xd1,
	0x83, 0x38, 0xd7, 0xe1, 0x91, 0x78, 0x38, 0xc3, 0x2a, 0x78, 0x33, 0x9c, 0x77, 0x09, 0x2d, 0x72,
	0x5e, 0x74, 0x08, 0xa9, 0x57, 0xb6, 0xdd, 0x39, 0x35, 0xad, 0x16, 0xda, 0x98, 0xf4, 0xf4, 0xdf,
	0x05, 0x39, 0x76, 0x36, 0x42, 0xe3, 0xf8, 0xae, 0xc7, 0x00, 0x3e, 0x8d, 0x78, 0x19, 0xe3, 0x89,
	0xb6, 0xa6, 0x8e, 0x09, 0x47, 0xab, 0xab, 0x9c, 0x2a, 0x8d, 0x96, 0x34, 0x1a, 0xb8, 0x0b, 0x4d,
	0xfc, 0x75, 0xbc, 0xa3, 0x26, 0x1f, 0x1b, 0xd1, 0x64, 0xfa, 0xae, 0x4d, 0xd8, 0xf0, 0x69, 0x8e,
	0x88, 0x45, 0x5c, 0xcc, 0xc8, 0x7b, 0xf8, 0x92, 0x1c, 0x60, 0x86, 0xbf, 0x55, 0x9a, 0x0a, 0xa7,
	0x94, 0xd5, 0xbc, 0xc6, 0x6c, 0xbb, 0xa3, 0xb5, 0x04, 0x57, 0xe9, 0x02, 0x5f, 0x92, 0x52, 0xd3,
	0x67, 0x7b, 0x19, 0x64, 0x7e, 0x50, 0x3b, 0xf0, 0xba, 0xce, 0x0c, 0xee, 0xb1, 0x46, 0xc3, 0xc7,
	0x45, 0x36, 0x10, 0xe7, 0xa5, 0x3f, 0xef, 0x94, 0x9a, 0x5e, 0xd7, 0xa9, 0xfd, 0x75, 0xe1, 0xeb,
	0xea, 0x6f, 0x17, 0xd0, 0x9f, 0x25, 0x58, 0x3e, 0x0d, 0x5c, 0x94, 0xea, 0x69, 0x5d, 0x3d, 0x82,
	0x4c, 0x38, 0x3c, 0x63, 0xf8, 0xe2, 0x02, 0xa9, 0x6d, 0xc6, 0x1c, 0xba, 0xaf, 0x69, 0x91, 0x6f,
	0x34, 0x22, 0x46, 0xf8, 0x57, 0x46, 0xd4, 0x87, 0xfe, 0x24, 0x0c, 0xdd, 0xc1, 0x56, 0x73, 0xf7,
	0x04, 0x72, 0x3b, 0x55, 0x07, 0x1b, 0x6d, 0x52, 0xaa, 0x94, 0xf7, 0x94, 0x13, 0x5d, 0xf9, 0xa0,
	0xfe, 0xea, 0x09, 0x7a, 0x7e, 0x3b, 0x9d, 0xd6, 0xe8, 0xd8, 0x0d, 0xad, 0x8b, 0x29, 0x23, 0xae,
	0xf6, 0xe2, 0xe4, 0xf4, 0x53, 0xbd, 0x7e, 0xf4, 0xfe, 0xab, 0xca, 0xfc, 0xbb, 0xe5, 0x3d, 0x79,
	0x0d, 0x3b, 0x66, 0x39, 0x1a, 0x47, 0x95, 0xb4, 0xdd, 0x44, 0x62, 0xa1, 0xb2, 0x86, 0x1d, 0xa7,
	0x23, 0x1a, 0x41, 0xed, 0x67, 0xd4, 0xb6, 0xf6, 0xa7, 0x66, 0xf4, 0x53, 0x98, 0x7f, 0xb6, 0xf7,
	0x14, 0xd5, 0xe1, 0x48, 0x27, 0xcc, 0x73, 0x2d, 0xd2, 0x54, 0x7a, 0x6d, 0x62, 0x29, 0xac, 0x4d,
	0x14, 0xff, 0x55, 0x56, 0x9a, 0x36, 0xa1, 0x8a, 0x65, 0x33, 0xa5, 0x8d, 0xaf, 0x88, 0xe2, 0x10,
	0xb7, 0x6b, 0xf2, 0x3e, 0x41, 0x61, 0xb6, 0x82, 0x0d, 0x83, 0x50, 0xca, 0xb1, 0x2e, 0xa1, 0xb6,
	0xe7, 0x1a, 0xa4, 0xac, 0xff, 0xd0, 0x67, 0x7c, 0x86, 0x9e, 0xc1, 0xee, 0x34, 0x63, 0x88, 0x1a,
	0xb1, 0x92, 0x5f, 0x98, 0x94, 0x95, 0x51, 0x12, 0x16, 0xfe, 0x90, 0x90, 0x96, 0x3e, 0xdb, 0x83,
	0x55, 0x48, 0xd7, 0x30, 0x35, 0x8d, 0xaa, 0xc7, 0xda, 0x28, 0x91, 0x92, 0xe0, 0x21, 0x40, 0xd5,
	0x31, 0x8f, 0x49, 0x9f, 0xcf, 0xac, 0xa6, 0x12, 0x72, 0xfa, 0x93, 0x52, 0xf5, 0xb4, 0x5e, 0x3a,
	0x26, 0x7d, 0x25, 0xd1, 0x28, 0x42, 0x26, 0xea, 0x31, 0x07, 0xd9, 0x31, 0xfc, 0x9c, 0xfb, 0x1c,
	0xd0, 0x07, 0xb6, 0x4b, 0x14, 0xdc, 0xb0, 0x3d, 0xa6, 0x88, 0x85, 0xbc, 0xcb, 0x12, 0xfe, 0x6d,
	0x50, 0x90, 0xbe, 0x19, 0x14, 0xa4, 0x7f, 0x0e, 0x0a, 0xd2, 0xef, 0xde, 0x14, 0xe6, 0xbe, 0x79,
	0x53, 0x98, 0xfb, 0xc7, 0x9b, 0xc2, 0xdc, 0x67, 0x0f, 0xa2, 0xc5, 0xd6, 0x5a, 0xb6, 0xe6, 0x5c,
	0xb6, 0xb4, 0xf0, 0xdb, 0x60, 0x23, 0xc9, 0xbf, 0xa8, 0x3d, 0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xa4, 0x27, 0x16, 0x8c, 0x2e, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EngineClient is the client API for Engine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EngineClient interface {
	UserGetSession(ctx context.Context, in *UserGetSessionInput, opts ...grpc.CallOption) (*UserGetSessionOutput, error)
	UserSetPreferences(ctx context.Context, in *UserSetPreferencesInput, opts ...grpc.CallOption) (*UserSetPreferencesOutput, error)
	ChallengeList(ctx context.Context, in *ChallengeListInput, opts ...grpc.CallOption) (*ChallengeListOutput, error)
	ChallengeGet(ctx context.Context, in *ChallengeGetInput, opts ...grpc.CallOption) (*ChallengeGetOutput, error)
	SeasonChallengeList(ctx context.Context, in *SeasonChallengeListInput, opts ...grpc.CallOption) (*SeasonChallengeListOutput, error)
	SeasonChallengeGet(ctx context.Context, in *SeasonChallengeGetInput, opts ...grpc.CallOption) (*SeasonChallengeGetOutput, error)
	SeasonChallengeBuy(ctx context.Context, in *SeasonChallengeBuyInput, opts ...grpc.CallOption) (*SeasonChallengeBuyOutput, error)
	ChallengeSubscriptionValidate(ctx context.Context, in *ChallengeSubscriptionValidateInput, opts ...grpc.CallOption) (*ChallengeSubscriptionValidateOutput, error)
	ChallengeSubscriptionClose(ctx context.Context, in *ChallengeSubscriptionCloseInput, opts ...grpc.CallOption) (*ChallengeSubscriptionCloseOutput, error)
	OrganizationList(ctx context.Context, in *OrganizationListInput, opts ...grpc.CallOption) (*OrganizationListOutput, error)
	TeamList(ctx context.Context, in *TeamListInput, opts ...grpc.CallOption) (*TeamListOutput, error)
	TeamGet(ctx context.Context, in *TeamGetInput, opts ...grpc.CallOption) (*TeamGetOutput, error)
	ToolPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	ToolStatus(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Status, error)
	ToolInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Info, error)
	ToolGenerateFakeData(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	ToolDBDump(ctx context.Context, in *Void, opts ...grpc.CallOption) (*pwdb.Dump, error)
}

type engineClient struct {
	cc *grpc.ClientConn
}

func NewEngineClient(cc *grpc.ClientConn) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) UserGetSession(ctx context.Context, in *UserGetSessionInput, opts ...grpc.CallOption) (*UserGetSessionOutput, error) {
	out := new(UserGetSessionOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/UserGetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) UserSetPreferences(ctx context.Context, in *UserSetPreferencesInput, opts ...grpc.CallOption) (*UserSetPreferencesOutput, error) {
	out := new(UserSetPreferencesOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/UserSetPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ChallengeList(ctx context.Context, in *ChallengeListInput, opts ...grpc.CallOption) (*ChallengeListOutput, error) {
	out := new(ChallengeListOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ChallengeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ChallengeGet(ctx context.Context, in *ChallengeGetInput, opts ...grpc.CallOption) (*ChallengeGetOutput, error) {
	out := new(ChallengeGetOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ChallengeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) SeasonChallengeList(ctx context.Context, in *SeasonChallengeListInput, opts ...grpc.CallOption) (*SeasonChallengeListOutput, error) {
	out := new(SeasonChallengeListOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/SeasonChallengeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) SeasonChallengeGet(ctx context.Context, in *SeasonChallengeGetInput, opts ...grpc.CallOption) (*SeasonChallengeGetOutput, error) {
	out := new(SeasonChallengeGetOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/SeasonChallengeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) SeasonChallengeBuy(ctx context.Context, in *SeasonChallengeBuyInput, opts ...grpc.CallOption) (*SeasonChallengeBuyOutput, error) {
	out := new(SeasonChallengeBuyOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/SeasonChallengeBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ChallengeSubscriptionValidate(ctx context.Context, in *ChallengeSubscriptionValidateInput, opts ...grpc.CallOption) (*ChallengeSubscriptionValidateOutput, error) {
	out := new(ChallengeSubscriptionValidateOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ChallengeSubscriptionValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ChallengeSubscriptionClose(ctx context.Context, in *ChallengeSubscriptionCloseInput, opts ...grpc.CallOption) (*ChallengeSubscriptionCloseOutput, error) {
	out := new(ChallengeSubscriptionCloseOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ChallengeSubscriptionClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) OrganizationList(ctx context.Context, in *OrganizationListInput, opts ...grpc.CallOption) (*OrganizationListOutput, error) {
	out := new(OrganizationListOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/OrganizationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) TeamList(ctx context.Context, in *TeamListInput, opts ...grpc.CallOption) (*TeamListOutput, error) {
	out := new(TeamListOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/TeamList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) TeamGet(ctx context.Context, in *TeamGetInput, opts ...grpc.CallOption) (*TeamGetOutput, error) {
	out := new(TeamGetOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/TeamGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ToolPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ToolPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ToolStatus(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ToolStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ToolInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ToolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ToolGenerateFakeData(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ToolGenerateFakeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ToolDBDump(ctx context.Context, in *Void, opts ...grpc.CallOption) (*pwdb.Dump, error) {
	out := new(pwdb.Dump)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ToolDBDump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServer is the server API for Engine service.
type EngineServer interface {
	UserGetSession(context.Context, *UserGetSessionInput) (*UserGetSessionOutput, error)
	UserSetPreferences(context.Context, *UserSetPreferencesInput) (*UserSetPreferencesOutput, error)
	ChallengeList(context.Context, *ChallengeListInput) (*ChallengeListOutput, error)
	ChallengeGet(context.Context, *ChallengeGetInput) (*ChallengeGetOutput, error)
	SeasonChallengeList(context.Context, *SeasonChallengeListInput) (*SeasonChallengeListOutput, error)
	SeasonChallengeGet(context.Context, *SeasonChallengeGetInput) (*SeasonChallengeGetOutput, error)
	SeasonChallengeBuy(context.Context, *SeasonChallengeBuyInput) (*SeasonChallengeBuyOutput, error)
	ChallengeSubscriptionValidate(context.Context, *ChallengeSubscriptionValidateInput) (*ChallengeSubscriptionValidateOutput, error)
	ChallengeSubscriptionClose(context.Context, *ChallengeSubscriptionCloseInput) (*ChallengeSubscriptionCloseOutput, error)
	OrganizationList(context.Context, *OrganizationListInput) (*OrganizationListOutput, error)
	TeamList(context.Context, *TeamListInput) (*TeamListOutput, error)
	TeamGet(context.Context, *TeamGetInput) (*TeamGetOutput, error)
	ToolPing(context.Context, *Void) (*Void, error)
	ToolStatus(context.Context, *Void) (*Status, error)
	ToolInfo(context.Context, *Void) (*Info, error)
	ToolGenerateFakeData(context.Context, *Void) (*Void, error)
	ToolDBDump(context.Context, *Void) (*pwdb.Dump, error)
}

// UnimplementedEngineServer can be embedded to have forward compatible implementations.
type UnimplementedEngineServer struct {
}

func (*UnimplementedEngineServer) UserGetSession(ctx context.Context, req *UserGetSessionInput) (*UserGetSessionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetSession not implemented")
}
func (*UnimplementedEngineServer) UserSetPreferences(ctx context.Context, req *UserSetPreferencesInput) (*UserSetPreferencesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetPreferences not implemented")
}
func (*UnimplementedEngineServer) ChallengeList(ctx context.Context, req *ChallengeListInput) (*ChallengeListOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeList not implemented")
}
func (*UnimplementedEngineServer) ChallengeGet(ctx context.Context, req *ChallengeGetInput) (*ChallengeGetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeGet not implemented")
}
func (*UnimplementedEngineServer) SeasonChallengeList(ctx context.Context, req *SeasonChallengeListInput) (*SeasonChallengeListOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeasonChallengeList not implemented")
}
func (*UnimplementedEngineServer) SeasonChallengeGet(ctx context.Context, req *SeasonChallengeGetInput) (*SeasonChallengeGetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeasonChallengeGet not implemented")
}
func (*UnimplementedEngineServer) SeasonChallengeBuy(ctx context.Context, req *SeasonChallengeBuyInput) (*SeasonChallengeBuyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeasonChallengeBuy not implemented")
}
func (*UnimplementedEngineServer) ChallengeSubscriptionValidate(ctx context.Context, req *ChallengeSubscriptionValidateInput) (*ChallengeSubscriptionValidateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeSubscriptionValidate not implemented")
}
func (*UnimplementedEngineServer) ChallengeSubscriptionClose(ctx context.Context, req *ChallengeSubscriptionCloseInput) (*ChallengeSubscriptionCloseOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeSubscriptionClose not implemented")
}
func (*UnimplementedEngineServer) OrganizationList(ctx context.Context, req *OrganizationListInput) (*OrganizationListOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrganizationList not implemented")
}
func (*UnimplementedEngineServer) TeamList(ctx context.Context, req *TeamListInput) (*TeamListOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamList not implemented")
}
func (*UnimplementedEngineServer) TeamGet(ctx context.Context, req *TeamGetInput) (*TeamGetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamGet not implemented")
}
func (*UnimplementedEngineServer) ToolPing(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolPing not implemented")
}
func (*UnimplementedEngineServer) ToolStatus(ctx context.Context, req *Void) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolStatus not implemented")
}
func (*UnimplementedEngineServer) ToolInfo(ctx context.Context, req *Void) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolInfo not implemented")
}
func (*UnimplementedEngineServer) ToolGenerateFakeData(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolGenerateFakeData not implemented")
}
func (*UnimplementedEngineServer) ToolDBDump(ctx context.Context, req *Void) (*pwdb.Dump, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolDBDump not implemented")
}

func RegisterEngineServer(s *grpc.Server, srv EngineServer) {
	s.RegisterService(&_Engine_serviceDesc, srv)
}

func _Engine_UserGetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetSessionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).UserGetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/UserGetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).UserGetSession(ctx, req.(*UserGetSessionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_UserSetPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSetPreferencesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).UserSetPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/UserSetPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).UserSetPreferences(ctx, req.(*UserSetPreferencesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ChallengeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ChallengeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ChallengeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ChallengeList(ctx, req.(*ChallengeListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ChallengeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeGetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ChallengeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ChallengeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ChallengeGet(ctx, req.(*ChallengeGetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_SeasonChallengeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonChallengeListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).SeasonChallengeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/SeasonChallengeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).SeasonChallengeList(ctx, req.(*SeasonChallengeListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_SeasonChallengeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonChallengeGetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).SeasonChallengeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/SeasonChallengeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).SeasonChallengeGet(ctx, req.(*SeasonChallengeGetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_SeasonChallengeBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonChallengeBuyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).SeasonChallengeBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/SeasonChallengeBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).SeasonChallengeBuy(ctx, req.(*SeasonChallengeBuyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ChallengeSubscriptionValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeSubscriptionValidateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ChallengeSubscriptionValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ChallengeSubscriptionValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ChallengeSubscriptionValidate(ctx, req.(*ChallengeSubscriptionValidateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ChallengeSubscriptionClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeSubscriptionCloseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ChallengeSubscriptionClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ChallengeSubscriptionClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ChallengeSubscriptionClose(ctx, req.(*ChallengeSubscriptionCloseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_OrganizationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).OrganizationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/OrganizationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).OrganizationList(ctx, req.(*OrganizationListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_TeamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).TeamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/TeamList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).TeamList(ctx, req.(*TeamListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_TeamGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamGetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).TeamGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/TeamGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).TeamGet(ctx, req.(*TeamGetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ToolPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ToolPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ToolPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ToolPing(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ToolStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ToolStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ToolStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ToolStatus(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ToolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ToolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ToolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ToolInfo(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ToolGenerateFakeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ToolGenerateFakeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ToolGenerateFakeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ToolGenerateFakeData(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ToolDBDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ToolDBDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ToolDBDump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ToolDBDump(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Engine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pathwar.engine.Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserGetSession",
			Handler:    _Engine_UserGetSession_Handler,
		},
		{
			MethodName: "UserSetPreferences",
			Handler:    _Engine_UserSetPreferences_Handler,
		},
		{
			MethodName: "ChallengeList",
			Handler:    _Engine_ChallengeList_Handler,
		},
		{
			MethodName: "ChallengeGet",
			Handler:    _Engine_ChallengeGet_Handler,
		},
		{
			MethodName: "SeasonChallengeList",
			Handler:    _Engine_SeasonChallengeList_Handler,
		},
		{
			MethodName: "SeasonChallengeGet",
			Handler:    _Engine_SeasonChallengeGet_Handler,
		},
		{
			MethodName: "SeasonChallengeBuy",
			Handler:    _Engine_SeasonChallengeBuy_Handler,
		},
		{
			MethodName: "ChallengeSubscriptionValidate",
			Handler:    _Engine_ChallengeSubscriptionValidate_Handler,
		},
		{
			MethodName: "ChallengeSubscriptionClose",
			Handler:    _Engine_ChallengeSubscriptionClose_Handler,
		},
		{
			MethodName: "OrganizationList",
			Handler:    _Engine_OrganizationList_Handler,
		},
		{
			MethodName: "TeamList",
			Handler:    _Engine_TeamList_Handler,
		},
		{
			MethodName: "TeamGet",
			Handler:    _Engine_TeamGet_Handler,
		},
		{
			MethodName: "ToolPing",
			Handler:    _Engine_ToolPing_Handler,
		},
		{
			MethodName: "ToolStatus",
			Handler:    _Engine_ToolStatus_Handler,
		},
		{
			MethodName: "ToolInfo",
			Handler:    _Engine_ToolInfo_Handler,
		},
		{
			MethodName: "ToolGenerateFakeData",
			Handler:    _Engine_ToolGenerateFakeData_Handler,
		},
		{
			MethodName: "ToolDBDump",
			Handler:    _Engine_ToolDBDump_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pwengine.proto",
}

func (m *TeamGetInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamGetInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamGetInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamGetOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamGetOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamGetOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeListInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeListInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeListInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeListOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeListOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeListOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwengine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeGetInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeGetInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeGetInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonChallengeID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.SeasonChallengeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeGetOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeGetOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeGetOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeGetInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeGetInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeGetInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.ChallengeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeGetOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeGetOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeGetOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeBuyInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeBuyInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeBuyInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x10
	}
	if m.SeasonChallengeID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.SeasonChallengeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeBuyOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeBuyOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeBuyOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeSubscription != nil {
		{
			size, err := m.ChallengeSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionValidateInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionValidateInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionValidateInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Passphrase) > 0 {
		i -= len(m.Passphrase)
		copy(dAtA[i:], m.Passphrase)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.Passphrase)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChallengeSubscriptionID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.ChallengeSubscriptionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionValidateOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionValidateOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionValidateOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeValidation != nil {
		{
			size, err := m.ChallengeValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionCloseInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionCloseInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionCloseInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeSubscriptionID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.ChallengeSubscriptionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionCloseOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionCloseOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionCloseOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeSubscription != nil {
		{
			size, err := m.ChallengeSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamListInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamListInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamListInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamListOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamListOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamListOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwengine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserSetPreferencesInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSetPreferencesInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSetPreferencesInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveSeasonID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.ActiveSeasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserSetPreferencesOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSetPreferencesOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSetPreferencesOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrganizationListInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationListInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationListInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrganizationListOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationListOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationListOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwengine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeListInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeListInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeListInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChallengeListOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeListOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeListOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwengine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserGetSessionInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetSessionInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGetSessionInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserGetSessionOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetSessionOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGetSessionOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seasons) > 0 {
		for iNdEx := len(m.Seasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwengine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Notifications != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.Notifications))
		i--
		dAtA[i] = 0x20
	}
	if m.Claims != nil {
		{
			size, err := m.Claims.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsNewUser {
		i--
		if m.IsNewUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserGetSessionOutput_SeasonAndTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetSessionOutput_SeasonAndTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGetSessionOutput_SeasonAndTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EverythingIsOK {
		i--
		if m.EverythingIsOK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuiltBy) > 0 {
		i -= len(m.BuiltBy)
		copy(dAtA[i:], m.BuiltBy)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.BuiltBy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuiltAt) > 0 {
		i -= len(m.BuiltAt)
		copy(dAtA[i:], m.BuiltAt)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.BuiltAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Uptime != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.Uptime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Void) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Void) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Void) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPwengine(dAtA []byte, offset int, v uint64) int {
	offset -= sovPwengine(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TeamGetInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovPwengine(uint64(m.TeamID))
	}
	return n
}

func (m *TeamGetOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *SeasonChallengeListInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonID != 0 {
		n += 1 + sovPwengine(uint64(m.SeasonID))
	}
	return n
}

func (m *SeasonChallengeListOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwengine(uint64(l))
		}
	}
	return n
}

func (m *SeasonChallengeGetInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonChallengeID != 0 {
		n += 1 + sovPwengine(uint64(m.SeasonChallengeID))
	}
	return n
}

func (m *SeasonChallengeGetOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *ChallengeGetInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeID != 0 {
		n += 1 + sovPwengine(uint64(m.ChallengeID))
	}
	return n
}

func (m *ChallengeGetOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *SeasonChallengeBuyInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonChallengeID != 0 {
		n += 1 + sovPwengine(uint64(m.SeasonChallengeID))
	}
	if m.TeamID != 0 {
		n += 1 + sovPwengine(uint64(m.TeamID))
	}
	return n
}

func (m *SeasonChallengeBuyOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeSubscription != nil {
		l = m.ChallengeSubscription.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *ChallengeSubscriptionValidateInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeSubscriptionID != 0 {
		n += 1 + sovPwengine(uint64(m.ChallengeSubscriptionID))
	}
	l = len(m.Passphrase)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *ChallengeSubscriptionValidateOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeValidation != nil {
		l = m.ChallengeValidation.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *ChallengeSubscriptionCloseInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeSubscriptionID != 0 {
		n += 1 + sovPwengine(uint64(m.ChallengeSubscriptionID))
	}
	return n
}

func (m *ChallengeSubscriptionCloseOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeSubscription != nil {
		l = m.ChallengeSubscription.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *TeamListInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonID != 0 {
		n += 1 + sovPwengine(uint64(m.SeasonID))
	}
	return n
}

func (m *TeamListOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwengine(uint64(l))
		}
	}
	return n
}

func (m *UserSetPreferencesInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveSeasonID != 0 {
		n += 1 + sovPwengine(uint64(m.ActiveSeasonID))
	}
	return n
}

func (m *UserSetPreferencesOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrganizationListInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrganizationListOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwengine(uint64(l))
		}
	}
	return n
}

func (m *ChallengeListInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChallengeListOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwengine(uint64(l))
		}
	}
	return n
}

func (m *UserGetSessionInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserGetSessionOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.IsNewUser {
		n += 2
	}
	if m.Claims != nil {
		l = m.Claims.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.Notifications != 0 {
		n += 1 + sovPwengine(uint64(m.Notifications))
	}
	if len(m.Seasons) > 0 {
		for _, e := range m.Seasons {
			l = e.Size()
			n += 1 + l + sovPwengine(uint64(l))
		}
	}
	return n
}

func (m *UserGetSessionOutput_SeasonAndTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Season != nil {
		l = m.Season.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EverythingIsOK {
		n += 2
	}
	return n
}

func (m *Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.Uptime != 0 {
		n += 1 + sovPwengine(uint64(m.Uptime))
	}
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	l = len(m.BuiltAt)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	l = len(m.BuiltBy)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *Void) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPwengine(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPwengine(x uint64) (n int) {
	return sovPwengine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TeamGetInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamGetInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamGetInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamGetOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamGetOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamGetOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &pwdb.Team{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeListInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeListInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeListInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeListOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeListOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeListOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &pwdb.SeasonChallenge{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeGetInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeGetInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeGetInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallengeID", wireType)
			}
			m.SeasonChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeGetOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeGetOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeGetOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &pwdb.SeasonChallenge{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeGetInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeGetInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeGetInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeID", wireType)
			}
			m.ChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeGetOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeGetOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeGetOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &pwdb.Challenge{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeBuyInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeBuyInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeBuyInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallengeID", wireType)
			}
			m.SeasonChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeBuyOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeBuyOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeBuyOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeSubscription == nil {
				m.ChallengeSubscription = &pwdb.ChallengeSubscription{}
			}
			if err := m.ChallengeSubscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionValidateInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeSubscriptionValidateInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeSubscriptionValidateInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptionID", wireType)
			}
			m.ChallengeSubscriptionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeSubscriptionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passphrase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passphrase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionValidateOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeSubscriptionValidateOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeSubscriptionValidateOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeValidation == nil {
				m.ChallengeValidation = &pwdb.ChallengeValidation{}
			}
			if err := m.ChallengeValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionCloseInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeSubscriptionCloseInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeSubscriptionCloseInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptionID", wireType)
			}
			m.ChallengeSubscriptionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeSubscriptionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionCloseOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeSubscriptionCloseOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeSubscriptionCloseOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeSubscription == nil {
				m.ChallengeSubscription = &pwdb.ChallengeSubscription{}
			}
			if err := m.ChallengeSubscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamListInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamListInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamListInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamListOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamListOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamListOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &pwdb.Team{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSetPreferencesInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSetPreferencesInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSetPreferencesInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSeasonID", wireType)
			}
			m.ActiveSeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveSeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSetPreferencesOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSetPreferencesOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSetPreferencesOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationListInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationListInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationListInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationListOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationListOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationListOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &pwdb.Organization{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeListInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeListInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeListInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeListOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeListOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeListOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &pwdb.Challenge{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetSessionInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGetSessionInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGetSessionInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetSessionOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGetSessionOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGetSessionOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &pwdb.User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNewUser = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claims == nil {
				m.Claims = &pwsso.Claims{}
			}
			if err := m.Claims.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			m.Notifications = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Notifications |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seasons = append(m.Seasons, &UserGetSessionOutput_SeasonAndTeam{})
			if err := m.Seasons[len(m.Seasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetSessionOutput_SeasonAndTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonAndTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonAndTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &pwdb.Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &pwdb.Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EverythingIsOK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EverythingIsOK = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			m.Uptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuiltAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuiltAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuiltBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuiltBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Void) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Void: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Void: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPwengine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPwengine
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPwengine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPwengine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPwengine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPwengine
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPwengine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPwengine   = fmt.Errorf("proto: integer overflow")
)
