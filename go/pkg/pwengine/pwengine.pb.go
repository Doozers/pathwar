// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pwengine.proto

package pwengine

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	pwdb "pathwar.land/go/pkg/pwdb"
	pwsso "pathwar.land/go/pkg/pwsso"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Void is an empty message
type Void struct {
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{0}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Void.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return m.Size()
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

type ListTournamentTeamsInput struct {
	TournamentID string `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
}

func (m *ListTournamentTeamsInput) Reset()         { *m = ListTournamentTeamsInput{} }
func (m *ListTournamentTeamsInput) String() string { return proto.CompactTextString(m) }
func (*ListTournamentTeamsInput) ProtoMessage()    {}
func (*ListTournamentTeamsInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{1}
}
func (m *ListTournamentTeamsInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTournamentTeamsInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTournamentTeamsInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTournamentTeamsInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTournamentTeamsInput.Merge(m, src)
}
func (m *ListTournamentTeamsInput) XXX_Size() int {
	return m.Size()
}
func (m *ListTournamentTeamsInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTournamentTeamsInput.DiscardUnknown(m)
}

var xxx_messageInfo_ListTournamentTeamsInput proto.InternalMessageInfo

func (m *ListTournamentTeamsInput) GetTournamentID() string {
	if m != nil {
		return m.TournamentID
	}
	return ""
}

type SetPreferencesInput struct {
	ActiveTournamentID string `protobuf:"bytes,1,opt,name=active_tournament_id,json=activeTournamentId,proto3" json:"active_tournament_id,omitempty"`
}

func (m *SetPreferencesInput) Reset()         { *m = SetPreferencesInput{} }
func (m *SetPreferencesInput) String() string { return proto.CompactTextString(m) }
func (*SetPreferencesInput) ProtoMessage()    {}
func (*SetPreferencesInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{2}
}
func (m *SetPreferencesInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPreferencesInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetPreferencesInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetPreferencesInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPreferencesInput.Merge(m, src)
}
func (m *SetPreferencesInput) XXX_Size() int {
	return m.Size()
}
func (m *SetPreferencesInput) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPreferencesInput.DiscardUnknown(m)
}

var xxx_messageInfo_SetPreferencesInput proto.InternalMessageInfo

func (m *SetPreferencesInput) GetActiveTournamentID() string {
	if m != nil {
		return m.ActiveTournamentID
	}
	return ""
}

type UserSessionOutput struct {
	User          *pwdb.User                             `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	IsNewUser     bool                                   `protobuf:"varint,2,opt,name=is_new_user,json=isNewUser,proto3" json:"is_new_user,omitempty"`
	Claims        *pwsso.Claims                          `protobuf:"bytes,3,opt,name=claims,proto3" json:"claims,omitempty"`
	Notifications int32                                  `protobuf:"varint,4,opt,name=notifications,proto3" json:"notifications,omitempty"`
	Tournaments   []*UserSessionOutput_TournamentAndTeam `protobuf:"bytes,5,rep,name=tournaments,proto3" json:"tournaments,omitempty"`
}

func (m *UserSessionOutput) Reset()         { *m = UserSessionOutput{} }
func (m *UserSessionOutput) String() string { return proto.CompactTextString(m) }
func (*UserSessionOutput) ProtoMessage()    {}
func (*UserSessionOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{3}
}
func (m *UserSessionOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSessionOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSessionOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSessionOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSessionOutput.Merge(m, src)
}
func (m *UserSessionOutput) XXX_Size() int {
	return m.Size()
}
func (m *UserSessionOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSessionOutput.DiscardUnknown(m)
}

var xxx_messageInfo_UserSessionOutput proto.InternalMessageInfo

func (m *UserSessionOutput) GetUser() *pwdb.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserSessionOutput) GetIsNewUser() bool {
	if m != nil {
		return m.IsNewUser
	}
	return false
}

func (m *UserSessionOutput) GetClaims() *pwsso.Claims {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *UserSessionOutput) GetNotifications() int32 {
	if m != nil {
		return m.Notifications
	}
	return 0
}

func (m *UserSessionOutput) GetTournaments() []*UserSessionOutput_TournamentAndTeam {
	if m != nil {
		return m.Tournaments
	}
	return nil
}

type UserSessionOutput_TournamentAndTeam struct {
	Tournament *pwdb.Tournament     `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"`
	Team       *pwdb.TournamentTeam `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	IsActive   bool                 `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *UserSessionOutput_TournamentAndTeam) Reset()         { *m = UserSessionOutput_TournamentAndTeam{} }
func (m *UserSessionOutput_TournamentAndTeam) String() string { return proto.CompactTextString(m) }
func (*UserSessionOutput_TournamentAndTeam) ProtoMessage()    {}
func (*UserSessionOutput_TournamentAndTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{3, 0}
}
func (m *UserSessionOutput_TournamentAndTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSessionOutput_TournamentAndTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSessionOutput_TournamentAndTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSessionOutput_TournamentAndTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSessionOutput_TournamentAndTeam.Merge(m, src)
}
func (m *UserSessionOutput_TournamentAndTeam) XXX_Size() int {
	return m.Size()
}
func (m *UserSessionOutput_TournamentAndTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSessionOutput_TournamentAndTeam.DiscardUnknown(m)
}

var xxx_messageInfo_UserSessionOutput_TournamentAndTeam proto.InternalMessageInfo

func (m *UserSessionOutput_TournamentAndTeam) GetTournament() *pwdb.Tournament {
	if m != nil {
		return m.Tournament
	}
	return nil
}

func (m *UserSessionOutput_TournamentAndTeam) GetTeam() *pwdb.TournamentTeam {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *UserSessionOutput_TournamentAndTeam) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type Status struct {
	EverythingIsOK bool `protobuf:"varint,1,opt,name=everything_is_ok,json=everythingIsOk,proto3" json:"everything_is_ok,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{4}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetEverythingIsOK() bool {
	if m != nil {
		return m.EverythingIsOK
	}
	return false
}

type Info struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Uptime  int32  `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Commit  string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	BuiltAt string `protobuf:"bytes,4,opt,name=built_at,json=builtAt,proto3" json:"built_at,omitempty"`
	BuiltBy string `protobuf:"bytes,5,opt,name=built_by,json=builtBy,proto3" json:"built_by,omitempty"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{5}
}
func (m *Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(m, src)
}
func (m *Info) XXX_Size() int {
	return m.Size()
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Info) GetUptime() int32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Info) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *Info) GetBuiltAt() string {
	if m != nil {
		return m.BuiltAt
	}
	return ""
}

func (m *Info) GetBuiltBy() string {
	if m != nil {
		return m.BuiltBy
	}
	return ""
}

func init() {
	proto.RegisterType((*Void)(nil), "pathwar.engine.Void")
	proto.RegisterType((*ListTournamentTeamsInput)(nil), "pathwar.engine.ListTournamentTeamsInput")
	proto.RegisterType((*SetPreferencesInput)(nil), "pathwar.engine.SetPreferencesInput")
	proto.RegisterType((*UserSessionOutput)(nil), "pathwar.engine.UserSessionOutput")
	proto.RegisterType((*UserSessionOutput_TournamentAndTeam)(nil), "pathwar.engine.UserSessionOutput.TournamentAndTeam")
	proto.RegisterType((*Status)(nil), "pathwar.engine.Status")
	proto.RegisterType((*Info)(nil), "pathwar.engine.Info")
}

func init() { proto.RegisterFile("pwengine.proto", fileDescriptor_02cf22bbbf1a21c2) }

var fileDescriptor_02cf22bbbf1a21c2 = []byte{
	// 1201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0x4f, 0x73, 0xdb, 0xc4,
	0x1b, 0xc7, 0x23, 0xc7, 0x71, 0xec, 0x75, 0xed, 0x24, 0x9b, 0xfe, 0xf2, 0x73, 0x4c, 0x71, 0x84,
	0xe8, 0x21, 0x94, 0xb1, 0x14, 0xdc, 0xc2, 0x74, 0x0a, 0x07, 0x9c, 0xa6, 0x75, 0x4d, 0x29, 0x31,
	0x4a, 0xda, 0x81, 0x5e, 0xcc, 0x5a, 0x7a, 0x2c, 0x2f, 0xb1, 0xb4, 0x42, 0xbb, 0x8a, 0x31, 0x0c,
	0x17, 0x0e, 0x0c, 0x47, 0xa6, 0x5c, 0x18, 0x0e, 0xbc, 0x02, 0x5e, 0x05, 0x27, 0x8e, 0x9d, 0xe1,
	0xc2, 0xa9, 0xc3, 0xb8, 0x5c, 0x78, 0x17, 0x8c, 0xd6, 0x72, 0x2c, 0x27, 0xf6, 0xb4, 0x9c, 0x92,
	0x7d, 0xf6, 0xfb, 0x7c, 0x9e, 0xdd, 0xe7, 0xcf, 0x5a, 0xa8, 0xe8, 0x0f, 0xc0, 0x73, 0xa8, 0x07,
	0xba, 0x1f, 0x30, 0xc1, 0x70, 0xd1, 0x27, 0xa2, 0x37, 0x20, 0x81, 0x3e, 0xb6, 0x96, 0xaf, 0x38,
	0x8c, 0x39, 0x7d, 0x30, 0x88, 0x4f, 0x0d, 0xe2, 0x79, 0x4c, 0x10, 0x41, 0x99, 0xc7, 0xc7, 0xea,
	0x72, 0xd5, 0xa1, 0xa2, 0x17, 0x76, 0x74, 0x8b, 0xb9, 0x86, 0xc3, 0x1c, 0x66, 0x48, 0x73, 0x27,
	0xec, 0xca, 0x95, 0x5c, 0xc8, 0xff, 0x62, 0xf9, 0x51, 0x52, 0x1e, 0xf8, 0x56, 0x15, 0x2c, 0xc6,
	0x87, 0x5c, 0x40, 0xbc, 0x74, 0x88, 0x80, 0x01, 0x19, 0x8e, 0x29, 0x56, 0xd5, 0x01, 0xaf, 0xca,
	0x07, 0xc4, 0x71, 0x20, 0x30, 0x98, 0x2f, 0xe3, 0xce, 0x39, 0x43, 0xde, 0x1f, 0x70, 0x3e, 0x89,
	0x80, 0xfc, 0x81, 0xdd, 0x19, 0xff, 0xaf, 0x6d, 0xa0, 0xf4, 0x23, 0x46, 0xed, 0x5b, 0xb9, 0x27,
	0xf5, 0x4c, 0x2d, 0x8d, 0x53, 0x5f, 0x7f, 0xa3, 0x7d, 0x8c, 0x4a, 0x1f, 0x52, 0x2e, 0x8e, 0x59,
	0x18, 0x78, 0xc4, 0x05, 0x4f, 0x1c, 0x03, 0x71, 0x79, 0xd3, 0xf3, 0x43, 0x81, 0xdf, 0x46, 0x05,
	0x71, 0x66, 0x6f, 0x53, 0xbb, 0xa4, 0xa8, 0xca, 0x6e, 0x6e, 0x7f, 0x7d, 0xf4, 0x6c, 0xe7, 0xd2,
	0xd4, 0xa1, 0x79, 0x60, 0x5e, 0x9a, 0xca, 0x9a, 0xb6, 0xd6, 0x46, 0x9b, 0x47, 0x20, 0x5a, 0x01,
	0x74, 0x21, 0x00, 0xcf, 0x82, 0x98, 0x76, 0x0f, 0x5d, 0x26, 0x96, 0xa0, 0xa7, 0xd0, 0x9e, 0x07,
	0xdd, 0x1a, 0x3d, 0xdb, 0xc1, 0x75, 0xb9, 0x3f, 0x83, 0xc6, 0xe4, 0xbc, 0xcd, 0xd6, 0x7e, 0x59,
	0x46, 0x1b, 0x0f, 0x39, 0x04, 0x47, 0xc0, 0x39, 0x65, 0xde, 0x61, 0x28, 0x22, 0xfe, 0x55, 0x94,
	0x0e, 0x39, 0x04, 0x92, 0x97, 0xaf, 0xad, 0xeb, 0x93, 0xb2, 0xd9, 0x1d, 0x3d, 0x12, 0x9b, 0x72,
	0x17, 0x57, 0x50, 0x9e, 0xf2, 0xb6, 0x07, 0x83, 0xb6, 0x14, 0xa7, 0x54, 0x65, 0x37, 0x6b, 0xe6,
	0x28, 0xff, 0x08, 0x06, 0x91, 0x0a, 0xbf, 0x89, 0x32, 0x56, 0x9f, 0x50, 0x97, 0x97, 0x96, 0x25,
	0x67, 0xf3, 0x8c, 0x13, 0xa5, 0xf4, 0xb6, 0xdc, 0x32, 0x63, 0x09, 0xbe, 0x8a, 0x0a, 0x1e, 0x13,
	0xb4, 0x4b, 0xad, 0x71, 0xfe, 0x4b, 0x69, 0x55, 0xd9, 0x5d, 0x31, 0x67, 0x8d, 0xf8, 0x21, 0xca,
	0x4f, 0x6f, 0xcc, 0x4b, 0x2b, 0xea, 0xf2, 0x6e, 0xbe, 0x76, 0x5d, 0x9f, 0x6d, 0x2b, 0xfd, 0xc2,
	0x85, 0xf4, 0xe9, 0x9d, 0xeb, 0x9e, 0x1d, 0x95, 0xc5, 0x4c, 0x72, 0xca, 0x3f, 0x29, 0x68, 0xe3,
	0x82, 0x04, 0xbf, 0x83, 0xd0, 0x54, 0x14, 0xe7, 0x62, 0x2b, 0x99, 0x8b, 0xa9, 0x8b, 0x99, 0x50,
	0x62, 0x1d, 0xa5, 0x05, 0x10, 0x57, 0x26, 0x24, 0x5f, 0x2b, 0xcf, 0xf7, 0x90, 0x87, 0x90, 0x3a,
	0xfc, 0x0a, 0xca, 0x51, 0xde, 0x1e, 0x17, 0x47, 0xa6, 0x2a, 0x6b, 0x66, 0x29, 0x1f, 0x17, 0x50,
	0xbb, 0x8b, 0x32, 0x47, 0x82, 0x88, 0x90, 0xe3, 0xf7, 0xd0, 0x3a, 0x9c, 0x42, 0x30, 0x14, 0x3d,
	0xea, 0x39, 0x6d, 0xca, 0xdb, 0xec, 0x44, 0x1e, 0x2a, 0xbb, 0x8f, 0x47, 0xcf, 0x76, 0x8a, 0x77,
	0xce, 0xf6, 0x9a, 0xfc, 0xf0, 0xbe, 0x59, 0x84, 0xe4, 0xfa, 0x44, 0xfb, 0x4e, 0x41, 0xe9, 0xa6,
	0xd7, 0x65, 0xb8, 0x84, 0x56, 0x4f, 0x21, 0x88, 0x72, 0x33, 0x6e, 0x17, 0x73, 0xb2, 0xc4, 0x5b,
	0x28, 0x13, 0xfa, 0x82, 0xba, 0x20, 0x4f, 0xbe, 0x62, 0xc6, 0xab, 0xc8, 0x6e, 0x31, 0xd7, 0xa5,
	0x42, 0x1e, 0x2e, 0x67, 0xc6, 0x2b, 0xbc, 0x8d, 0xb2, 0x9d, 0x90, 0xf6, 0x45, 0x9b, 0x08, 0x59,
	0xad, 0x9c, 0xb9, 0x2a, 0xd7, 0xf5, 0xc4, 0x56, 0x67, 0x58, 0x5a, 0x49, 0x6c, 0xed, 0x0f, 0x6b,
	0xff, 0x64, 0x50, 0xe6, 0x8e, 0xac, 0x13, 0xae, 0xa3, 0x74, 0x8b, 0x7a, 0x0e, 0xbe, 0x7c, 0xbe,
	0x80, 0xd1, 0x64, 0x95, 0xe7, 0x5a, 0xb5, 0xc2, 0xb7, 0x7f, 0xfc, 0xfd, 0x63, 0x6a, 0x15, 0xaf,
	0x18, 0x7e, 0xe4, 0xfa, 0x19, 0x2a, 0x36, 0x40, 0x24, 0x0a, 0xbe, 0x00, 0xf6, 0xda, 0x0b, 0x7b,
	0x44, 0xfb, 0x9f, 0x24, 0xaf, 0xe1, 0x82, 0x11, 0xb5, 0x73, 0x95, 0xc7, 0x3c, 0x82, 0x8a, 0xb3,
	0x23, 0x88, 0x5f, 0x3f, 0xcf, 0x9a, 0x33, 0xa2, 0x0b, 0x4e, 0x7f, 0x59, 0xc6, 0x28, 0x6a, 0x97,
	0x0c, 0x3f, 0x01, 0x7c, 0x84, 0x8a, 0xd1, 0xc3, 0x71, 0xbb, 0x47, 0xfa, 0x7d, 0xf0, 0x1c, 0xe0,
	0x0b, 0x2e, 0xb1, 0x9d, 0x6c, 0xa5, 0x33, 0x75, 0xe4, 0xaa, 0x6d, 0x4a, 0x70, 0x01, 0xe7, 0x0d,
	0x6b, 0x4a, 0x69, 0xa0, 0x9c, 0x7c, 0x90, 0xa2, 0x67, 0xe8, 0x85, 0x49, 0x8e, 0xba, 0x13, 0x88,
	0x2b, 0x69, 0x45, 0x49, 0xcb, 0xe2, 0x8c, 0x21, 0xa4, 0xef, 0x57, 0x68, 0x73, 0xce, 0xcb, 0x86,
	0x77, 0xcf, 0x23, 0x17, 0x3d, 0x7f, 0xe5, 0xca, 0xe2, 0x21, 0x90, 0x01, 0xb7, 0x65, 0xc0, 0x4d,
	0xbc, 0x61, 0x4c, 0xe7, 0x28, 0x8e, 0xfd, 0x01, 0xca, 0x35, 0x40, 0xc4, 0x33, 0x30, 0xff, 0x12,
	0x5b, 0x17, 0x0a, 0x22, 0xd5, 0xda, 0x9a, 0xa4, 0xe6, 0xf0, 0xaa, 0xc1, 0xc7, 0xee, 0x07, 0x68,
	0xb5, 0x01, 0x42, 0x8e, 0xc1, 0x4b, 0xf6, 0x5c, 0xa4, 0x4d, 0xf4, 0x1c, 0x8d, 0x5c, 0xdb, 0x68,
	0xbd, 0x01, 0x1e, 0x04, 0x44, 0xc0, 0x5d, 0x72, 0x02, 0x07, 0x44, 0x90, 0xff, 0xd4, 0xc2, 0x3b,
	0x12, 0xb7, 0xad, 0xfd, 0xdf, 0xb0, 0xe1, 0xd4, 0x70, 0x62, 0x54, 0xb5, 0x4b, 0x4e, 0xa0, 0x6a,
	0x47, 0xb0, 0x06, 0xca, 0x1c, 0xec, 0x1f, 0x84, 0xae, 0xbf, 0x00, 0x3b, 0xf3, 0x20, 0x47, 0xba,
	0x44, 0xef, 0x46, 0x48, 0xfe, 0x45, 0xbf, 0x6a, 0x87, 0xae, 0xbf, 0xff, 0x5b, 0xfa, 0x49, 0xfd,
	0xfb, 0x34, 0xfe, 0x55, 0x41, 0xf9, 0xd6, 0xd8, 0x43, 0xad, 0xb7, 0x9a, 0x5a, 0x03, 0x15, 0x26,
	0xcb, 0x23, 0x41, 0xba, 0x5d, 0xac, 0xf5, 0x84, 0xf0, 0xf9, 0x2d, 0xc3, 0x48, 0xfc, 0x84, 0xc6,
	0x21, 0x26, 0x7f, 0xcb, 0x98, 0x47, 0xd2, 0xf7, 0x27, 0x91, 0xfb, 0xc4, 0xb3, 0xaf, 0x1d, 0xa2,
	0xcd, 0xdd, 0xba, 0x4f, 0xac, 0x1e, 0x54, 0x6b, 0xfa, 0x9e, 0x7a, 0x68, 0xaa, 0x0f, 0x9a, 0xc7,
	0x6f, 0xe0, 0x9b, 0x2f, 0xc6, 0x19, 0x9d, 0x3e, 0xeb, 0x18, 0x2e, 0xe1, 0x02, 0x02, 0xe3, 0xf6,
	0x61, 0xeb, 0x53, 0xb3, 0xd9, 0xb8, 0x77, 0x5c, 0x5b, 0x7e, 0x4b, 0xdf, 0x2b, 0xaf, 0x13, 0x9f,
	0xea, 0xc9, 0x38, 0x9a, 0x62, 0x5c, 0x4b, 0xa5, 0xd2, 0xb5, 0x75, 0xe2, 0xfb, 0xfd, 0xf8, 0xb7,
	0xc0, 0xf8, 0x9c, 0x33, 0xef, 0xd6, 0x05, 0x8b, 0xd9, 0x42, 0xcb, 0x37, 0xf6, 0xae, 0xe3, 0x26,
	0x6a, 0x98, 0x20, 0xc2, 0xc0, 0x03, 0x5b, 0x1d, 0xf4, 0xc0, 0x53, 0x45, 0x0f, 0xd4, 0x68, 0xae,
	0x55, 0x9b, 0x01, 0x57, 0x3d, 0x26, 0xd4, 0x1e, 0x39, 0x05, 0xd5, 0x87, 0xc0, 0xa5, 0x72, 0xd0,
	0x55, 0xc1, 0x54, 0x62, 0x59, 0xc0, 0xb9, 0xd4, 0x06, 0xc0, 0x59, 0x18, 0x58, 0xa0, 0x9b, 0xef,
	0x46, 0xc4, 0x1b, 0xf8, 0x06, 0xba, 0x76, 0x91, 0x38, 0x51, 0x4d, 0xa9, 0xf0, 0x25, 0xe5, 0x42,
	0xc7, 0x19, 0x94, 0xfe, 0x39, 0xa5, 0xac, 0x3e, 0xde, 0x43, 0x6b, 0x28, 0xb7, 0x4f, 0x38, 0xb5,
	0xea, 0xa1, 0xe8, 0xe1, 0x54, 0x56, 0x41, 0xaf, 0x22, 0x54, 0xf7, 0xe9, 0x7d, 0x18, 0x4a, 0xcb,
	0x5a, 0x36, 0x55, 0xce, 0x7d, 0x52, 0xad, 0xb7, 0x9a, 0xd5, 0xfb, 0x30, 0x54, 0x53, 0x9d, 0x1d,
	0x54, 0x48, 0x7a, 0x2c, 0xa1, 0xe2, 0x8c, 0x7e, 0x29, 0xb8, 0x89, 0xf0, 0x03, 0x16, 0x80, 0x4a,
	0x3a, 0x2c, 0x14, 0x6a, 0x5c, 0xc8, 0x97, 0x29, 0xe1, 0xef, 0xa3, 0x8a, 0xf2, 0x74, 0x54, 0x51,
	0xfe, 0x1a, 0x55, 0x94, 0x1f, 0x9e, 0x57, 0x96, 0x9e, 0x3e, 0xaf, 0x2c, 0xfd, 0xf9, 0xbc, 0xb2,
	0xf4, 0xf8, 0x4a, 0x32, 0xd9, 0x46, 0xf4, 0xa1, 0x75, 0xe2, 0x18, 0x93, 0x4f, 0xb7, 0x4e, 0x46,
	0x7e, 0xf0, 0x5c, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x58, 0x1c, 0x87, 0xf8, 0xcd, 0x09, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EngineClient is the client API for Engine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EngineClient interface {
	// Verify the service is up and running
	Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Get current user session, based on JWT token
	GetUserSession(ctx context.Context, in *Void, opts ...grpc.CallOption) (*UserSessionOutput, error)
	SetPreferences(ctx context.Context, in *SetPreferencesInput, opts ...grpc.CallOption) (*Void, error)
	ListChallenges(ctx context.Context, in *Void, opts ...grpc.CallOption) (*pwdb.ChallengeList, error)
	ListTeams(ctx context.Context, in *Void, opts ...grpc.CallOption) (*pwdb.TeamList, error)
	ListTournamentTeams(ctx context.Context, in *ListTournamentTeamsInput, opts ...grpc.CallOption) (*pwdb.TournamentTeamList, error)
	GetStatus(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Status, error)
	//
	// dev helpers
	//
	GetInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Info, error)
	GenerateFakeData(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	DBDump(ctx context.Context, in *Void, opts ...grpc.CallOption) (*pwdb.Dump, error)
}

type engineClient struct {
	cc *grpc.ClientConn
}

func NewEngineClient(cc *grpc.ClientConn) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GetUserSession(ctx context.Context, in *Void, opts ...grpc.CallOption) (*UserSessionOutput, error) {
	out := new(UserSessionOutput)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/GetUserSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) SetPreferences(ctx context.Context, in *SetPreferencesInput, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/SetPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ListChallenges(ctx context.Context, in *Void, opts ...grpc.CallOption) (*pwdb.ChallengeList, error) {
	out := new(pwdb.ChallengeList)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ListChallenges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ListTeams(ctx context.Context, in *Void, opts ...grpc.CallOption) (*pwdb.TeamList, error) {
	out := new(pwdb.TeamList)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ListTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ListTournamentTeams(ctx context.Context, in *ListTournamentTeamsInput, opts ...grpc.CallOption) (*pwdb.TournamentTeamList, error) {
	out := new(pwdb.TournamentTeamList)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ListTournamentTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GetStatus(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GetInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GenerateFakeData(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/GenerateFakeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) DBDump(ctx context.Context, in *Void, opts ...grpc.CallOption) (*pwdb.Dump, error) {
	out := new(pwdb.Dump)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/DBDump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServer is the server API for Engine service.
type EngineServer interface {
	// Verify the service is up and running
	Ping(context.Context, *Void) (*Void, error)
	// Get current user session, based on JWT token
	GetUserSession(context.Context, *Void) (*UserSessionOutput, error)
	SetPreferences(context.Context, *SetPreferencesInput) (*Void, error)
	ListChallenges(context.Context, *Void) (*pwdb.ChallengeList, error)
	ListTeams(context.Context, *Void) (*pwdb.TeamList, error)
	ListTournamentTeams(context.Context, *ListTournamentTeamsInput) (*pwdb.TournamentTeamList, error)
	GetStatus(context.Context, *Void) (*Status, error)
	//
	// dev helpers
	//
	GetInfo(context.Context, *Void) (*Info, error)
	GenerateFakeData(context.Context, *Void) (*Void, error)
	DBDump(context.Context, *Void) (*pwdb.Dump, error)
}

// UnimplementedEngineServer can be embedded to have forward compatible implementations.
type UnimplementedEngineServer struct {
}

func (*UnimplementedEngineServer) Ping(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedEngineServer) GetUserSession(ctx context.Context, req *Void) (*UserSessionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSession not implemented")
}
func (*UnimplementedEngineServer) SetPreferences(ctx context.Context, req *SetPreferencesInput) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPreferences not implemented")
}
func (*UnimplementedEngineServer) ListChallenges(ctx context.Context, req *Void) (*pwdb.ChallengeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChallenges not implemented")
}
func (*UnimplementedEngineServer) ListTeams(ctx context.Context, req *Void) (*pwdb.TeamList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (*UnimplementedEngineServer) ListTournamentTeams(ctx context.Context, req *ListTournamentTeamsInput) (*pwdb.TournamentTeamList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTournamentTeams not implemented")
}
func (*UnimplementedEngineServer) GetStatus(ctx context.Context, req *Void) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedEngineServer) GetInfo(ctx context.Context, req *Void) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (*UnimplementedEngineServer) GenerateFakeData(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFakeData not implemented")
}
func (*UnimplementedEngineServer) DBDump(ctx context.Context, req *Void) (*pwdb.Dump, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DBDump not implemented")
}

func RegisterEngineServer(s *grpc.Server, srv EngineServer) {
	s.RegisterService(&_Engine_serviceDesc, srv)
}

func _Engine_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Ping(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_GetUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/GetUserSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetUserSession(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_SetPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPreferencesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).SetPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/SetPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).SetPreferences(ctx, req.(*SetPreferencesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ListChallenges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ListChallenges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ListChallenges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ListChallenges(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ListTeams(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ListTournamentTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTournamentTeamsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ListTournamentTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ListTournamentTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ListTournamentTeams(ctx, req.(*ListTournamentTeamsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetStatus(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetInfo(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_GenerateFakeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GenerateFakeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/GenerateFakeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GenerateFakeData(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_DBDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).DBDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/DBDump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).DBDump(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Engine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pathwar.engine.Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Engine_Ping_Handler,
		},
		{
			MethodName: "GetUserSession",
			Handler:    _Engine_GetUserSession_Handler,
		},
		{
			MethodName: "SetPreferences",
			Handler:    _Engine_SetPreferences_Handler,
		},
		{
			MethodName: "ListChallenges",
			Handler:    _Engine_ListChallenges_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _Engine_ListTeams_Handler,
		},
		{
			MethodName: "ListTournamentTeams",
			Handler:    _Engine_ListTournamentTeams_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Engine_GetStatus_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Engine_GetInfo_Handler,
		},
		{
			MethodName: "GenerateFakeData",
			Handler:    _Engine_GenerateFakeData_Handler,
		},
		{
			MethodName: "DBDump",
			Handler:    _Engine_DBDump_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pwengine.proto",
}

func (m *Void) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Void) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Void) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListTournamentTeamsInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTournamentTeamsInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTournamentTeamsInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TournamentID) > 0 {
		i -= len(m.TournamentID)
		copy(dAtA[i:], m.TournamentID)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.TournamentID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetPreferencesInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPreferencesInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetPreferencesInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActiveTournamentID) > 0 {
		i -= len(m.ActiveTournamentID)
		copy(dAtA[i:], m.ActiveTournamentID)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.ActiveTournamentID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserSessionOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSessionOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSessionOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tournaments) > 0 {
		for iNdEx := len(m.Tournaments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tournaments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwengine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Notifications != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.Notifications))
		i--
		dAtA[i] = 0x20
	}
	if m.Claims != nil {
		{
			size, err := m.Claims.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsNewUser {
		i--
		if m.IsNewUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserSessionOutput_TournamentAndTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSessionOutput_TournamentAndTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSessionOutput_TournamentAndTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Tournament != nil {
		{
			size, err := m.Tournament.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EverythingIsOK {
		i--
		if m.EverythingIsOK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuiltBy) > 0 {
		i -= len(m.BuiltBy)
		copy(dAtA[i:], m.BuiltBy)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.BuiltBy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuiltAt) > 0 {
		i -= len(m.BuiltAt)
		copy(dAtA[i:], m.BuiltAt)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.BuiltAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Uptime != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.Uptime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPwengine(dAtA []byte, offset int, v uint64) int {
	offset -= sovPwengine(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Void) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListTournamentTeamsInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TournamentID)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *SetPreferencesInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActiveTournamentID)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *UserSessionOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.IsNewUser {
		n += 2
	}
	if m.Claims != nil {
		l = m.Claims.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.Notifications != 0 {
		n += 1 + sovPwengine(uint64(m.Notifications))
	}
	if len(m.Tournaments) > 0 {
		for _, e := range m.Tournaments {
			l = e.Size()
			n += 1 + l + sovPwengine(uint64(l))
		}
	}
	return n
}

func (m *UserSessionOutput_TournamentAndTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tournament != nil {
		l = m.Tournament.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EverythingIsOK {
		n += 2
	}
	return n
}

func (m *Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.Uptime != 0 {
		n += 1 + sovPwengine(uint64(m.Uptime))
	}
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	l = len(m.BuiltAt)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	l = len(m.BuiltBy)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func sovPwengine(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPwengine(x uint64) (n int) {
	return sovPwengine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Void) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Void: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Void: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTournamentTeamsInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTournamentTeamsInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTournamentTeamsInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPreferencesInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPreferencesInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPreferencesInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTournamentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveTournamentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSessionOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSessionOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSessionOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &pwdb.User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNewUser = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claims == nil {
				m.Claims = &pwsso.Claims{}
			}
			if err := m.Claims.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			m.Notifications = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Notifications |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tournaments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tournaments = append(m.Tournaments, &UserSessionOutput_TournamentAndTeam{})
			if err := m.Tournaments[len(m.Tournaments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSessionOutput_TournamentAndTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentAndTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentAndTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tournament", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tournament == nil {
				m.Tournament = &pwdb.Tournament{}
			}
			if err := m.Tournament.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &pwdb.TournamentTeam{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EverythingIsOK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EverythingIsOK = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			m.Uptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuiltAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuiltAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuiltBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuiltBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPwengine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPwengine
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPwengine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPwengine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPwengine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPwengine
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPwengine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPwengine   = fmt.Errorf("proto: integer overflow")
)
