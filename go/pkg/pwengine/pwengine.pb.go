// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pwengine.proto

package pwengine

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	pwdb "pathwar.land/go/pkg/pwdb"
	pwsso "pathwar.land/go/pkg/pwsso"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TeamGet struct {
}

func (m *TeamGet) Reset()         { *m = TeamGet{} }
func (m *TeamGet) String() string { return proto.CompactTextString(m) }
func (*TeamGet) ProtoMessage()    {}
func (*TeamGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{0}
}
func (m *TeamGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamGet.Merge(m, src)
}
func (m *TeamGet) XXX_Size() int {
	return m.Size()
}
func (m *TeamGet) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamGet.DiscardUnknown(m)
}

var xxx_messageInfo_TeamGet proto.InternalMessageInfo

type TeamGet_Input struct {
	TeamID int64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (m *TeamGet_Input) Reset()         { *m = TeamGet_Input{} }
func (m *TeamGet_Input) String() string { return proto.CompactTextString(m) }
func (*TeamGet_Input) ProtoMessage()    {}
func (*TeamGet_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{0, 0}
}
func (m *TeamGet_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamGet_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamGet_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamGet_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamGet_Input.Merge(m, src)
}
func (m *TeamGet_Input) XXX_Size() int {
	return m.Size()
}
func (m *TeamGet_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamGet_Input.DiscardUnknown(m)
}

var xxx_messageInfo_TeamGet_Input proto.InternalMessageInfo

func (m *TeamGet_Input) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

type TeamGet_Output struct {
	Item *pwdb.Team `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *TeamGet_Output) Reset()         { *m = TeamGet_Output{} }
func (m *TeamGet_Output) String() string { return proto.CompactTextString(m) }
func (*TeamGet_Output) ProtoMessage()    {}
func (*TeamGet_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{0, 1}
}
func (m *TeamGet_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamGet_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamGet_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamGet_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamGet_Output.Merge(m, src)
}
func (m *TeamGet_Output) XXX_Size() int {
	return m.Size()
}
func (m *TeamGet_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamGet_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TeamGet_Output proto.InternalMessageInfo

func (m *TeamGet_Output) GetItem() *pwdb.Team {
	if m != nil {
		return m.Item
	}
	return nil
}

type SeasonChallengeList struct {
}

func (m *SeasonChallengeList) Reset()         { *m = SeasonChallengeList{} }
func (m *SeasonChallengeList) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeList) ProtoMessage()    {}
func (*SeasonChallengeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{1}
}
func (m *SeasonChallengeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeList.Merge(m, src)
}
func (m *SeasonChallengeList) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeList) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeList.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeList proto.InternalMessageInfo

type SeasonChallengeList_Input struct {
	SeasonID int64 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
}

func (m *SeasonChallengeList_Input) Reset()         { *m = SeasonChallengeList_Input{} }
func (m *SeasonChallengeList_Input) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeList_Input) ProtoMessage()    {}
func (*SeasonChallengeList_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{1, 0}
}
func (m *SeasonChallengeList_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeList_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeList_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeList_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeList_Input.Merge(m, src)
}
func (m *SeasonChallengeList_Input) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeList_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeList_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeList_Input proto.InternalMessageInfo

func (m *SeasonChallengeList_Input) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

type SeasonChallengeList_Output struct {
	Items []*pwdb.SeasonChallenge `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *SeasonChallengeList_Output) Reset()         { *m = SeasonChallengeList_Output{} }
func (m *SeasonChallengeList_Output) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeList_Output) ProtoMessage()    {}
func (*SeasonChallengeList_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{1, 1}
}
func (m *SeasonChallengeList_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeList_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeList_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeList_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeList_Output.Merge(m, src)
}
func (m *SeasonChallengeList_Output) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeList_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeList_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeList_Output proto.InternalMessageInfo

func (m *SeasonChallengeList_Output) GetItems() []*pwdb.SeasonChallenge {
	if m != nil {
		return m.Items
	}
	return nil
}

type SeasonChallengeGet struct {
}

func (m *SeasonChallengeGet) Reset()         { *m = SeasonChallengeGet{} }
func (m *SeasonChallengeGet) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeGet) ProtoMessage()    {}
func (*SeasonChallengeGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{2}
}
func (m *SeasonChallengeGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeGet.Merge(m, src)
}
func (m *SeasonChallengeGet) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeGet) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeGet.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeGet proto.InternalMessageInfo

type SeasonChallengeGet_Input struct {
	SeasonChallengeID int64 `protobuf:"varint,1,opt,name=season_challenge_id,json=seasonChallengeId,proto3" json:"season_challenge_id,omitempty"`
}

func (m *SeasonChallengeGet_Input) Reset()         { *m = SeasonChallengeGet_Input{} }
func (m *SeasonChallengeGet_Input) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeGet_Input) ProtoMessage()    {}
func (*SeasonChallengeGet_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{2, 0}
}
func (m *SeasonChallengeGet_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeGet_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeGet_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeGet_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeGet_Input.Merge(m, src)
}
func (m *SeasonChallengeGet_Input) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeGet_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeGet_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeGet_Input proto.InternalMessageInfo

func (m *SeasonChallengeGet_Input) GetSeasonChallengeID() int64 {
	if m != nil {
		return m.SeasonChallengeID
	}
	return 0
}

type SeasonChallengeGet_Output struct {
	Item *pwdb.SeasonChallenge `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *SeasonChallengeGet_Output) Reset()         { *m = SeasonChallengeGet_Output{} }
func (m *SeasonChallengeGet_Output) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeGet_Output) ProtoMessage()    {}
func (*SeasonChallengeGet_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{2, 1}
}
func (m *SeasonChallengeGet_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeGet_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeGet_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeGet_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeGet_Output.Merge(m, src)
}
func (m *SeasonChallengeGet_Output) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeGet_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeGet_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeGet_Output proto.InternalMessageInfo

func (m *SeasonChallengeGet_Output) GetItem() *pwdb.SeasonChallenge {
	if m != nil {
		return m.Item
	}
	return nil
}

type ChallengeGet struct {
}

func (m *ChallengeGet) Reset()         { *m = ChallengeGet{} }
func (m *ChallengeGet) String() string { return proto.CompactTextString(m) }
func (*ChallengeGet) ProtoMessage()    {}
func (*ChallengeGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{3}
}
func (m *ChallengeGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeGet.Merge(m, src)
}
func (m *ChallengeGet) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeGet) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeGet.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeGet proto.InternalMessageInfo

type ChallengeGet_Input struct {
	ChallengeID int64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *ChallengeGet_Input) Reset()         { *m = ChallengeGet_Input{} }
func (m *ChallengeGet_Input) String() string { return proto.CompactTextString(m) }
func (*ChallengeGet_Input) ProtoMessage()    {}
func (*ChallengeGet_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{3, 0}
}
func (m *ChallengeGet_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeGet_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeGet_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeGet_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeGet_Input.Merge(m, src)
}
func (m *ChallengeGet_Input) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeGet_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeGet_Input.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeGet_Input proto.InternalMessageInfo

func (m *ChallengeGet_Input) GetChallengeID() int64 {
	if m != nil {
		return m.ChallengeID
	}
	return 0
}

type ChallengeGet_Output struct {
	Item *pwdb.Challenge `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *ChallengeGet_Output) Reset()         { *m = ChallengeGet_Output{} }
func (m *ChallengeGet_Output) String() string { return proto.CompactTextString(m) }
func (*ChallengeGet_Output) ProtoMessage()    {}
func (*ChallengeGet_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{3, 1}
}
func (m *ChallengeGet_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeGet_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeGet_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeGet_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeGet_Output.Merge(m, src)
}
func (m *ChallengeGet_Output) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeGet_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeGet_Output.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeGet_Output proto.InternalMessageInfo

func (m *ChallengeGet_Output) GetItem() *pwdb.Challenge {
	if m != nil {
		return m.Item
	}
	return nil
}

type SeasonChallengeBuy struct {
}

func (m *SeasonChallengeBuy) Reset()         { *m = SeasonChallengeBuy{} }
func (m *SeasonChallengeBuy) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeBuy) ProtoMessage()    {}
func (*SeasonChallengeBuy) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{4}
}
func (m *SeasonChallengeBuy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeBuy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeBuy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeBuy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeBuy.Merge(m, src)
}
func (m *SeasonChallengeBuy) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeBuy) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeBuy.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeBuy proto.InternalMessageInfo

type SeasonChallengeBuy_Input struct {
	SeasonChallengeID int64 `protobuf:"varint,1,opt,name=season_challenge_id,json=seasonChallengeId,proto3" json:"season_challenge_id,omitempty"`
	TeamID            int64 `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (m *SeasonChallengeBuy_Input) Reset()         { *m = SeasonChallengeBuy_Input{} }
func (m *SeasonChallengeBuy_Input) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeBuy_Input) ProtoMessage()    {}
func (*SeasonChallengeBuy_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{4, 0}
}
func (m *SeasonChallengeBuy_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeBuy_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeBuy_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeBuy_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeBuy_Input.Merge(m, src)
}
func (m *SeasonChallengeBuy_Input) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeBuy_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeBuy_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeBuy_Input proto.InternalMessageInfo

func (m *SeasonChallengeBuy_Input) GetSeasonChallengeID() int64 {
	if m != nil {
		return m.SeasonChallengeID
	}
	return 0
}

func (m *SeasonChallengeBuy_Input) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

type SeasonChallengeBuy_Output struct {
	ChallengeSubscription *pwdb.ChallengeSubscription `protobuf:"bytes,1,opt,name=challenge_subscription,json=challengeSubscription,proto3" json:"challenge_subscription,omitempty"`
}

func (m *SeasonChallengeBuy_Output) Reset()         { *m = SeasonChallengeBuy_Output{} }
func (m *SeasonChallengeBuy_Output) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeBuy_Output) ProtoMessage()    {}
func (*SeasonChallengeBuy_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{4, 1}
}
func (m *SeasonChallengeBuy_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeBuy_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeBuy_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeBuy_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeBuy_Output.Merge(m, src)
}
func (m *SeasonChallengeBuy_Output) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeBuy_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeBuy_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeBuy_Output proto.InternalMessageInfo

func (m *SeasonChallengeBuy_Output) GetChallengeSubscription() *pwdb.ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscription
	}
	return nil
}

type ChallengeSubscriptionValidate struct {
}

func (m *ChallengeSubscriptionValidate) Reset()         { *m = ChallengeSubscriptionValidate{} }
func (m *ChallengeSubscriptionValidate) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionValidate) ProtoMessage()    {}
func (*ChallengeSubscriptionValidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{5}
}
func (m *ChallengeSubscriptionValidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionValidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionValidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionValidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionValidate.Merge(m, src)
}
func (m *ChallengeSubscriptionValidate) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionValidate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionValidate.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionValidate proto.InternalMessageInfo

type ChallengeSubscriptionValidate_Input struct {
	ChallengeSubscriptionID int64  `protobuf:"varint,1,opt,name=challenge_subscription_id,json=challengeSubscriptionId,proto3" json:"challenge_subscription_id,omitempty"`
	Passphrase              string `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Comment                 string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *ChallengeSubscriptionValidate_Input) Reset()         { *m = ChallengeSubscriptionValidate_Input{} }
func (m *ChallengeSubscriptionValidate_Input) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionValidate_Input) ProtoMessage()    {}
func (*ChallengeSubscriptionValidate_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{5, 0}
}
func (m *ChallengeSubscriptionValidate_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionValidate_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionValidate_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionValidate_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionValidate_Input.Merge(m, src)
}
func (m *ChallengeSubscriptionValidate_Input) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionValidate_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionValidate_Input.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionValidate_Input proto.InternalMessageInfo

func (m *ChallengeSubscriptionValidate_Input) GetChallengeSubscriptionID() int64 {
	if m != nil {
		return m.ChallengeSubscriptionID
	}
	return 0
}

func (m *ChallengeSubscriptionValidate_Input) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

func (m *ChallengeSubscriptionValidate_Input) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type ChallengeSubscriptionValidate_Output struct {
	ChallengeValidation *pwdb.ChallengeValidation `protobuf:"bytes,1,opt,name=challenge_validation,json=challengeValidation,proto3" json:"challenge_validation,omitempty"`
}

func (m *ChallengeSubscriptionValidate_Output) Reset()         { *m = ChallengeSubscriptionValidate_Output{} }
func (m *ChallengeSubscriptionValidate_Output) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionValidate_Output) ProtoMessage()    {}
func (*ChallengeSubscriptionValidate_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{5, 1}
}
func (m *ChallengeSubscriptionValidate_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionValidate_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionValidate_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionValidate_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionValidate_Output.Merge(m, src)
}
func (m *ChallengeSubscriptionValidate_Output) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionValidate_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionValidate_Output.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionValidate_Output proto.InternalMessageInfo

func (m *ChallengeSubscriptionValidate_Output) GetChallengeValidation() *pwdb.ChallengeValidation {
	if m != nil {
		return m.ChallengeValidation
	}
	return nil
}

type ChallengeSubscriptionClose struct {
}

func (m *ChallengeSubscriptionClose) Reset()         { *m = ChallengeSubscriptionClose{} }
func (m *ChallengeSubscriptionClose) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionClose) ProtoMessage()    {}
func (*ChallengeSubscriptionClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{6}
}
func (m *ChallengeSubscriptionClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionClose.Merge(m, src)
}
func (m *ChallengeSubscriptionClose) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionClose) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionClose.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionClose proto.InternalMessageInfo

type ChallengeSubscriptionClose_Input struct {
	ChallengeSubscriptionID int64 `protobuf:"varint,1,opt,name=challenge_subscription_id,json=challengeSubscriptionId,proto3" json:"challenge_subscription_id,omitempty"`
}

func (m *ChallengeSubscriptionClose_Input) Reset()         { *m = ChallengeSubscriptionClose_Input{} }
func (m *ChallengeSubscriptionClose_Input) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionClose_Input) ProtoMessage()    {}
func (*ChallengeSubscriptionClose_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{6, 0}
}
func (m *ChallengeSubscriptionClose_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionClose_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionClose_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionClose_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionClose_Input.Merge(m, src)
}
func (m *ChallengeSubscriptionClose_Input) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionClose_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionClose_Input.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionClose_Input proto.InternalMessageInfo

func (m *ChallengeSubscriptionClose_Input) GetChallengeSubscriptionID() int64 {
	if m != nil {
		return m.ChallengeSubscriptionID
	}
	return 0
}

type ChallengeSubscriptionClose_Output struct {
	ChallengeSubscription *pwdb.ChallengeSubscription `protobuf:"bytes,1,opt,name=challenge_subscription,json=challengeSubscription,proto3" json:"challenge_subscription,omitempty"`
}

func (m *ChallengeSubscriptionClose_Output) Reset()         { *m = ChallengeSubscriptionClose_Output{} }
func (m *ChallengeSubscriptionClose_Output) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionClose_Output) ProtoMessage()    {}
func (*ChallengeSubscriptionClose_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{6, 1}
}
func (m *ChallengeSubscriptionClose_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionClose_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionClose_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionClose_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionClose_Output.Merge(m, src)
}
func (m *ChallengeSubscriptionClose_Output) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionClose_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionClose_Output.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionClose_Output proto.InternalMessageInfo

func (m *ChallengeSubscriptionClose_Output) GetChallengeSubscription() *pwdb.ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscription
	}
	return nil
}

type TeamList struct {
}

func (m *TeamList) Reset()         { *m = TeamList{} }
func (m *TeamList) String() string { return proto.CompactTextString(m) }
func (*TeamList) ProtoMessage()    {}
func (*TeamList) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{7}
}
func (m *TeamList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamList.Merge(m, src)
}
func (m *TeamList) XXX_Size() int {
	return m.Size()
}
func (m *TeamList) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamList.DiscardUnknown(m)
}

var xxx_messageInfo_TeamList proto.InternalMessageInfo

type TeamList_Input struct {
	SeasonID int64 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
}

func (m *TeamList_Input) Reset()         { *m = TeamList_Input{} }
func (m *TeamList_Input) String() string { return proto.CompactTextString(m) }
func (*TeamList_Input) ProtoMessage()    {}
func (*TeamList_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{7, 0}
}
func (m *TeamList_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamList_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamList_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamList_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamList_Input.Merge(m, src)
}
func (m *TeamList_Input) XXX_Size() int {
	return m.Size()
}
func (m *TeamList_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamList_Input.DiscardUnknown(m)
}

var xxx_messageInfo_TeamList_Input proto.InternalMessageInfo

func (m *TeamList_Input) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

type TeamList_Output struct {
	Items []*pwdb.Team `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *TeamList_Output) Reset()         { *m = TeamList_Output{} }
func (m *TeamList_Output) String() string { return proto.CompactTextString(m) }
func (*TeamList_Output) ProtoMessage()    {}
func (*TeamList_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{7, 1}
}
func (m *TeamList_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamList_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamList_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamList_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamList_Output.Merge(m, src)
}
func (m *TeamList_Output) XXX_Size() int {
	return m.Size()
}
func (m *TeamList_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamList_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TeamList_Output proto.InternalMessageInfo

func (m *TeamList_Output) GetItems() []*pwdb.Team {
	if m != nil {
		return m.Items
	}
	return nil
}

type TeamCreate struct {
}

func (m *TeamCreate) Reset()         { *m = TeamCreate{} }
func (m *TeamCreate) String() string { return proto.CompactTextString(m) }
func (*TeamCreate) ProtoMessage()    {}
func (*TeamCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{8}
}
func (m *TeamCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamCreate.Merge(m, src)
}
func (m *TeamCreate) XXX_Size() int {
	return m.Size()
}
func (m *TeamCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamCreate.DiscardUnknown(m)
}

var xxx_messageInfo_TeamCreate proto.InternalMessageInfo

type TeamCreate_Input struct {
	OrganizationID int64  `protobuf:"varint,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SeasonID       int64  `protobuf:"varint,3,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
}

func (m *TeamCreate_Input) Reset()         { *m = TeamCreate_Input{} }
func (m *TeamCreate_Input) String() string { return proto.CompactTextString(m) }
func (*TeamCreate_Input) ProtoMessage()    {}
func (*TeamCreate_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{8, 0}
}
func (m *TeamCreate_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamCreate_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamCreate_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamCreate_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamCreate_Input.Merge(m, src)
}
func (m *TeamCreate_Input) XXX_Size() int {
	return m.Size()
}
func (m *TeamCreate_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamCreate_Input.DiscardUnknown(m)
}

var xxx_messageInfo_TeamCreate_Input proto.InternalMessageInfo

func (m *TeamCreate_Input) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *TeamCreate_Input) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TeamCreate_Input) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

type TeamCreate_Output struct {
	Team *pwdb.Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
}

func (m *TeamCreate_Output) Reset()         { *m = TeamCreate_Output{} }
func (m *TeamCreate_Output) String() string { return proto.CompactTextString(m) }
func (*TeamCreate_Output) ProtoMessage()    {}
func (*TeamCreate_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{8, 1}
}
func (m *TeamCreate_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamCreate_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamCreate_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamCreate_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamCreate_Output.Merge(m, src)
}
func (m *TeamCreate_Output) XXX_Size() int {
	return m.Size()
}
func (m *TeamCreate_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamCreate_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TeamCreate_Output proto.InternalMessageInfo

func (m *TeamCreate_Output) GetTeam() *pwdb.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type TeamSendInvite struct {
}

func (m *TeamSendInvite) Reset()         { *m = TeamSendInvite{} }
func (m *TeamSendInvite) String() string { return proto.CompactTextString(m) }
func (*TeamSendInvite) ProtoMessage()    {}
func (*TeamSendInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{9}
}
func (m *TeamSendInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamSendInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamSendInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamSendInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamSendInvite.Merge(m, src)
}
func (m *TeamSendInvite) XXX_Size() int {
	return m.Size()
}
func (m *TeamSendInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamSendInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TeamSendInvite proto.InternalMessageInfo

type TeamSendInvite_Input struct {
	TeamID int64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	UserID int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *TeamSendInvite_Input) Reset()         { *m = TeamSendInvite_Input{} }
func (m *TeamSendInvite_Input) String() string { return proto.CompactTextString(m) }
func (*TeamSendInvite_Input) ProtoMessage()    {}
func (*TeamSendInvite_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{9, 0}
}
func (m *TeamSendInvite_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamSendInvite_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamSendInvite_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamSendInvite_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamSendInvite_Input.Merge(m, src)
}
func (m *TeamSendInvite_Input) XXX_Size() int {
	return m.Size()
}
func (m *TeamSendInvite_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamSendInvite_Input.DiscardUnknown(m)
}

var xxx_messageInfo_TeamSendInvite_Input proto.InternalMessageInfo

func (m *TeamSendInvite_Input) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *TeamSendInvite_Input) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type TeamSendInvite_Output struct {
	TeamMember *pwdb.TeamMember `protobuf:"bytes,1,opt,name=team_member,json=teamMember,proto3" json:"team_member,omitempty"`
}

func (m *TeamSendInvite_Output) Reset()         { *m = TeamSendInvite_Output{} }
func (m *TeamSendInvite_Output) String() string { return proto.CompactTextString(m) }
func (*TeamSendInvite_Output) ProtoMessage()    {}
func (*TeamSendInvite_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{9, 1}
}
func (m *TeamSendInvite_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamSendInvite_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamSendInvite_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamSendInvite_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamSendInvite_Output.Merge(m, src)
}
func (m *TeamSendInvite_Output) XXX_Size() int {
	return m.Size()
}
func (m *TeamSendInvite_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamSendInvite_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TeamSendInvite_Output proto.InternalMessageInfo

func (m *TeamSendInvite_Output) GetTeamMember() *pwdb.TeamMember {
	if m != nil {
		return m.TeamMember
	}
	return nil
}

type TeamAcceptInvite struct {
}

func (m *TeamAcceptInvite) Reset()         { *m = TeamAcceptInvite{} }
func (m *TeamAcceptInvite) String() string { return proto.CompactTextString(m) }
func (*TeamAcceptInvite) ProtoMessage()    {}
func (*TeamAcceptInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{10}
}
func (m *TeamAcceptInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamAcceptInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamAcceptInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamAcceptInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamAcceptInvite.Merge(m, src)
}
func (m *TeamAcceptInvite) XXX_Size() int {
	return m.Size()
}
func (m *TeamAcceptInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamAcceptInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TeamAcceptInvite proto.InternalMessageInfo

type TeamAcceptInvite_Input struct {
	TeamMemberID int64 `protobuf:"varint,1,opt,name=team_member_id,json=teamMemberId,proto3" json:"team_member_id,omitempty"`
}

func (m *TeamAcceptInvite_Input) Reset()         { *m = TeamAcceptInvite_Input{} }
func (m *TeamAcceptInvite_Input) String() string { return proto.CompactTextString(m) }
func (*TeamAcceptInvite_Input) ProtoMessage()    {}
func (*TeamAcceptInvite_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{10, 0}
}
func (m *TeamAcceptInvite_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamAcceptInvite_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamAcceptInvite_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamAcceptInvite_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamAcceptInvite_Input.Merge(m, src)
}
func (m *TeamAcceptInvite_Input) XXX_Size() int {
	return m.Size()
}
func (m *TeamAcceptInvite_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamAcceptInvite_Input.DiscardUnknown(m)
}

var xxx_messageInfo_TeamAcceptInvite_Input proto.InternalMessageInfo

func (m *TeamAcceptInvite_Input) GetTeamMemberID() int64 {
	if m != nil {
		return m.TeamMemberID
	}
	return 0
}

type TeamAcceptInvite_Output struct {
	TeamMember *pwdb.TeamMember `protobuf:"bytes,1,opt,name=team_member,json=teamMember,proto3" json:"team_member,omitempty"`
}

func (m *TeamAcceptInvite_Output) Reset()         { *m = TeamAcceptInvite_Output{} }
func (m *TeamAcceptInvite_Output) String() string { return proto.CompactTextString(m) }
func (*TeamAcceptInvite_Output) ProtoMessage()    {}
func (*TeamAcceptInvite_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{10, 1}
}
func (m *TeamAcceptInvite_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamAcceptInvite_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamAcceptInvite_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamAcceptInvite_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamAcceptInvite_Output.Merge(m, src)
}
func (m *TeamAcceptInvite_Output) XXX_Size() int {
	return m.Size()
}
func (m *TeamAcceptInvite_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamAcceptInvite_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TeamAcceptInvite_Output proto.InternalMessageInfo

func (m *TeamAcceptInvite_Output) GetTeamMember() *pwdb.TeamMember {
	if m != nil {
		return m.TeamMember
	}
	return nil
}

type UserSetPreferences struct {
}

func (m *UserSetPreferences) Reset()         { *m = UserSetPreferences{} }
func (m *UserSetPreferences) String() string { return proto.CompactTextString(m) }
func (*UserSetPreferences) ProtoMessage()    {}
func (*UserSetPreferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{11}
}
func (m *UserSetPreferences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSetPreferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSetPreferences.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSetPreferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSetPreferences.Merge(m, src)
}
func (m *UserSetPreferences) XXX_Size() int {
	return m.Size()
}
func (m *UserSetPreferences) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSetPreferences.DiscardUnknown(m)
}

var xxx_messageInfo_UserSetPreferences proto.InternalMessageInfo

type UserSetPreferences_Input struct {
	ActiveSeasonID int64 `protobuf:"varint,1,opt,name=active_season_id,json=activeSeasonId,proto3" json:"active_season_id,omitempty"`
}

func (m *UserSetPreferences_Input) Reset()         { *m = UserSetPreferences_Input{} }
func (m *UserSetPreferences_Input) String() string { return proto.CompactTextString(m) }
func (*UserSetPreferences_Input) ProtoMessage()    {}
func (*UserSetPreferences_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{11, 0}
}
func (m *UserSetPreferences_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSetPreferences_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSetPreferences_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSetPreferences_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSetPreferences_Input.Merge(m, src)
}
func (m *UserSetPreferences_Input) XXX_Size() int {
	return m.Size()
}
func (m *UserSetPreferences_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSetPreferences_Input.DiscardUnknown(m)
}

var xxx_messageInfo_UserSetPreferences_Input proto.InternalMessageInfo

func (m *UserSetPreferences_Input) GetActiveSeasonID() int64 {
	if m != nil {
		return m.ActiveSeasonID
	}
	return 0
}

type UserSetPreferences_Output struct {
}

func (m *UserSetPreferences_Output) Reset()         { *m = UserSetPreferences_Output{} }
func (m *UserSetPreferences_Output) String() string { return proto.CompactTextString(m) }
func (*UserSetPreferences_Output) ProtoMessage()    {}
func (*UserSetPreferences_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{11, 1}
}
func (m *UserSetPreferences_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSetPreferences_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSetPreferences_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSetPreferences_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSetPreferences_Output.Merge(m, src)
}
func (m *UserSetPreferences_Output) XXX_Size() int {
	return m.Size()
}
func (m *UserSetPreferences_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSetPreferences_Output.DiscardUnknown(m)
}

var xxx_messageInfo_UserSetPreferences_Output proto.InternalMessageInfo

type UserDeleteAccount struct {
}

func (m *UserDeleteAccount) Reset()         { *m = UserDeleteAccount{} }
func (m *UserDeleteAccount) String() string { return proto.CompactTextString(m) }
func (*UserDeleteAccount) ProtoMessage()    {}
func (*UserDeleteAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{12}
}
func (m *UserDeleteAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDeleteAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDeleteAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDeleteAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeleteAccount.Merge(m, src)
}
func (m *UserDeleteAccount) XXX_Size() int {
	return m.Size()
}
func (m *UserDeleteAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeleteAccount.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeleteAccount proto.InternalMessageInfo

type UserDeleteAccount_Input struct {
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *UserDeleteAccount_Input) Reset()         { *m = UserDeleteAccount_Input{} }
func (m *UserDeleteAccount_Input) String() string { return proto.CompactTextString(m) }
func (*UserDeleteAccount_Input) ProtoMessage()    {}
func (*UserDeleteAccount_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{12, 0}
}
func (m *UserDeleteAccount_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDeleteAccount_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDeleteAccount_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDeleteAccount_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeleteAccount_Input.Merge(m, src)
}
func (m *UserDeleteAccount_Input) XXX_Size() int {
	return m.Size()
}
func (m *UserDeleteAccount_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeleteAccount_Input.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeleteAccount_Input proto.InternalMessageInfo

func (m *UserDeleteAccount_Input) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UserDeleteAccount_Output struct {
}

func (m *UserDeleteAccount_Output) Reset()         { *m = UserDeleteAccount_Output{} }
func (m *UserDeleteAccount_Output) String() string { return proto.CompactTextString(m) }
func (*UserDeleteAccount_Output) ProtoMessage()    {}
func (*UserDeleteAccount_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{12, 1}
}
func (m *UserDeleteAccount_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDeleteAccount_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDeleteAccount_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDeleteAccount_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeleteAccount_Output.Merge(m, src)
}
func (m *UserDeleteAccount_Output) XXX_Size() int {
	return m.Size()
}
func (m *UserDeleteAccount_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeleteAccount_Output.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeleteAccount_Output proto.InternalMessageInfo

type OrganizationList struct {
}

func (m *OrganizationList) Reset()         { *m = OrganizationList{} }
func (m *OrganizationList) String() string { return proto.CompactTextString(m) }
func (*OrganizationList) ProtoMessage()    {}
func (*OrganizationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{13}
}
func (m *OrganizationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationList.Merge(m, src)
}
func (m *OrganizationList) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationList) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationList.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationList proto.InternalMessageInfo

type OrganizationList_Input struct {
}

func (m *OrganizationList_Input) Reset()         { *m = OrganizationList_Input{} }
func (m *OrganizationList_Input) String() string { return proto.CompactTextString(m) }
func (*OrganizationList_Input) ProtoMessage()    {}
func (*OrganizationList_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{13, 0}
}
func (m *OrganizationList_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationList_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationList_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationList_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationList_Input.Merge(m, src)
}
func (m *OrganizationList_Input) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationList_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationList_Input.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationList_Input proto.InternalMessageInfo

type OrganizationList_Output struct {
	Items []*pwdb.Organization `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *OrganizationList_Output) Reset()         { *m = OrganizationList_Output{} }
func (m *OrganizationList_Output) String() string { return proto.CompactTextString(m) }
func (*OrganizationList_Output) ProtoMessage()    {}
func (*OrganizationList_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{13, 1}
}
func (m *OrganizationList_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationList_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationList_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationList_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationList_Output.Merge(m, src)
}
func (m *OrganizationList_Output) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationList_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationList_Output.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationList_Output proto.InternalMessageInfo

func (m *OrganizationList_Output) GetItems() []*pwdb.Organization {
	if m != nil {
		return m.Items
	}
	return nil
}

type ChallengeList struct {
}

func (m *ChallengeList) Reset()         { *m = ChallengeList{} }
func (m *ChallengeList) String() string { return proto.CompactTextString(m) }
func (*ChallengeList) ProtoMessage()    {}
func (*ChallengeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{14}
}
func (m *ChallengeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeList.Merge(m, src)
}
func (m *ChallengeList) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeList.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeList proto.InternalMessageInfo

type ChallengeList_Input struct {
}

func (m *ChallengeList_Input) Reset()         { *m = ChallengeList_Input{} }
func (m *ChallengeList_Input) String() string { return proto.CompactTextString(m) }
func (*ChallengeList_Input) ProtoMessage()    {}
func (*ChallengeList_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{14, 0}
}
func (m *ChallengeList_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeList_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeList_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeList_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeList_Input.Merge(m, src)
}
func (m *ChallengeList_Input) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeList_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeList_Input.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeList_Input proto.InternalMessageInfo

type ChallengeList_Output struct {
	Items []*pwdb.Challenge `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ChallengeList_Output) Reset()         { *m = ChallengeList_Output{} }
func (m *ChallengeList_Output) String() string { return proto.CompactTextString(m) }
func (*ChallengeList_Output) ProtoMessage()    {}
func (*ChallengeList_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{14, 1}
}
func (m *ChallengeList_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeList_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeList_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeList_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeList_Output.Merge(m, src)
}
func (m *ChallengeList_Output) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeList_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeList_Output.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeList_Output proto.InternalMessageInfo

func (m *ChallengeList_Output) GetItems() []*pwdb.Challenge {
	if m != nil {
		return m.Items
	}
	return nil
}

type UserGetSession struct {
}

func (m *UserGetSession) Reset()         { *m = UserGetSession{} }
func (m *UserGetSession) String() string { return proto.CompactTextString(m) }
func (*UserGetSession) ProtoMessage()    {}
func (*UserGetSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{15}
}
func (m *UserGetSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGetSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetSession.Merge(m, src)
}
func (m *UserGetSession) XXX_Size() int {
	return m.Size()
}
func (m *UserGetSession) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetSession.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetSession proto.InternalMessageInfo

type UserGetSession_Input struct {
}

func (m *UserGetSession_Input) Reset()         { *m = UserGetSession_Input{} }
func (m *UserGetSession_Input) String() string { return proto.CompactTextString(m) }
func (*UserGetSession_Input) ProtoMessage()    {}
func (*UserGetSession_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{15, 0}
}
func (m *UserGetSession_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetSession_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetSession_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGetSession_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetSession_Input.Merge(m, src)
}
func (m *UserGetSession_Input) XXX_Size() int {
	return m.Size()
}
func (m *UserGetSession_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetSession_Input.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetSession_Input proto.InternalMessageInfo

type UserGetSession_Output struct {
	User          *pwdb.User                             `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	IsNewUser     bool                                   `protobuf:"varint,2,opt,name=is_new_user,json=isNewUser,proto3" json:"is_new_user,omitempty"`
	Claims        *pwsso.Claims                          `protobuf:"bytes,3,opt,name=claims,proto3" json:"claims,omitempty"`
	Notifications int32                                  `protobuf:"varint,4,opt,name=notifications,proto3" json:"notifications,omitempty"`
	Seasons       []*UserGetSession_Output_SeasonAndTeam `protobuf:"bytes,5,rep,name=seasons,proto3" json:"seasons,omitempty"`
}

func (m *UserGetSession_Output) Reset()         { *m = UserGetSession_Output{} }
func (m *UserGetSession_Output) String() string { return proto.CompactTextString(m) }
func (*UserGetSession_Output) ProtoMessage()    {}
func (*UserGetSession_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{15, 1}
}
func (m *UserGetSession_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetSession_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetSession_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGetSession_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetSession_Output.Merge(m, src)
}
func (m *UserGetSession_Output) XXX_Size() int {
	return m.Size()
}
func (m *UserGetSession_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetSession_Output.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetSession_Output proto.InternalMessageInfo

func (m *UserGetSession_Output) GetUser() *pwdb.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserGetSession_Output) GetIsNewUser() bool {
	if m != nil {
		return m.IsNewUser
	}
	return false
}

func (m *UserGetSession_Output) GetClaims() *pwsso.Claims {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *UserGetSession_Output) GetNotifications() int32 {
	if m != nil {
		return m.Notifications
	}
	return 0
}

func (m *UserGetSession_Output) GetSeasons() []*UserGetSession_Output_SeasonAndTeam {
	if m != nil {
		return m.Seasons
	}
	return nil
}

type UserGetSession_Output_SeasonAndTeam struct {
	Season   *pwdb.Season `protobuf:"bytes,1,opt,name=season,proto3" json:"season,omitempty"`
	Team     *pwdb.Team   `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	IsActive bool         `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *UserGetSession_Output_SeasonAndTeam) Reset()         { *m = UserGetSession_Output_SeasonAndTeam{} }
func (m *UserGetSession_Output_SeasonAndTeam) String() string { return proto.CompactTextString(m) }
func (*UserGetSession_Output_SeasonAndTeam) ProtoMessage()    {}
func (*UserGetSession_Output_SeasonAndTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{15, 1, 0}
}
func (m *UserGetSession_Output_SeasonAndTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetSession_Output_SeasonAndTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetSession_Output_SeasonAndTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGetSession_Output_SeasonAndTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetSession_Output_SeasonAndTeam.Merge(m, src)
}
func (m *UserGetSession_Output_SeasonAndTeam) XXX_Size() int {
	return m.Size()
}
func (m *UserGetSession_Output_SeasonAndTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetSession_Output_SeasonAndTeam.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetSession_Output_SeasonAndTeam proto.InternalMessageInfo

func (m *UserGetSession_Output_SeasonAndTeam) GetSeason() *pwdb.Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *UserGetSession_Output_SeasonAndTeam) GetTeam() *pwdb.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *UserGetSession_Output_SeasonAndTeam) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type GetStatus struct {
}

func (m *GetStatus) Reset()         { *m = GetStatus{} }
func (m *GetStatus) String() string { return proto.CompactTextString(m) }
func (*GetStatus) ProtoMessage()    {}
func (*GetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{16}
}
func (m *GetStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatus.Merge(m, src)
}
func (m *GetStatus) XXX_Size() int {
	return m.Size()
}
func (m *GetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatus proto.InternalMessageInfo

type GetStatus_Input struct {
}

func (m *GetStatus_Input) Reset()         { *m = GetStatus_Input{} }
func (m *GetStatus_Input) String() string { return proto.CompactTextString(m) }
func (*GetStatus_Input) ProtoMessage()    {}
func (*GetStatus_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{16, 0}
}
func (m *GetStatus_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatus_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatus_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatus_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatus_Input.Merge(m, src)
}
func (m *GetStatus_Input) XXX_Size() int {
	return m.Size()
}
func (m *GetStatus_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatus_Input.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatus_Input proto.InternalMessageInfo

type GetStatus_Output struct {
	EverythingIsOK bool `protobuf:"varint,1,opt,name=everything_is_ok,json=everythingIsOk,proto3" json:"everything_is_ok,omitempty"`
}

func (m *GetStatus_Output) Reset()         { *m = GetStatus_Output{} }
func (m *GetStatus_Output) String() string { return proto.CompactTextString(m) }
func (*GetStatus_Output) ProtoMessage()    {}
func (*GetStatus_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{16, 1}
}
func (m *GetStatus_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatus_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatus_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatus_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatus_Output.Merge(m, src)
}
func (m *GetStatus_Output) XXX_Size() int {
	return m.Size()
}
func (m *GetStatus_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatus_Output.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatus_Output proto.InternalMessageInfo

func (m *GetStatus_Output) GetEverythingIsOK() bool {
	if m != nil {
		return m.EverythingIsOK
	}
	return false
}

type GetInfo struct {
}

func (m *GetInfo) Reset()         { *m = GetInfo{} }
func (m *GetInfo) String() string { return proto.CompactTextString(m) }
func (*GetInfo) ProtoMessage()    {}
func (*GetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{17}
}
func (m *GetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfo.Merge(m, src)
}
func (m *GetInfo) XXX_Size() int {
	return m.Size()
}
func (m *GetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfo proto.InternalMessageInfo

type GetInfo_Input struct {
}

func (m *GetInfo_Input) Reset()         { *m = GetInfo_Input{} }
func (m *GetInfo_Input) String() string { return proto.CompactTextString(m) }
func (*GetInfo_Input) ProtoMessage()    {}
func (*GetInfo_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{17, 0}
}
func (m *GetInfo_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfo_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfo_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfo_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfo_Input.Merge(m, src)
}
func (m *GetInfo_Input) XXX_Size() int {
	return m.Size()
}
func (m *GetInfo_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfo_Input proto.InternalMessageInfo

type GetInfo_Output struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Uptime  int32  `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Commit  string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	BuiltAt string `protobuf:"bytes,4,opt,name=built_at,json=builtAt,proto3" json:"built_at,omitempty"`
	BuiltBy string `protobuf:"bytes,5,opt,name=built_by,json=builtBy,proto3" json:"built_by,omitempty"`
}

func (m *GetInfo_Output) Reset()         { *m = GetInfo_Output{} }
func (m *GetInfo_Output) String() string { return proto.CompactTextString(m) }
func (*GetInfo_Output) ProtoMessage()    {}
func (*GetInfo_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{17, 1}
}
func (m *GetInfo_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfo_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfo_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfo_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfo_Output.Merge(m, src)
}
func (m *GetInfo_Output) XXX_Size() int {
	return m.Size()
}
func (m *GetInfo_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfo_Output proto.InternalMessageInfo

func (m *GetInfo_Output) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetInfo_Output) GetUptime() int32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *GetInfo_Output) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *GetInfo_Output) GetBuiltAt() string {
	if m != nil {
		return m.BuiltAt
	}
	return ""
}

func (m *GetInfo_Output) GetBuiltBy() string {
	if m != nil {
		return m.BuiltBy
	}
	return ""
}

// Void is an empty message
type Void struct {
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_02cf22bbbf1a21c2, []int{18}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Void.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return m.Size()
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TeamGet)(nil), "pathwar.engine.TeamGet")
	proto.RegisterType((*TeamGet_Input)(nil), "pathwar.engine.TeamGet.Input")
	proto.RegisterType((*TeamGet_Output)(nil), "pathwar.engine.TeamGet.Output")
	proto.RegisterType((*SeasonChallengeList)(nil), "pathwar.engine.SeasonChallengeList")
	proto.RegisterType((*SeasonChallengeList_Input)(nil), "pathwar.engine.SeasonChallengeList.Input")
	proto.RegisterType((*SeasonChallengeList_Output)(nil), "pathwar.engine.SeasonChallengeList.Output")
	proto.RegisterType((*SeasonChallengeGet)(nil), "pathwar.engine.SeasonChallengeGet")
	proto.RegisterType((*SeasonChallengeGet_Input)(nil), "pathwar.engine.SeasonChallengeGet.Input")
	proto.RegisterType((*SeasonChallengeGet_Output)(nil), "pathwar.engine.SeasonChallengeGet.Output")
	proto.RegisterType((*ChallengeGet)(nil), "pathwar.engine.ChallengeGet")
	proto.RegisterType((*ChallengeGet_Input)(nil), "pathwar.engine.ChallengeGet.Input")
	proto.RegisterType((*ChallengeGet_Output)(nil), "pathwar.engine.ChallengeGet.Output")
	proto.RegisterType((*SeasonChallengeBuy)(nil), "pathwar.engine.SeasonChallengeBuy")
	proto.RegisterType((*SeasonChallengeBuy_Input)(nil), "pathwar.engine.SeasonChallengeBuy.Input")
	proto.RegisterType((*SeasonChallengeBuy_Output)(nil), "pathwar.engine.SeasonChallengeBuy.Output")
	proto.RegisterType((*ChallengeSubscriptionValidate)(nil), "pathwar.engine.ChallengeSubscriptionValidate")
	proto.RegisterType((*ChallengeSubscriptionValidate_Input)(nil), "pathwar.engine.ChallengeSubscriptionValidate.Input")
	proto.RegisterType((*ChallengeSubscriptionValidate_Output)(nil), "pathwar.engine.ChallengeSubscriptionValidate.Output")
	proto.RegisterType((*ChallengeSubscriptionClose)(nil), "pathwar.engine.ChallengeSubscriptionClose")
	proto.RegisterType((*ChallengeSubscriptionClose_Input)(nil), "pathwar.engine.ChallengeSubscriptionClose.Input")
	proto.RegisterType((*ChallengeSubscriptionClose_Output)(nil), "pathwar.engine.ChallengeSubscriptionClose.Output")
	proto.RegisterType((*TeamList)(nil), "pathwar.engine.TeamList")
	proto.RegisterType((*TeamList_Input)(nil), "pathwar.engine.TeamList.Input")
	proto.RegisterType((*TeamList_Output)(nil), "pathwar.engine.TeamList.Output")
	proto.RegisterType((*TeamCreate)(nil), "pathwar.engine.TeamCreate")
	proto.RegisterType((*TeamCreate_Input)(nil), "pathwar.engine.TeamCreate.Input")
	proto.RegisterType((*TeamCreate_Output)(nil), "pathwar.engine.TeamCreate.Output")
	proto.RegisterType((*TeamSendInvite)(nil), "pathwar.engine.TeamSendInvite")
	proto.RegisterType((*TeamSendInvite_Input)(nil), "pathwar.engine.TeamSendInvite.Input")
	proto.RegisterType((*TeamSendInvite_Output)(nil), "pathwar.engine.TeamSendInvite.Output")
	proto.RegisterType((*TeamAcceptInvite)(nil), "pathwar.engine.TeamAcceptInvite")
	proto.RegisterType((*TeamAcceptInvite_Input)(nil), "pathwar.engine.TeamAcceptInvite.Input")
	proto.RegisterType((*TeamAcceptInvite_Output)(nil), "pathwar.engine.TeamAcceptInvite.Output")
	proto.RegisterType((*UserSetPreferences)(nil), "pathwar.engine.UserSetPreferences")
	proto.RegisterType((*UserSetPreferences_Input)(nil), "pathwar.engine.UserSetPreferences.Input")
	proto.RegisterType((*UserSetPreferences_Output)(nil), "pathwar.engine.UserSetPreferences.Output")
	proto.RegisterType((*UserDeleteAccount)(nil), "pathwar.engine.UserDeleteAccount")
	proto.RegisterType((*UserDeleteAccount_Input)(nil), "pathwar.engine.UserDeleteAccount.Input")
	proto.RegisterType((*UserDeleteAccount_Output)(nil), "pathwar.engine.UserDeleteAccount.Output")
	proto.RegisterType((*OrganizationList)(nil), "pathwar.engine.OrganizationList")
	proto.RegisterType((*OrganizationList_Input)(nil), "pathwar.engine.OrganizationList.Input")
	proto.RegisterType((*OrganizationList_Output)(nil), "pathwar.engine.OrganizationList.Output")
	proto.RegisterType((*ChallengeList)(nil), "pathwar.engine.ChallengeList")
	proto.RegisterType((*ChallengeList_Input)(nil), "pathwar.engine.ChallengeList.Input")
	proto.RegisterType((*ChallengeList_Output)(nil), "pathwar.engine.ChallengeList.Output")
	proto.RegisterType((*UserGetSession)(nil), "pathwar.engine.UserGetSession")
	proto.RegisterType((*UserGetSession_Input)(nil), "pathwar.engine.UserGetSession.Input")
	proto.RegisterType((*UserGetSession_Output)(nil), "pathwar.engine.UserGetSession.Output")
	proto.RegisterType((*UserGetSession_Output_SeasonAndTeam)(nil), "pathwar.engine.UserGetSession.Output.SeasonAndTeam")
	proto.RegisterType((*GetStatus)(nil), "pathwar.engine.GetStatus")
	proto.RegisterType((*GetStatus_Input)(nil), "pathwar.engine.GetStatus.Input")
	proto.RegisterType((*GetStatus_Output)(nil), "pathwar.engine.GetStatus.Output")
	proto.RegisterType((*GetInfo)(nil), "pathwar.engine.GetInfo")
	proto.RegisterType((*GetInfo_Input)(nil), "pathwar.engine.GetInfo.Input")
	proto.RegisterType((*GetInfo_Output)(nil), "pathwar.engine.GetInfo.Output")
	proto.RegisterType((*Void)(nil), "pathwar.engine.Void")
}

func init() { proto.RegisterFile("pwengine.proto", fileDescriptor_02cf22bbbf1a21c2) }

var fileDescriptor_02cf22bbbf1a21c2 = []byte{
	// 2096 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcf, 0x6f, 0x1c, 0x49,
	0x19, 0x4d, 0x8f, 0xed, 0xf9, 0x51, 0x63, 0x8f, 0xed, 0xb2, 0x9d, 0x75, 0x3a, 0x1b, 0x4f, 0x6f,
	0x27, 0xbb, 0xeb, 0x38, 0xcc, 0xb4, 0x33, 0x09, 0x10, 0x92, 0x15, 0x30, 0xce, 0x64, 0x4d, 0x2b,
	0x9b, 0xb5, 0x69, 0x67, 0xb3, 0x61, 0x59, 0xc9, 0x5b, 0xd3, 0x5d, 0x9e, 0x69, 0x3c, 0xd3, 0xdd,
	0x74, 0xd5, 0xd8, 0x0c, 0x2b, 0xd0, 0x0a, 0x10, 0x44, 0x82, 0x03, 0x5a, 0x24, 0x0e, 0x91, 0x10,
	0x37, 0x2e, 0x70, 0xe7, 0xc2, 0x69, 0x4f, 0x1c, 0x57, 0xe2, 0xc2, 0xc9, 0x42, 0x13, 0xae, 0x48,
	0xfc, 0x09, 0xa8, 0xaa, 0xab, 0x7b, 0xba, 0x67, 0x7a, 0x6c, 0x07, 0x2d, 0x9c, 0xdc, 0x55, 0xdf,
	0xab, 0xf7, 0xbd, 0xaa, 0x7a, 0x5d, 0xfd, 0xd5, 0x18, 0x94, 0xbc, 0x63, 0xec, 0xb4, 0x6c, 0x07,
	0x57, 0x3d, 0xdf, 0xa5, 0x2e, 0x2c, 0x79, 0x88, 0xb6, 0x8f, 0x91, 0x5f, 0x0d, 0x7a, 0xe5, 0x57,
	0x5b, 0xae, 0xdb, 0xea, 0x60, 0x0d, 0x79, 0xb6, 0x86, 0x1c, 0xc7, 0xa5, 0x88, 0xda, 0xae, 0x43,
	0x02, 0xb4, 0x5c, 0x69, 0xd9, 0xb4, 0xdd, 0x6b, 0x56, 0x4d, 0xb7, 0xab, 0xb5, 0xdc, 0x96, 0xab,
	0xf1, 0xee, 0x66, 0xef, 0x80, 0xb7, 0x78, 0x83, 0x3f, 0x09, 0xf8, 0x5e, 0x1c, 0xee, 0x7b, 0x66,
	0x05, 0x9b, 0x2e, 0xe9, 0x13, 0x8a, 0x45, 0xb3, 0x85, 0x28, 0x3e, 0x46, 0xfd, 0x80, 0xc5, 0xac,
	0xb4, 0xb0, 0x53, 0x21, 0xc7, 0xa8, 0xd5, 0xc2, 0xbe, 0xe6, 0x7a, 0x3c, 0x6f, 0x8a, 0x86, 0xa2,
	0x77, 0x4c, 0x48, 0x98, 0x01, 0x78, 0xc7, 0x56, 0x33, 0x78, 0x56, 0x5b, 0x20, 0xf7, 0x18, 0xa3,
	0xee, 0x36, 0xa6, 0xf2, 0x97, 0xc0, 0x8c, 0xee, 0x78, 0x3d, 0x0a, 0xaf, 0x82, 0x1c, 0xc5, 0xa8,
	0xbb, 0x6f, 0x5b, 0xab, 0x92, 0x22, 0xad, 0x4f, 0x6d, 0x81, 0xc1, 0x49, 0x39, 0xcb, 0x60, 0x7a,
	0xc3, 0xc8, 0xb2, 0x90, 0x6e, 0xc9, 0x55, 0x90, 0xdd, 0xe9, 0x51, 0x06, 0xbf, 0x06, 0xa6, 0x6d,
	0x8a, 0xbb, 0x1c, 0x5b, 0xac, 0x2d, 0x54, 0xc3, 0xc5, 0xb1, 0x9a, 0x55, 0x36, 0xc6, 0xe0, 0x51,
	0xf5, 0xe7, 0x12, 0x58, 0xda, 0xc3, 0x88, 0xb8, 0xce, 0xfd, 0x36, 0xea, 0x74, 0xb0, 0xd3, 0xc2,
	0xef, 0xd8, 0x84, 0xca, 0xb5, 0x30, 0xeb, 0x75, 0x50, 0x20, 0x3c, 0x3e, 0xcc, 0x3b, 0x3b, 0x38,
	0x29, 0xe7, 0x83, 0x41, 0x7a, 0xc3, 0xc8, 0x07, 0x61, 0xdd, 0x92, 0xef, 0x45, 0xb9, 0x6f, 0x82,
	0x19, 0xc6, 0x4e, 0x56, 0x25, 0x65, 0x6a, 0xbd, 0x58, 0xbb, 0x1c, 0x4f, 0x3e, 0x92, 0xcd, 0x08,
	0x90, 0xea, 0xef, 0x25, 0x00, 0x47, 0x42, 0x6c, 0xf6, 0xef, 0x86, 0x3a, 0x1e, 0x80, 0x25, 0xa1,
	0xc3, 0x0c, 0xe3, 0x43, 0x45, 0x2b, 0x83, 0x93, 0xf2, 0xe2, 0xc8, 0x68, 0xbd, 0x61, 0x2c, 0x92,
	0x91, 0x2e, 0x4b, 0xfe, 0x5a, 0xa4, 0x51, 0x4b, 0xac, 0xcf, 0xa9, 0x12, 0x83, 0xa5, 0xfa, 0x44,
	0x02, 0xb3, 0x09, 0x6d, 0xf7, 0x42, 0x6d, 0x35, 0x30, 0x9b, 0x22, 0x6a, 0x7e, 0x70, 0x52, 0x2e,
	0xc6, 0xe5, 0x14, 0xcd, 0x98, 0x90, 0x5b, 0x91, 0x90, 0xeb, 0x09, 0x21, 0x2b, 0x71, 0x21, 0xa3,
	0x12, 0xfe, 0x35, 0xbe, 0x48, 0x5b, 0xbd, 0xbe, 0x4c, 0xbe, 0xd8, 0x45, 0x8a, 0x3b, 0x2d, 0x33,
	0xd1, 0x69, 0xcd, 0x68, 0x02, 0x4f, 0xc1, 0xc5, 0x61, 0x3a, 0xd2, 0x6b, 0x12, 0xd3, 0xb7, 0xb9,
	0xe5, 0xc5, 0x94, 0x5e, 0x4b, 0x9d, 0xd2, 0x5e, 0x0c, 0x68, 0xac, 0x98, 0x69, 0xdd, 0xea, 0xf3,
	0x0c, 0xb8, 0x92, 0x3a, 0xe0, 0x09, 0xea, 0xd8, 0x16, 0xa2, 0x58, 0x7e, 0x2e, 0x85, 0x73, 0x7f,
	0x1f, 0x5c, 0x4a, 0x57, 0x31, 0x5c, 0x81, 0xcb, 0x83, 0x93, 0xf2, 0x2b, 0xa9, 0x7c, 0x7a, 0xc3,
	0x78, 0x25, 0x55, 0x82, 0x6e, 0xc1, 0x35, 0x00, 0x3c, 0x44, 0x88, 0xd7, 0xf6, 0x11, 0xc1, 0x7c,
	0x41, 0x0a, 0x46, 0xac, 0x07, 0xae, 0x82, 0x9c, 0xe9, 0x76, 0xbb, 0xd8, 0xa1, 0xab, 0x53, 0x3c,
	0x18, 0x36, 0xe5, 0x0f, 0xa3, 0x25, 0x32, 0xc0, 0xf2, 0x50, 0xdc, 0x51, 0x20, 0x7e, 0xb8, 0x40,
	0xe5, 0xd4, 0x05, 0x7a, 0x12, 0xc1, 0x8c, 0x25, 0x73, 0xbc, 0x53, 0x1d, 0x48, 0x40, 0x4e, 0x9d,
	0xcc, 0xfd, 0x8e, 0x4b, 0xb0, 0xfc, 0xd1, 0xff, 0x7a, 0x61, 0xfe, 0x2f, 0x0e, 0xf0, 0x40, 0x9e,
	0xf9, 0xee, 0xbf, 0x3e, 0x93, 0x36, 0x23, 0x8d, 0x6f, 0x24, 0xcf, 0xa4, 0xf1, 0x03, 0x51, 0x1c,
	0x44, 0x9f, 0x49, 0x00, 0xb0, 0xf6, 0x7d, 0x1f, 0x33, 0x83, 0xfd, 0x34, 0x32, 0xd8, 0x3d, 0x30,
	0xef, 0xfa, 0x2d, 0xe4, 0xd8, 0x3f, 0x44, 0xc9, 0xd5, 0x83, 0x83, 0x93, 0x72, 0x69, 0x27, 0x16,
	0xd2, 0x1b, 0x46, 0x29, 0x0e, 0xd5, 0x2d, 0x08, 0xc1, 0xb4, 0x83, 0xba, 0xa1, 0x7d, 0xf8, 0x73,
	0x72, 0x1a, 0x53, 0xa7, 0x4e, 0x23, 0x71, 0xac, 0xb3, 0x17, 0x70, 0xf2, 0xb1, 0xce, 0xa2, 0xea,
	0x1f, 0x24, 0x50, 0x62, 0xcd, 0x3d, 0xec, 0x58, 0xba, 0x73, 0x64, 0x53, 0x2c, 0x7f, 0xfb, 0x65,
	0xbe, 0x23, 0x0c, 0xd4, 0x23, 0xd8, 0x1f, 0x39, 0x02, 0xde, 0x23, 0xd8, 0x67, 0x20, 0x16, 0xd2,
	0x2d, 0xb9, 0x1e, 0xa9, 0xfa, 0x2a, 0x28, 0x72, 0xce, 0x2e, 0xee, 0x36, 0xb1, 0x2f, 0xc4, 0x5d,
	0x1c, 0x15, 0xf7, 0x88, 0x47, 0x0d, 0x40, 0xa3, 0x67, 0xf5, 0xb7, 0x12, 0x58, 0x60, 0xa1, 0xba,
	0x69, 0x62, 0x8f, 0x0a, 0xa9, 0xdf, 0x08, 0xa5, 0x7e, 0x05, 0x94, 0x62, 0xb4, 0x43, 0xc5, 0x0b,
	0x83, 0x93, 0xf2, 0xec, 0x90, 0x51, 0x6f, 0x18, 0xb3, 0x43, 0xce, 0x2f, 0x46, 0x18, 0x06, 0x90,
	0xcd, 0x76, 0x0f, 0xd3, 0x5d, 0x1f, 0x1f, 0x60, 0x1f, 0x3b, 0x26, 0x26, 0xf2, 0x83, 0x50, 0xd9,
	0x5b, 0x60, 0x01, 0x99, 0xd4, 0x3e, 0xc2, 0xfb, 0xa3, 0x4e, 0xe4, 0x6e, 0xa8, 0xf3, 0x58, 0xb4,
	0x91, 0x25, 0x14, 0x6f, 0x5b, 0x72, 0x3e, 0xd4, 0xa7, 0x7e, 0x1d, 0x2c, 0xb2, 0x34, 0x0d, 0xdc,
	0xc1, 0x14, 0xd7, 0x4d, 0xd3, 0xed, 0x39, 0x54, 0x2e, 0x87, 0x59, 0x2e, 0x82, 0xac, 0xcf, 0xc7,
	0x70, 0xee, 0x82, 0x21, 0x5a, 0xb1, 0xf1, 0xef, 0x81, 0x85, 0xb8, 0xf3, 0xf8, 0x7b, 0x92, 0x13,
	0xc3, 0xe5, 0x3b, 0xd1, 0x32, 0x54, 0x93, 0xe6, 0x5f, 0x8d, 0x2f, 0x40, 0x7c, 0x7c, 0xf8, 0x12,
	0xec, 0x80, 0xb9, 0x64, 0x3d, 0x10, 0x71, 0x7e, 0x39, 0xe2, 0xbc, 0x91, 0xe4, 0x9c, 0xf0, 0xe1,
	0x12, 0x84, 0xbf, 0x9a, 0x02, 0x25, 0x36, 0xd1, 0x6d, 0x4c, 0xf7, 0x30, 0x21, 0xb6, 0xeb, 0x0c,
	0x29, 0xff, 0x9d, 0x89, 0xbb, 0x9b, 0x79, 0x2b, 0xcd, 0xdd, 0x6c, 0xb4, 0xc1, 0xa3, 0x70, 0x0d,
	0x14, 0x6d, 0xb2, 0xef, 0xe0, 0xe3, 0x7d, 0x0e, 0x66, 0x06, 0xcd, 0x1b, 0x05, 0x9b, 0xbc, 0x8b,
	0x8f, 0x19, 0x0a, 0xde, 0x00, 0x59, 0xb3, 0x83, 0xec, 0x2e, 0xe1, 0x6f, 0x55, 0xb1, 0xb6, 0x14,
	0xf1, 0xb0, 0x6a, 0xeb, 0x3e, 0x0f, 0x19, 0x02, 0x02, 0xaf, 0x81, 0x39, 0xc7, 0xa5, 0xf6, 0x81,
	0x6d, 0x06, 0xa5, 0xd9, 0xea, 0xb4, 0x22, 0xad, 0xcf, 0x18, 0xc9, 0x4e, 0xf8, 0x08, 0xe4, 0x82,
	0x8d, 0x26, 0xab, 0x33, 0x7c, 0xba, 0xb7, 0xaa, 0xc9, 0x6a, 0xb3, 0x9a, 0x9c, 0x5d, 0x35, 0x98,
	0x90, 0x28, 0x25, 0xea, 0x8e, 0xc5, 0x5f, 0xce, 0x90, 0x43, 0xfe, 0x31, 0x98, 0x4b, 0x44, 0xe0,
	0x06, 0xc8, 0x92, 0xe1, 0x4e, 0x17, 0x6b, 0x70, 0xbc, 0x1e, 0x31, 0x04, 0x22, 0x3a, 0x02, 0x32,
	0xa7, 0x1d, 0x01, 0xf0, 0x32, 0x28, 0xd8, 0x64, 0x3f, 0x30, 0x1e, 0x5f, 0x87, 0xbc, 0x91, 0xb7,
	0x49, 0x60, 0x4c, 0xf5, 0x43, 0x50, 0x60, 0x5a, 0x29, 0xa2, 0x3d, 0x32, 0xdc, 0x88, 0xb7, 0xa3,
	0x7d, 0x78, 0x0b, 0x2c, 0xe0, 0x23, 0xec, 0xf7, 0x69, 0xdb, 0x76, 0x5a, 0xfb, 0x36, 0xd9, 0x77,
	0x0f, 0xb9, 0xb0, 0x7c, 0x60, 0xef, 0x07, 0x51, 0x4c, 0x27, 0x3b, 0x0f, 0x8d, 0x12, 0x8e, 0xb7,
	0x0f, 0xd5, 0xdf, 0x49, 0x20, 0xb7, 0x8d, 0xa9, 0xee, 0x1c, 0xb8, 0x43, 0xf2, 0x67, 0x52, 0xc4,
	0xbe, 0x0a, 0x72, 0x47, 0xd8, 0x27, 0x76, 0xe4, 0xeb, 0xb0, 0xc9, 0x0c, 0xdf, 0xf3, 0xa8, 0x2d,
	0x0e, 0xca, 0x19, 0x43, 0xb4, 0x58, 0x3f, 0xfb, 0xa8, 0xda, 0xe1, 0x27, 0x56, 0xb4, 0xe0, 0x25,
	0x90, 0x6f, 0xf6, 0xec, 0x0e, 0xdd, 0x47, 0x94, 0xef, 0x5b, 0xc1, 0xc8, 0xf1, 0x76, 0x3d, 0x16,
	0x6a, 0xf6, 0x57, 0x67, 0x62, 0xa1, 0xad, 0xbe, 0xba, 0x08, 0xa6, 0x9f, 0xb8, 0xb6, 0x75, 0xb7,
	0xf0, 0x69, 0x3d, 0x5b, 0x9b, 0x86, 0x99, 0x8f, 0x7f, 0x54, 0xfb, 0xcb, 0x12, 0xc8, 0x3e, 0xe0,
	0x1b, 0x09, 0xe9, 0xa8, 0x53, 0xe1, 0xb5, 0x33, 0xf6, 0x3a, 0x98, 0xe0, 0xeb, 0xe7, 0x72, 0x84,
	0xba, 0xf2, 0x93, 0xbf, 0xfd, 0xf3, 0x37, 0x99, 0x79, 0x38, 0xa7, 0x31, 0xf3, 0x6a, 0x44, 0xe4,
	0xf8, 0x85, 0x94, 0x76, 0xe0, 0xc0, 0xf5, 0x34, 0xd2, 0x24, 0x46, 0xa4, 0xbf, 0x7e, 0x0e, 0xa4,
	0x90, 0xf0, 0x2a, 0x97, 0x70, 0x51, 0x5d, 0x0c, 0x24, 0x78, 0x43, 0xc4, 0x5d, 0x69, 0x83, 0x29,
	0x19, 0x3f, 0x93, 0xe0, 0x9b, 0x69, 0xf4, 0x09, 0x88, 0xd0, 0xb1, 0x7e, 0x36, 0x50, 0xc8, 0x28,
	0x73, 0x19, 0x97, 0xd4, 0xe5, 0x40, 0x86, 0xc5, 0x31, 0x15, 0x14, 0x80, 0x98, 0x12, 0x77, 0xe4,
	0x14, 0x82, 0x57, 0x47, 0xb9, 0x13, 0x61, 0x21, 0xe0, 0xda, 0xe9, 0x20, 0x91, 0x7c, 0x89, 0x27,
	0x9f, 0x83, 0x45, 0x2d, 0x2a, 0x3c, 0x08, 0x3c, 0x4c, 0x56, 0xf8, 0x50, 0x9d, 0x48, 0xb5, 0x8d,
	0xc3, 0x74, 0x57, 0x4f, 0xc5, 0x88, 0x6c, 0x90, 0x67, 0x9b, 0x85, 0x60, 0x98, 0x0d, 0x3e, 0x4b,
	0xbf, 0x7a, 0xc1, 0xb1, 0x8d, 0x4c, 0x01, 0x89, 0xdc, 0x1b, 0xe7, 0x81, 0x0a, 0x09, 0x32, 0x97,
	0xb0, 0x0c, 0xa1, 0x16, 0x1c, 0x23, 0x95, 0xd8, 0xbc, 0x7f, 0x96, 0x7a, 0xf9, 0x1a, 0x37, 0xdf,
	0x38, 0x66, 0x92, 0xf9, 0x52, 0x90, 0x42, 0xc7, 0x25, 0xae, 0x63, 0x09, 0x2e, 0x8e, 0xe9, 0x80,
	0xbf, 0x4c, 0xbd, 0xde, 0x9c, 0x29, 0x63, 0xab, 0xd7, 0x3f, 0xa7, 0x0c, 0x86, 0x14, 0x32, 0x14,
	0x2e, 0x43, 0x56, 0x57, 0xc6, 0x64, 0x68, 0xcd, 0x5e, 0x9f, 0xb9, 0xef, 0xcf, 0xd2, 0x19, 0x97,
	0x0f, 0x78, 0x6b, 0xe2, 0xd6, 0xa7, 0xc1, 0x85, 0xc6, 0xdb, 0x2f, 0x37, 0x48, 0xc8, 0xbd, 0xc1,
	0xe5, 0xbe, 0xae, 0x2a, 0x43, 0x03, 0x55, 0xe2, 0x85, 0xb6, 0x26, 0x2e, 0x15, 0x98, 0x29, 0xff,
	0xe3, 0xa9, 0x37, 0x03, 0xb8, 0x79, 0x2e, 0x05, 0x1c, 0x2b, 0x34, 0xdf, 0x7c, 0x89, 0x11, 0x42,
	0xf0, 0x3a, 0x17, 0xac, 0xaa, 0x57, 0x26, 0x09, 0x36, 0x19, 0x9a, 0xa9, 0xfd, 0x78, 0xbc, 0x84,
	0x81, 0x6f, 0x8c, 0x26, 0x1c, 0x45, 0x08, 0x61, 0x6f, 0x9e, 0x89, 0x13, 0x72, 0x2e, 0x72, 0x39,
	0x0b, 0xb0, 0xa4, 0xc5, 0x0b, 0x73, 0x02, 0xbf, 0x3b, 0xbc, 0x5f, 0xc0, 0xb5, 0x51, 0xb2, 0x30,
	0x22, 0x92, 0x95, 0x27, 0xc6, 0x45, 0x92, 0x12, 0x4f, 0x92, 0x87, 0x59, 0x8d, 0x7d, 0x81, 0x09,
	0x7c, 0x3f, 0xfa, 0x15, 0x07, 0x5e, 0x49, 0x1b, 0x3b, 0x7c, 0x7f, 0xd6, 0x26, 0x85, 0x05, 0xf3,
	0x1c, 0x67, 0xce, 0xc1, 0x19, 0xce, 0x0c, 0x3f, 0x8a, 0x5f, 0x51, 0xa0, 0x92, 0x36, 0x38, 0x88,
	0x09, 0xfa, 0xd7, 0x4e, 0x41, 0x24, 0x33, 0xa8, 0x22, 0x03, 0x19, 0xbd, 0x3f, 0x8c, 0x7f, 0x04,
	0x93, 0xf1, 0x49, 0x1f, 0xc1, 0x11, 0x94, 0xc8, 0xb6, 0xcc, 0xb3, 0x95, 0xd4, 0x59, 0x9e, 0x4d,
	0xb3, 0x83, 0x14, 0x9f, 0xa4, 0x5c, 0x06, 0xc6, 0xad, 0x30, 0x8a, 0x98, 0x64, 0x85, 0x31, 0x9c,
	0xc8, 0x7d, 0x99, 0xe7, 0x5e, 0x51, 0x97, 0xe2, 0xb9, 0x35, 0xc4, 0x91, 0xf0, 0x01, 0xc8, 0x3f,
	0x76, 0xdd, 0xce, 0xae, 0xed, 0xb4, 0xe0, 0xf2, 0x28, 0x23, 0x2b, 0x1a, 0xe4, 0xd4, 0xde, 0xd8,
	0x06, 0x79, 0x6c, 0x28, 0xdb, 0x20, 0xd7, 0xed, 0x04, 0x05, 0x16, 0x1c, 0x33, 0x4e, 0x54, 0x7b,
	0x09, 0xed, 0xca, 0x64, 0x80, 0x10, 0x3d, 0xcf, 0xf9, 0x0b, 0x30, 0xa7, 0x91, 0x80, 0xf3, 0x69,
	0x20, 0x94, 0xd5, 0x58, 0xe3, 0xe6, 0x12, 0xc5, 0xd7, 0x24, 0x73, 0x85, 0xe1, 0x31, 0x73, 0xd9,
	0x8c, 0xcd, 0x02, 0xcb, 0x8c, 0x79, 0x1b, 0x3b, 0xd8, 0x47, 0x14, 0xbf, 0x8d, 0x0e, 0x71, 0x03,
	0x51, 0xf4, 0x52, 0xcb, 0x11, 0x9e, 0xae, 0xab, 0x1a, 0x75, 0xdd, 0x8e, 0xd6, 0x12, 0x5c, 0x95,
	0x03, 0x74, 0x88, 0x2b, 0x16, 0x63, 0x7b, 0x27, 0x58, 0xa1, 0xc6, 0x56, 0xa3, 0xd7, 0xf5, 0x26,
	0x70, 0x27, 0x4a, 0x5b, 0x86, 0x8b, 0xbd, 0xc6, 0x9c, 0x97, 0x7c, 0xbf, 0x53, 0xb1, 0x7a, 0x5d,
	0x6f, 0xeb, 0xb3, 0xe9, 0x4f, 0xeb, 0xcf, 0xa6, 0xe1, 0x9f, 0x24, 0x50, 0xdc, 0x0d, 0x86, 0x28,
	0xf5, 0x5d, 0x5d, 0xdd, 0x06, 0x73, 0x61, 0x73, 0x8f, 0xa2, 0x83, 0x03, 0xa8, 0xb6, 0x29, 0xf5,
	0xc8, 0x5d, 0x4d, 0x8b, 0xfd, 0x9a, 0x2b, 0x72, 0x84, 0x7f, 0x65, 0x48, 0x18, 0xf4, 0x9b, 0x61,
	0xea, 0x0e, 0x72, 0xac, 0x8d, 0x1d, 0xb0, 0xb4, 0x5e, 0xf7, 0x90, 0xd9, 0xc6, 0x95, 0x5a, 0x75,
	0x53, 0xd9, 0x31, 0x94, 0x47, 0xfa, 0xe3, 0xeb, 0xf0, 0xce, 0xd9, 0x74, 0x5a, 0xb3, 0xe3, 0x36,
	0xb5, 0x2e, 0x22, 0x14, 0xfb, 0xda, 0xfd, 0x9d, 0xdd, 0xef, 0x18, 0xfa, 0xf6, 0xb7, 0x1e, 0xd7,
	0xa6, 0x6e, 0x56, 0x37, 0xe5, 0x05, 0xe4, 0xd9, 0xd5, 0x78, 0x1e, 0x55, 0xd2, 0x36, 0x32, 0x99,
	0xe9, 0xda, 0x02, 0xf2, 0xbc, 0x8e, 0xb8, 0x7b, 0x68, 0xdf, 0x23, 0xae, 0x73, 0x77, 0xac, 0xc7,
	0xd8, 0x05, 0x53, 0xb7, 0x37, 0x6f, 0x41, 0x1d, 0x6c, 0x1b, 0x98, 0xf6, 0x7c, 0x07, 0x5b, 0xca,
	0x71, 0x1b, 0x3b, 0x0a, 0x6d, 0x63, 0x85, 0xd5, 0x53, 0x8a, 0xe5, 0x62, 0xa2, 0x38, 0x2e, 0x55,
	0xda, 0xe8, 0x08, 0x2b, 0x1e, 0xf6, 0xbb, 0x36, 0x2f, 0x35, 0x15, 0xea, 0x2a, 0xcc, 0xed, 0x84,
	0x70, 0xac, 0x8f, 0x89, 0xdb, 0xf3, 0x4d, 0x5c, 0x35, 0xee, 0x31, 0xc6, 0xdb, 0xf0, 0x36, 0xd8,
	0x18, 0x67, 0x0c, 0x51, 0x43, 0x56, 0xfc, 0x03, 0x76, 0xf2, 0xc1, 0x2c, 0x98, 0x7e, 0x9e, 0x91,
	0x72, 0x1f, 0x6c, 0x82, 0x79, 0x50, 0xd8, 0x42, 0xc4, 0x36, 0xeb, 0x3d, 0xda, 0x86, 0x99, 0xbc,
	0x04, 0xae, 0x00, 0x50, 0xf7, 0xec, 0x87, 0xb8, 0xcf, 0x7b, 0xe6, 0xf3, 0x19, 0xb9, 0xf0, 0xb4,
	0x52, 0xdf, 0xd5, 0x2b, 0x0f, 0x71, 0x5f, 0xc9, 0x34, 0xcb, 0x60, 0x2e, 0x3e, 0xe2, 0x02, 0x28,
	0x25, 0xf0, 0x17, 0xfc, 0x3b, 0x00, 0x3e, 0x72, 0x7d, 0xac, 0xa0, 0xa6, 0xdb, 0xa3, 0x8a, 0xd8,
	0xc8, 0xf3, 0x6c, 0xe1, 0x5f, 0x07, 0x6b, 0xd2, 0xe7, 0x83, 0x35, 0xe9, 0x1f, 0x83, 0x35, 0xe9,
	0xd7, 0x2f, 0xd6, 0x2e, 0x7c, 0xfe, 0x62, 0xed, 0xc2, 0xdf, 0x5f, 0xac, 0x5d, 0xf8, 0xe0, 0xd5,
	0xf8, 0x62, 0x6b, 0x2d, 0x57, 0xf3, 0x0e, 0x5b, 0x5a, 0xf8, 0x5f, 0x84, 0x66, 0x96, 0xff, 0xf6,
	0x7e, 0xeb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x5a, 0x93, 0x4c, 0x58, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EngineClient is the client API for Engine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EngineClient interface {
	UserGetSession(ctx context.Context, in *UserGetSession_Input, opts ...grpc.CallOption) (*UserGetSession_Output, error)
	UserSetPreferences(ctx context.Context, in *UserSetPreferences_Input, opts ...grpc.CallOption) (*UserSetPreferences_Output, error)
	UserDeleteAccount(ctx context.Context, in *UserDeleteAccount_Input, opts ...grpc.CallOption) (*UserDeleteAccount_Output, error)
	ChallengeList(ctx context.Context, in *ChallengeList_Input, opts ...grpc.CallOption) (*ChallengeList_Output, error)
	ChallengeGet(ctx context.Context, in *ChallengeGet_Input, opts ...grpc.CallOption) (*ChallengeGet_Output, error)
	SeasonChallengeList(ctx context.Context, in *SeasonChallengeList_Input, opts ...grpc.CallOption) (*SeasonChallengeList_Output, error)
	SeasonChallengeGet(ctx context.Context, in *SeasonChallengeGet_Input, opts ...grpc.CallOption) (*SeasonChallengeGet_Output, error)
	SeasonChallengeBuy(ctx context.Context, in *SeasonChallengeBuy_Input, opts ...grpc.CallOption) (*SeasonChallengeBuy_Output, error)
	ChallengeSubscriptionValidate(ctx context.Context, in *ChallengeSubscriptionValidate_Input, opts ...grpc.CallOption) (*ChallengeSubscriptionValidate_Output, error)
	ChallengeSubscriptionClose(ctx context.Context, in *ChallengeSubscriptionClose_Input, opts ...grpc.CallOption) (*ChallengeSubscriptionClose_Output, error)
	OrganizationList(ctx context.Context, in *OrganizationList_Input, opts ...grpc.CallOption) (*OrganizationList_Output, error)
	TeamList(ctx context.Context, in *TeamList_Input, opts ...grpc.CallOption) (*TeamList_Output, error)
	TeamGet(ctx context.Context, in *TeamGet_Input, opts ...grpc.CallOption) (*TeamGet_Output, error)
	TeamCreate(ctx context.Context, in *TeamCreate_Input, opts ...grpc.CallOption) (*TeamCreate_Output, error)
	TeamSendInvite(ctx context.Context, in *TeamSendInvite_Input, opts ...grpc.CallOption) (*TeamSendInvite_Output, error)
	TeamAcceptInvite(ctx context.Context, in *TeamAcceptInvite_Input, opts ...grpc.CallOption) (*TeamAcceptInvite_Output, error)
	ToolPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	ToolStatus(ctx context.Context, in *GetStatus_Input, opts ...grpc.CallOption) (*GetStatus_Output, error)
	ToolInfo(ctx context.Context, in *GetInfo_Input, opts ...grpc.CallOption) (*GetInfo_Output, error)
	ToolGenerateFakeData(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	ToolDBDump(ctx context.Context, in *Void, opts ...grpc.CallOption) (*pwdb.Dump, error)
}

type engineClient struct {
	cc *grpc.ClientConn
}

func NewEngineClient(cc *grpc.ClientConn) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) UserGetSession(ctx context.Context, in *UserGetSession_Input, opts ...grpc.CallOption) (*UserGetSession_Output, error) {
	out := new(UserGetSession_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/UserGetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) UserSetPreferences(ctx context.Context, in *UserSetPreferences_Input, opts ...grpc.CallOption) (*UserSetPreferences_Output, error) {
	out := new(UserSetPreferences_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/UserSetPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) UserDeleteAccount(ctx context.Context, in *UserDeleteAccount_Input, opts ...grpc.CallOption) (*UserDeleteAccount_Output, error) {
	out := new(UserDeleteAccount_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/UserDeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ChallengeList(ctx context.Context, in *ChallengeList_Input, opts ...grpc.CallOption) (*ChallengeList_Output, error) {
	out := new(ChallengeList_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ChallengeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ChallengeGet(ctx context.Context, in *ChallengeGet_Input, opts ...grpc.CallOption) (*ChallengeGet_Output, error) {
	out := new(ChallengeGet_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ChallengeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) SeasonChallengeList(ctx context.Context, in *SeasonChallengeList_Input, opts ...grpc.CallOption) (*SeasonChallengeList_Output, error) {
	out := new(SeasonChallengeList_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/SeasonChallengeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) SeasonChallengeGet(ctx context.Context, in *SeasonChallengeGet_Input, opts ...grpc.CallOption) (*SeasonChallengeGet_Output, error) {
	out := new(SeasonChallengeGet_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/SeasonChallengeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) SeasonChallengeBuy(ctx context.Context, in *SeasonChallengeBuy_Input, opts ...grpc.CallOption) (*SeasonChallengeBuy_Output, error) {
	out := new(SeasonChallengeBuy_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/SeasonChallengeBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ChallengeSubscriptionValidate(ctx context.Context, in *ChallengeSubscriptionValidate_Input, opts ...grpc.CallOption) (*ChallengeSubscriptionValidate_Output, error) {
	out := new(ChallengeSubscriptionValidate_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ChallengeSubscriptionValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ChallengeSubscriptionClose(ctx context.Context, in *ChallengeSubscriptionClose_Input, opts ...grpc.CallOption) (*ChallengeSubscriptionClose_Output, error) {
	out := new(ChallengeSubscriptionClose_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ChallengeSubscriptionClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) OrganizationList(ctx context.Context, in *OrganizationList_Input, opts ...grpc.CallOption) (*OrganizationList_Output, error) {
	out := new(OrganizationList_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/OrganizationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) TeamList(ctx context.Context, in *TeamList_Input, opts ...grpc.CallOption) (*TeamList_Output, error) {
	out := new(TeamList_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/TeamList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) TeamGet(ctx context.Context, in *TeamGet_Input, opts ...grpc.CallOption) (*TeamGet_Output, error) {
	out := new(TeamGet_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/TeamGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) TeamCreate(ctx context.Context, in *TeamCreate_Input, opts ...grpc.CallOption) (*TeamCreate_Output, error) {
	out := new(TeamCreate_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/TeamCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) TeamSendInvite(ctx context.Context, in *TeamSendInvite_Input, opts ...grpc.CallOption) (*TeamSendInvite_Output, error) {
	out := new(TeamSendInvite_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/TeamSendInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) TeamAcceptInvite(ctx context.Context, in *TeamAcceptInvite_Input, opts ...grpc.CallOption) (*TeamAcceptInvite_Output, error) {
	out := new(TeamAcceptInvite_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/TeamAcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ToolPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ToolPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ToolStatus(ctx context.Context, in *GetStatus_Input, opts ...grpc.CallOption) (*GetStatus_Output, error) {
	out := new(GetStatus_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ToolStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ToolInfo(ctx context.Context, in *GetInfo_Input, opts ...grpc.CallOption) (*GetInfo_Output, error) {
	out := new(GetInfo_Output)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ToolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ToolGenerateFakeData(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ToolGenerateFakeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ToolDBDump(ctx context.Context, in *Void, opts ...grpc.CallOption) (*pwdb.Dump, error) {
	out := new(pwdb.Dump)
	err := c.cc.Invoke(ctx, "/pathwar.engine.Engine/ToolDBDump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServer is the server API for Engine service.
type EngineServer interface {
	UserGetSession(context.Context, *UserGetSession_Input) (*UserGetSession_Output, error)
	UserSetPreferences(context.Context, *UserSetPreferences_Input) (*UserSetPreferences_Output, error)
	UserDeleteAccount(context.Context, *UserDeleteAccount_Input) (*UserDeleteAccount_Output, error)
	ChallengeList(context.Context, *ChallengeList_Input) (*ChallengeList_Output, error)
	ChallengeGet(context.Context, *ChallengeGet_Input) (*ChallengeGet_Output, error)
	SeasonChallengeList(context.Context, *SeasonChallengeList_Input) (*SeasonChallengeList_Output, error)
	SeasonChallengeGet(context.Context, *SeasonChallengeGet_Input) (*SeasonChallengeGet_Output, error)
	SeasonChallengeBuy(context.Context, *SeasonChallengeBuy_Input) (*SeasonChallengeBuy_Output, error)
	ChallengeSubscriptionValidate(context.Context, *ChallengeSubscriptionValidate_Input) (*ChallengeSubscriptionValidate_Output, error)
	ChallengeSubscriptionClose(context.Context, *ChallengeSubscriptionClose_Input) (*ChallengeSubscriptionClose_Output, error)
	OrganizationList(context.Context, *OrganizationList_Input) (*OrganizationList_Output, error)
	TeamList(context.Context, *TeamList_Input) (*TeamList_Output, error)
	TeamGet(context.Context, *TeamGet_Input) (*TeamGet_Output, error)
	TeamCreate(context.Context, *TeamCreate_Input) (*TeamCreate_Output, error)
	TeamSendInvite(context.Context, *TeamSendInvite_Input) (*TeamSendInvite_Output, error)
	TeamAcceptInvite(context.Context, *TeamAcceptInvite_Input) (*TeamAcceptInvite_Output, error)
	ToolPing(context.Context, *Void) (*Void, error)
	ToolStatus(context.Context, *GetStatus_Input) (*GetStatus_Output, error)
	ToolInfo(context.Context, *GetInfo_Input) (*GetInfo_Output, error)
	ToolGenerateFakeData(context.Context, *Void) (*Void, error)
	ToolDBDump(context.Context, *Void) (*pwdb.Dump, error)
}

// UnimplementedEngineServer can be embedded to have forward compatible implementations.
type UnimplementedEngineServer struct {
}

func (*UnimplementedEngineServer) UserGetSession(ctx context.Context, req *UserGetSession_Input) (*UserGetSession_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetSession not implemented")
}
func (*UnimplementedEngineServer) UserSetPreferences(ctx context.Context, req *UserSetPreferences_Input) (*UserSetPreferences_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetPreferences not implemented")
}
func (*UnimplementedEngineServer) UserDeleteAccount(ctx context.Context, req *UserDeleteAccount_Input) (*UserDeleteAccount_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteAccount not implemented")
}
func (*UnimplementedEngineServer) ChallengeList(ctx context.Context, req *ChallengeList_Input) (*ChallengeList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeList not implemented")
}
func (*UnimplementedEngineServer) ChallengeGet(ctx context.Context, req *ChallengeGet_Input) (*ChallengeGet_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeGet not implemented")
}
func (*UnimplementedEngineServer) SeasonChallengeList(ctx context.Context, req *SeasonChallengeList_Input) (*SeasonChallengeList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeasonChallengeList not implemented")
}
func (*UnimplementedEngineServer) SeasonChallengeGet(ctx context.Context, req *SeasonChallengeGet_Input) (*SeasonChallengeGet_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeasonChallengeGet not implemented")
}
func (*UnimplementedEngineServer) SeasonChallengeBuy(ctx context.Context, req *SeasonChallengeBuy_Input) (*SeasonChallengeBuy_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeasonChallengeBuy not implemented")
}
func (*UnimplementedEngineServer) ChallengeSubscriptionValidate(ctx context.Context, req *ChallengeSubscriptionValidate_Input) (*ChallengeSubscriptionValidate_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeSubscriptionValidate not implemented")
}
func (*UnimplementedEngineServer) ChallengeSubscriptionClose(ctx context.Context, req *ChallengeSubscriptionClose_Input) (*ChallengeSubscriptionClose_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeSubscriptionClose not implemented")
}
func (*UnimplementedEngineServer) OrganizationList(ctx context.Context, req *OrganizationList_Input) (*OrganizationList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrganizationList not implemented")
}
func (*UnimplementedEngineServer) TeamList(ctx context.Context, req *TeamList_Input) (*TeamList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamList not implemented")
}
func (*UnimplementedEngineServer) TeamGet(ctx context.Context, req *TeamGet_Input) (*TeamGet_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamGet not implemented")
}
func (*UnimplementedEngineServer) TeamCreate(ctx context.Context, req *TeamCreate_Input) (*TeamCreate_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamCreate not implemented")
}
func (*UnimplementedEngineServer) TeamSendInvite(ctx context.Context, req *TeamSendInvite_Input) (*TeamSendInvite_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamSendInvite not implemented")
}
func (*UnimplementedEngineServer) TeamAcceptInvite(ctx context.Context, req *TeamAcceptInvite_Input) (*TeamAcceptInvite_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamAcceptInvite not implemented")
}
func (*UnimplementedEngineServer) ToolPing(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolPing not implemented")
}
func (*UnimplementedEngineServer) ToolStatus(ctx context.Context, req *GetStatus_Input) (*GetStatus_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolStatus not implemented")
}
func (*UnimplementedEngineServer) ToolInfo(ctx context.Context, req *GetInfo_Input) (*GetInfo_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolInfo not implemented")
}
func (*UnimplementedEngineServer) ToolGenerateFakeData(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolGenerateFakeData not implemented")
}
func (*UnimplementedEngineServer) ToolDBDump(ctx context.Context, req *Void) (*pwdb.Dump, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolDBDump not implemented")
}

func RegisterEngineServer(s *grpc.Server, srv EngineServer) {
	s.RegisterService(&_Engine_serviceDesc, srv)
}

func _Engine_UserGetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetSession_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).UserGetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/UserGetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).UserGetSession(ctx, req.(*UserGetSession_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_UserSetPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSetPreferences_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).UserSetPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/UserSetPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).UserSetPreferences(ctx, req.(*UserSetPreferences_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_UserDeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteAccount_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).UserDeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/UserDeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).UserDeleteAccount(ctx, req.(*UserDeleteAccount_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ChallengeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ChallengeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ChallengeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ChallengeList(ctx, req.(*ChallengeList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ChallengeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeGet_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ChallengeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ChallengeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ChallengeGet(ctx, req.(*ChallengeGet_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_SeasonChallengeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonChallengeList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).SeasonChallengeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/SeasonChallengeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).SeasonChallengeList(ctx, req.(*SeasonChallengeList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_SeasonChallengeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonChallengeGet_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).SeasonChallengeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/SeasonChallengeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).SeasonChallengeGet(ctx, req.(*SeasonChallengeGet_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_SeasonChallengeBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonChallengeBuy_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).SeasonChallengeBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/SeasonChallengeBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).SeasonChallengeBuy(ctx, req.(*SeasonChallengeBuy_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ChallengeSubscriptionValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeSubscriptionValidate_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ChallengeSubscriptionValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ChallengeSubscriptionValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ChallengeSubscriptionValidate(ctx, req.(*ChallengeSubscriptionValidate_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ChallengeSubscriptionClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeSubscriptionClose_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ChallengeSubscriptionClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ChallengeSubscriptionClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ChallengeSubscriptionClose(ctx, req.(*ChallengeSubscriptionClose_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_OrganizationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).OrganizationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/OrganizationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).OrganizationList(ctx, req.(*OrganizationList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_TeamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).TeamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/TeamList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).TeamList(ctx, req.(*TeamList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_TeamGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamGet_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).TeamGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/TeamGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).TeamGet(ctx, req.(*TeamGet_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_TeamCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamCreate_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).TeamCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/TeamCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).TeamCreate(ctx, req.(*TeamCreate_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_TeamSendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamSendInvite_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).TeamSendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/TeamSendInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).TeamSendInvite(ctx, req.(*TeamSendInvite_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_TeamAcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamAcceptInvite_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).TeamAcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/TeamAcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).TeamAcceptInvite(ctx, req.(*TeamAcceptInvite_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ToolPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ToolPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ToolPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ToolPing(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ToolStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatus_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ToolStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ToolStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ToolStatus(ctx, req.(*GetStatus_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ToolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfo_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ToolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ToolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ToolInfo(ctx, req.(*GetInfo_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ToolGenerateFakeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ToolGenerateFakeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ToolGenerateFakeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ToolGenerateFakeData(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ToolDBDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ToolDBDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.engine.Engine/ToolDBDump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ToolDBDump(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Engine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pathwar.engine.Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserGetSession",
			Handler:    _Engine_UserGetSession_Handler,
		},
		{
			MethodName: "UserSetPreferences",
			Handler:    _Engine_UserSetPreferences_Handler,
		},
		{
			MethodName: "UserDeleteAccount",
			Handler:    _Engine_UserDeleteAccount_Handler,
		},
		{
			MethodName: "ChallengeList",
			Handler:    _Engine_ChallengeList_Handler,
		},
		{
			MethodName: "ChallengeGet",
			Handler:    _Engine_ChallengeGet_Handler,
		},
		{
			MethodName: "SeasonChallengeList",
			Handler:    _Engine_SeasonChallengeList_Handler,
		},
		{
			MethodName: "SeasonChallengeGet",
			Handler:    _Engine_SeasonChallengeGet_Handler,
		},
		{
			MethodName: "SeasonChallengeBuy",
			Handler:    _Engine_SeasonChallengeBuy_Handler,
		},
		{
			MethodName: "ChallengeSubscriptionValidate",
			Handler:    _Engine_ChallengeSubscriptionValidate_Handler,
		},
		{
			MethodName: "ChallengeSubscriptionClose",
			Handler:    _Engine_ChallengeSubscriptionClose_Handler,
		},
		{
			MethodName: "OrganizationList",
			Handler:    _Engine_OrganizationList_Handler,
		},
		{
			MethodName: "TeamList",
			Handler:    _Engine_TeamList_Handler,
		},
		{
			MethodName: "TeamGet",
			Handler:    _Engine_TeamGet_Handler,
		},
		{
			MethodName: "TeamCreate",
			Handler:    _Engine_TeamCreate_Handler,
		},
		{
			MethodName: "TeamSendInvite",
			Handler:    _Engine_TeamSendInvite_Handler,
		},
		{
			MethodName: "TeamAcceptInvite",
			Handler:    _Engine_TeamAcceptInvite_Handler,
		},
		{
			MethodName: "ToolPing",
			Handler:    _Engine_ToolPing_Handler,
		},
		{
			MethodName: "ToolStatus",
			Handler:    _Engine_ToolStatus_Handler,
		},
		{
			MethodName: "ToolInfo",
			Handler:    _Engine_ToolInfo_Handler,
		},
		{
			MethodName: "ToolGenerateFakeData",
			Handler:    _Engine_ToolGenerateFakeData_Handler,
		},
		{
			MethodName: "ToolDBDump",
			Handler:    _Engine_ToolDBDump_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pwengine.proto",
}

func (m *TeamGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeamGet_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamGet_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamGet_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamGet_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamGet_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamGet_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeList_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeList_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeList_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeList_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeList_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeList_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwengine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeGet_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeGet_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeGet_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonChallengeID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.SeasonChallengeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeGet_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeGet_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeGet_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChallengeGet_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeGet_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeGet_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.ChallengeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeGet_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeGet_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeGet_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeBuy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeBuy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeBuy_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeBuy_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeBuy_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x10
	}
	if m.SeasonChallengeID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.SeasonChallengeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeBuy_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeBuy_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeBuy_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeSubscription != nil {
		{
			size, err := m.ChallengeSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionValidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionValidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionValidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionValidate_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionValidate_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionValidate_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Passphrase) > 0 {
		i -= len(m.Passphrase)
		copy(dAtA[i:], m.Passphrase)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.Passphrase)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChallengeSubscriptionID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.ChallengeSubscriptionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionValidate_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionValidate_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionValidate_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeValidation != nil {
		{
			size, err := m.ChallengeValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionClose_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionClose_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionClose_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeSubscriptionID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.ChallengeSubscriptionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionClose_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionClose_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionClose_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeSubscription != nil {
		{
			size, err := m.ChallengeSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeamList_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamList_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamList_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamList_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamList_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamList_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwengine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TeamCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeamCreate_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamCreate_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamCreate_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrganizationID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.OrganizationID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamCreate_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamCreate_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamCreate_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamSendInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamSendInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamSendInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeamSendInvite_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamSendInvite_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamSendInvite_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.TeamID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamSendInvite_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamSendInvite_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamSendInvite_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamMember != nil {
		{
			size, err := m.TeamMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamAcceptInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamAcceptInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamAcceptInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeamAcceptInvite_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamAcceptInvite_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamAcceptInvite_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamMemberID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.TeamMemberID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamAcceptInvite_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamAcceptInvite_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamAcceptInvite_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamMember != nil {
		{
			size, err := m.TeamMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserSetPreferences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSetPreferences) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSetPreferences) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserSetPreferences_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSetPreferences_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSetPreferences_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveSeasonID != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.ActiveSeasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserSetPreferences_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSetPreferences_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSetPreferences_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserDeleteAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDeleteAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDeleteAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserDeleteAccount_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDeleteAccount_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDeleteAccount_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserDeleteAccount_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDeleteAccount_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDeleteAccount_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrganizationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrganizationList_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationList_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationList_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrganizationList_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationList_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationList_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwengine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChallengeList_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeList_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeList_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChallengeList_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeList_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeList_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwengine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserGetSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGetSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserGetSession_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetSession_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGetSession_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserGetSession_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetSession_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGetSession_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seasons) > 0 {
		for iNdEx := len(m.Seasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwengine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Notifications != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.Notifications))
		i--
		dAtA[i] = 0x20
	}
	if m.Claims != nil {
		{
			size, err := m.Claims.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsNewUser {
		i--
		if m.IsNewUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserGetSession_Output_SeasonAndTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetSession_Output_SeasonAndTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGetSession_Output_SeasonAndTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwengine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetStatus_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatus_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatus_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetStatus_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatus_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatus_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EverythingIsOK {
		i--
		if m.EverythingIsOK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetInfo_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfo_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfo_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetInfo_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfo_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfo_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuiltBy) > 0 {
		i -= len(m.BuiltBy)
		copy(dAtA[i:], m.BuiltBy)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.BuiltBy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuiltAt) > 0 {
		i -= len(m.BuiltAt)
		copy(dAtA[i:], m.BuiltAt)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.BuiltAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Uptime != 0 {
		i = encodeVarintPwengine(dAtA, i, uint64(m.Uptime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPwengine(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Void) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Void) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Void) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPwengine(dAtA []byte, offset int, v uint64) int {
	offset -= sovPwengine(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TeamGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeamGet_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovPwengine(uint64(m.TeamID))
	}
	return n
}

func (m *TeamGet_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *SeasonChallengeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SeasonChallengeList_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonID != 0 {
		n += 1 + sovPwengine(uint64(m.SeasonID))
	}
	return n
}

func (m *SeasonChallengeList_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwengine(uint64(l))
		}
	}
	return n
}

func (m *SeasonChallengeGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SeasonChallengeGet_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonChallengeID != 0 {
		n += 1 + sovPwengine(uint64(m.SeasonChallengeID))
	}
	return n
}

func (m *SeasonChallengeGet_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *ChallengeGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChallengeGet_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeID != 0 {
		n += 1 + sovPwengine(uint64(m.ChallengeID))
	}
	return n
}

func (m *ChallengeGet_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *SeasonChallengeBuy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SeasonChallengeBuy_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonChallengeID != 0 {
		n += 1 + sovPwengine(uint64(m.SeasonChallengeID))
	}
	if m.TeamID != 0 {
		n += 1 + sovPwengine(uint64(m.TeamID))
	}
	return n
}

func (m *SeasonChallengeBuy_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeSubscription != nil {
		l = m.ChallengeSubscription.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *ChallengeSubscriptionValidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChallengeSubscriptionValidate_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeSubscriptionID != 0 {
		n += 1 + sovPwengine(uint64(m.ChallengeSubscriptionID))
	}
	l = len(m.Passphrase)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *ChallengeSubscriptionValidate_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeValidation != nil {
		l = m.ChallengeValidation.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *ChallengeSubscriptionClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChallengeSubscriptionClose_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeSubscriptionID != 0 {
		n += 1 + sovPwengine(uint64(m.ChallengeSubscriptionID))
	}
	return n
}

func (m *ChallengeSubscriptionClose_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeSubscription != nil {
		l = m.ChallengeSubscription.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *TeamList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeamList_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonID != 0 {
		n += 1 + sovPwengine(uint64(m.SeasonID))
	}
	return n
}

func (m *TeamList_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwengine(uint64(l))
		}
	}
	return n
}

func (m *TeamCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeamCreate_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrganizationID != 0 {
		n += 1 + sovPwengine(uint64(m.OrganizationID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.SeasonID != 0 {
		n += 1 + sovPwengine(uint64(m.SeasonID))
	}
	return n
}

func (m *TeamCreate_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *TeamSendInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeamSendInvite_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovPwengine(uint64(m.TeamID))
	}
	if m.UserID != 0 {
		n += 1 + sovPwengine(uint64(m.UserID))
	}
	return n
}

func (m *TeamSendInvite_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamMember != nil {
		l = m.TeamMember.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *TeamAcceptInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeamAcceptInvite_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamMemberID != 0 {
		n += 1 + sovPwengine(uint64(m.TeamMemberID))
	}
	return n
}

func (m *TeamAcceptInvite_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamMember != nil {
		l = m.TeamMember.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *UserSetPreferences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserSetPreferences_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveSeasonID != 0 {
		n += 1 + sovPwengine(uint64(m.ActiveSeasonID))
	}
	return n
}

func (m *UserSetPreferences_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserDeleteAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserDeleteAccount_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *UserDeleteAccount_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrganizationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrganizationList_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrganizationList_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwengine(uint64(l))
		}
	}
	return n
}

func (m *ChallengeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChallengeList_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChallengeList_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwengine(uint64(l))
		}
	}
	return n
}

func (m *UserGetSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserGetSession_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserGetSession_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.IsNewUser {
		n += 2
	}
	if m.Claims != nil {
		l = m.Claims.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.Notifications != 0 {
		n += 1 + sovPwengine(uint64(m.Notifications))
	}
	if len(m.Seasons) > 0 {
		for _, e := range m.Seasons {
			l = e.Size()
			n += 1 + l + sovPwengine(uint64(l))
		}
	}
	return n
}

func (m *UserGetSession_Output_SeasonAndTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Season != nil {
		l = m.Season.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *GetStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetStatus_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetStatus_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EverythingIsOK {
		n += 2
	}
	return n
}

func (m *GetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetInfo_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetInfo_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	if m.Uptime != 0 {
		n += 1 + sovPwengine(uint64(m.Uptime))
	}
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	l = len(m.BuiltAt)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	l = len(m.BuiltBy)
	if l > 0 {
		n += 1 + l + sovPwengine(uint64(l))
	}
	return n
}

func (m *Void) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPwengine(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPwengine(x uint64) (n int) {
	return sovPwengine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TeamGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamGet_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamGet_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &pwdb.Team{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeList_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeList_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &pwdb.SeasonChallenge{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeGet_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallengeID", wireType)
			}
			m.SeasonChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeGet_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &pwdb.SeasonChallenge{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeGet_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeID", wireType)
			}
			m.ChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeGet_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &pwdb.Challenge{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeBuy_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallengeID", wireType)
			}
			m.SeasonChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeBuy_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeSubscription == nil {
				m.ChallengeSubscription = &pwdb.ChallengeSubscription{}
			}
			if err := m.ChallengeSubscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionValidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeSubscriptionValidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeSubscriptionValidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionValidate_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptionID", wireType)
			}
			m.ChallengeSubscriptionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeSubscriptionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passphrase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passphrase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionValidate_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeValidation == nil {
				m.ChallengeValidation = &pwdb.ChallengeValidation{}
			}
			if err := m.ChallengeValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeSubscriptionClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeSubscriptionClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionClose_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptionID", wireType)
			}
			m.ChallengeSubscriptionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeSubscriptionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionClose_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeSubscription == nil {
				m.ChallengeSubscription = &pwdb.ChallengeSubscription{}
			}
			if err := m.ChallengeSubscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamList_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamList_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &pwdb.Team{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamCreate_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			m.OrganizationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizationID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamCreate_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &pwdb.Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamSendInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamSendInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamSendInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamSendInvite_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamSendInvite_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamMember == nil {
				m.TeamMember = &pwdb.TeamMember{}
			}
			if err := m.TeamMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamAcceptInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamAcceptInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamAcceptInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamAcceptInvite_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMemberID", wireType)
			}
			m.TeamMemberID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamMemberID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamAcceptInvite_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamMember == nil {
				m.TeamMember = &pwdb.TeamMember{}
			}
			if err := m.TeamMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSetPreferences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSetPreferences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSetPreferences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSetPreferences_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSeasonID", wireType)
			}
			m.ActiveSeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveSeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSetPreferences_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDeleteAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDeleteAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDeleteAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDeleteAccount_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDeleteAccount_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationList_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationList_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &pwdb.Organization{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeList_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeList_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &pwdb.Challenge{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGetSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGetSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetSession_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetSession_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &pwdb.User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNewUser = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claims == nil {
				m.Claims = &pwsso.Claims{}
			}
			if err := m.Claims.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			m.Notifications = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Notifications |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seasons = append(m.Seasons, &UserGetSession_Output_SeasonAndTeam{})
			if err := m.Seasons[len(m.Seasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetSession_Output_SeasonAndTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonAndTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonAndTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &pwdb.Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &pwdb.Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatus_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatus_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EverythingIsOK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EverythingIsOK = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfo_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfo_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			m.Uptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuiltAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuiltAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuiltBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwengine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuiltBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Void) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Void: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Void: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPwengine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPwengine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwengine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPwengine
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPwengine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPwengine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPwengine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPwengine
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPwengine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPwengine   = fmt.Errorf("proto: integer overflow")
)
