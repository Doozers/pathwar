// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pwcompose.proto

package pwcompose

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpRequest struct {
}

func (m *UpRequest) Reset()         { *m = UpRequest{} }
func (m *UpRequest) String() string { return proto.CompactTextString(m) }
func (*UpRequest) ProtoMessage()    {}
func (*UpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35de7e3bbf4b31ab, []int{0}
}
func (m *UpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpRequest.Merge(m, src)
}
func (m *UpRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpRequest proto.InternalMessageInfo

type UpReply struct {
}

func (m *UpReply) Reset()         { *m = UpReply{} }
func (m *UpReply) String() string { return proto.CompactTextString(m) }
func (*UpReply) ProtoMessage()    {}
func (*UpReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_35de7e3bbf4b31ab, []int{1}
}
func (m *UpReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpReply.Merge(m, src)
}
func (m *UpReply) XXX_Size() int {
	return m.Size()
}
func (m *UpReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UpRequest)(nil), "pathwar.compose.UpRequest")
	proto.RegisterType((*UpReply)(nil), "pathwar.compose.UpReply")
}

func init() { proto.RegisterFile("pwcompose.proto", fileDescriptor_35de7e3bbf4b31ab) }

var fileDescriptor_35de7e3bbf4b31ab = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4b, 0xc4, 0x30,
	0x14, 0xc7, 0xaf, 0x07, 0x7a, 0x5e, 0x44, 0x0e, 0x3a, 0x49, 0xd1, 0x0c, 0xdd, 0xdb, 0x80, 0x0e,
	0xee, 0x3a, 0xb9, 0x2a, 0x5d, 0xdc, 0xd2, 0x1a, 0xdf, 0x15, 0x6b, 0xde, 0x33, 0x49, 0x29, 0x5d,
	0xfd, 0x04, 0x82, 0x5f, 0xca, 0xf1, 0xc0, 0xc5, 0x51, 0x5a, 0x3f, 0x88, 0x34, 0xad, 0x87, 0xa8,
	0x5b, 0x7e, 0x2f, 0xbf, 0xbc, 0xbc, 0xf7, 0x67, 0x2b, 0x6a, 0x0a, 0x7c, 0x20, 0xb4, 0x2a, 0x25,
	0x83, 0x0e, 0xc3, 0x15, 0x49, 0xb7, 0x6e, 0xa4, 0x49, 0xa7, 0x72, 0x74, 0x04, 0x88, 0x50, 0x29,
	0x21, 0xa9, 0x14, 0x52, 0x6b, 0x74, 0xd2, 0x95, 0xa8, 0xed, 0xa8, 0x47, 0x09, 0x94, 0x6e, 0x5d,
	0xe7, 0x83, 0x2d, 0x00, 0x01, 0x85, 0x2f, 0xe7, 0xf5, 0x9d, 0x27, 0x0f, 0xfe, 0x34, 0xe9, 0xd7,
	0x3f, 0x75, 0x43, 0x45, 0xa2, 0x0a, 0xb4, 0xad, 0x75, 0x6a, 0x42, 0x90, 0x4e, 0x35, 0xb2, 0x1d,
	0xbb, 0x14, 0x09, 0x28, 0x9d, 0xd8, 0x46, 0x02, 0x28, 0x23, 0x90, 0xfc, 0xbf, 0x7f, 0x67, 0x88,
	0xf7, 0xd9, 0x32, 0xa3, 0x2b, 0xf5, 0x58, 0x2b, 0xeb, 0xe2, 0x25, 0x5b, 0x0c, 0x40, 0x55, 0x7b,
	0x92, 0xb1, 0xbd, 0x8b, 0x71, 0x09, 0x13, 0x5e, 0xb2, 0x79, 0x46, 0x61, 0x94, 0xfe, 0xda, 0x2e,
	0xdd, 0x3e, 0x8c, 0x0e, 0xff, 0xbd, 0xa3, 0xaa, 0x8d, 0x0f, 0x9e, 0xde, 0x3e, 0x5f, 0xe6, 0x8b,
	0x70, 0x47, 0x50, 0xa9, 0xe1, 0xfc, 0xec, 0xb5, 0xe3, 0xc1, 0xa6, 0xe3, 0xc1, 0x47, 0xc7, 0x83,
	0xe7, 0x9e, 0xcf, 0x36, 0x3d, 0x9f, 0xbd, 0xf7, 0x7c, 0x76, 0x73, 0xfc, 0xdd, 0xa1, 0x92, 0xfa,
	0x56, 0x0c, 0x61, 0xdc, 0x83, 0xd8, 0x06, 0x9c, 0xef, 0xfa, 0x71, 0x4f, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x3b, 0xd0, 0x45, 0xff, 0x74, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ComposerClient is the client API for Composer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComposerClient interface {
	// Verify the service is up and running
	Up(ctx context.Context, in *UpRequest, opts ...grpc.CallOption) (*UpReply, error)
}

type composerClient struct {
	cc *grpc.ClientConn
}

func NewComposerClient(cc *grpc.ClientConn) ComposerClient {
	return &composerClient{cc}
}

func (c *composerClient) Up(ctx context.Context, in *UpRequest, opts ...grpc.CallOption) (*UpReply, error) {
	out := new(UpReply)
	err := c.cc.Invoke(ctx, "/pathwar.compose.Composer/Up", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComposerServer is the server API for Composer service.
type ComposerServer interface {
	// Verify the service is up and running
	Up(context.Context, *UpRequest) (*UpReply, error)
}

// UnimplementedComposerServer can be embedded to have forward compatible implementations.
type UnimplementedComposerServer struct {
}

func (*UnimplementedComposerServer) Up(ctx context.Context, req *UpRequest) (*UpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Up not implemented")
}

func RegisterComposerServer(s *grpc.Server, srv ComposerServer) {
	s.RegisterService(&_Composer_serviceDesc, srv)
}

func _Composer_Up_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposerServer).Up(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.compose.Composer/Up",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposerServer).Up(ctx, req.(*UpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Composer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pathwar.compose.Composer",
	HandlerType: (*ComposerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Up",
			Handler:    _Composer_Up_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pwcompose.proto",
}

func (m *UpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPwcompose(dAtA []byte, offset int, v uint64) int {
	offset -= sovPwcompose(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPwcompose(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPwcompose(x uint64) (n int) {
	return sovPwcompose(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwcompose
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwcompose(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwcompose
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwcompose
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwcompose
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwcompose(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwcompose
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwcompose
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPwcompose(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPwcompose
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwcompose
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwcompose
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPwcompose
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPwcompose
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPwcompose
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPwcompose(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPwcompose
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPwcompose = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPwcompose   = fmt.Errorf("proto: integer overflow")
)
