// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pwes.proto

package pwes

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	pwdb "pathwar.land/pathwar/v2/go/pkg/pwdb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	Id        int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Event) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type EventUserRegister struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventUserRegister) Reset()         { *m = EventUserRegister{} }
func (m *EventUserRegister) String() string { return proto.CompactTextString(m) }
func (*EventUserRegister) ProtoMessage()    {}
func (*EventUserRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{1}
}
func (m *EventUserRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUserRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUserRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUserRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUserRegister.Merge(m, src)
}
func (m *EventUserRegister) XXX_Size() int {
	return m.Size()
}
func (m *EventUserRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUserRegister.DiscardUnknown(m)
}

var xxx_messageInfo_EventUserRegister proto.InternalMessageInfo

func (m *EventUserRegister) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventUserLogin struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventUserLogin) Reset()         { *m = EventUserLogin{} }
func (m *EventUserLogin) String() string { return proto.CompactTextString(m) }
func (*EventUserLogin) ProtoMessage()    {}
func (*EventUserLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{2}
}
func (m *EventUserLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUserLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUserLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUserLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUserLogin.Merge(m, src)
}
func (m *EventUserLogin) XXX_Size() int {
	return m.Size()
}
func (m *EventUserLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUserLogin.DiscardUnknown(m)
}

var xxx_messageInfo_EventUserLogin proto.InternalMessageInfo

func (m *EventUserLogin) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventUserSetPreferences struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventUserSetPreferences) Reset()         { *m = EventUserSetPreferences{} }
func (m *EventUserSetPreferences) String() string { return proto.CompactTextString(m) }
func (*EventUserSetPreferences) ProtoMessage()    {}
func (*EventUserSetPreferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{3}
}
func (m *EventUserSetPreferences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUserSetPreferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUserSetPreferences.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUserSetPreferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUserSetPreferences.Merge(m, src)
}
func (m *EventUserSetPreferences) XXX_Size() int {
	return m.Size()
}
func (m *EventUserSetPreferences) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUserSetPreferences.DiscardUnknown(m)
}

var xxx_messageInfo_EventUserSetPreferences proto.InternalMessageInfo

func (m *EventUserSetPreferences) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventUserDeleteAccount struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventUserDeleteAccount) Reset()         { *m = EventUserDeleteAccount{} }
func (m *EventUserDeleteAccount) String() string { return proto.CompactTextString(m) }
func (*EventUserDeleteAccount) ProtoMessage()    {}
func (*EventUserDeleteAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{4}
}
func (m *EventUserDeleteAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUserDeleteAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUserDeleteAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUserDeleteAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUserDeleteAccount.Merge(m, src)
}
func (m *EventUserDeleteAccount) XXX_Size() int {
	return m.Size()
}
func (m *EventUserDeleteAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUserDeleteAccount.DiscardUnknown(m)
}

var xxx_messageInfo_EventUserDeleteAccount proto.InternalMessageInfo

func (m *EventUserDeleteAccount) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventSeasonChallengeBuy struct {
	Event           *Event          `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	SeasonChallenge *pwdb.Challenge `protobuf:"bytes,2,opt,name=seasonChallenge,proto3" json:"seasonChallenge,omitempty"`
	Team            *pwdb.Team      `protobuf:"bytes,3,opt,name=team,proto3" json:"team,omitempty"`
}

func (m *EventSeasonChallengeBuy) Reset()         { *m = EventSeasonChallengeBuy{} }
func (m *EventSeasonChallengeBuy) String() string { return proto.CompactTextString(m) }
func (*EventSeasonChallengeBuy) ProtoMessage()    {}
func (*EventSeasonChallengeBuy) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{5}
}
func (m *EventSeasonChallengeBuy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSeasonChallengeBuy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSeasonChallengeBuy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSeasonChallengeBuy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSeasonChallengeBuy.Merge(m, src)
}
func (m *EventSeasonChallengeBuy) XXX_Size() int {
	return m.Size()
}
func (m *EventSeasonChallengeBuy) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSeasonChallengeBuy.DiscardUnknown(m)
}

var xxx_messageInfo_EventSeasonChallengeBuy proto.InternalMessageInfo

func (m *EventSeasonChallengeBuy) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EventSeasonChallengeBuy) GetSeasonChallenge() *pwdb.Challenge {
	if m != nil {
		return m.SeasonChallenge
	}
	return nil
}

func (m *EventSeasonChallengeBuy) GetTeam() *pwdb.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type EventChallengeSubscriptionValidate struct {
	Event           *Event          `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	SeasonChallenge *pwdb.Challenge `protobuf:"bytes,2,opt,name=seasonChallenge,proto3" json:"seasonChallenge,omitempty"`
	Team            *pwdb.Team      `protobuf:"bytes,3,opt,name=team,proto3" json:"team,omitempty"`
}

func (m *EventChallengeSubscriptionValidate) Reset()         { *m = EventChallengeSubscriptionValidate{} }
func (m *EventChallengeSubscriptionValidate) String() string { return proto.CompactTextString(m) }
func (*EventChallengeSubscriptionValidate) ProtoMessage()    {}
func (*EventChallengeSubscriptionValidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{6}
}
func (m *EventChallengeSubscriptionValidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChallengeSubscriptionValidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChallengeSubscriptionValidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChallengeSubscriptionValidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChallengeSubscriptionValidate.Merge(m, src)
}
func (m *EventChallengeSubscriptionValidate) XXX_Size() int {
	return m.Size()
}
func (m *EventChallengeSubscriptionValidate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChallengeSubscriptionValidate.DiscardUnknown(m)
}

var xxx_messageInfo_EventChallengeSubscriptionValidate proto.InternalMessageInfo

func (m *EventChallengeSubscriptionValidate) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EventChallengeSubscriptionValidate) GetSeasonChallenge() *pwdb.Challenge {
	if m != nil {
		return m.SeasonChallenge
	}
	return nil
}

func (m *EventChallengeSubscriptionValidate) GetTeam() *pwdb.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type EventCouponValidate struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventCouponValidate) Reset()         { *m = EventCouponValidate{} }
func (m *EventCouponValidate) String() string { return proto.CompactTextString(m) }
func (*EventCouponValidate) ProtoMessage()    {}
func (*EventCouponValidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{7}
}
func (m *EventCouponValidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCouponValidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCouponValidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCouponValidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCouponValidate.Merge(m, src)
}
func (m *EventCouponValidate) XXX_Size() int {
	return m.Size()
}
func (m *EventCouponValidate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCouponValidate.DiscardUnknown(m)
}

var xxx_messageInfo_EventCouponValidate proto.InternalMessageInfo

func (m *EventCouponValidate) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventAgentRegister struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventAgentRegister) Reset()         { *m = EventAgentRegister{} }
func (m *EventAgentRegister) String() string { return proto.CompactTextString(m) }
func (*EventAgentRegister) ProtoMessage()    {}
func (*EventAgentRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{8}
}
func (m *EventAgentRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAgentRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAgentRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAgentRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAgentRegister.Merge(m, src)
}
func (m *EventAgentRegister) XXX_Size() int {
	return m.Size()
}
func (m *EventAgentRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAgentRegister.DiscardUnknown(m)
}

var xxx_messageInfo_EventAgentRegister proto.InternalMessageInfo

func (m *EventAgentRegister) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventAgentChallengeInstanceCreate struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventAgentChallengeInstanceCreate) Reset()         { *m = EventAgentChallengeInstanceCreate{} }
func (m *EventAgentChallengeInstanceCreate) String() string { return proto.CompactTextString(m) }
func (*EventAgentChallengeInstanceCreate) ProtoMessage()    {}
func (*EventAgentChallengeInstanceCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{9}
}
func (m *EventAgentChallengeInstanceCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAgentChallengeInstanceCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAgentChallengeInstanceCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAgentChallengeInstanceCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAgentChallengeInstanceCreate.Merge(m, src)
}
func (m *EventAgentChallengeInstanceCreate) XXX_Size() int {
	return m.Size()
}
func (m *EventAgentChallengeInstanceCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAgentChallengeInstanceCreate.DiscardUnknown(m)
}

var xxx_messageInfo_EventAgentChallengeInstanceCreate proto.InternalMessageInfo

func (m *EventAgentChallengeInstanceCreate) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventAgentChallengeInstanceUpdate struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventAgentChallengeInstanceUpdate) Reset()         { *m = EventAgentChallengeInstanceUpdate{} }
func (m *EventAgentChallengeInstanceUpdate) String() string { return proto.CompactTextString(m) }
func (*EventAgentChallengeInstanceUpdate) ProtoMessage()    {}
func (*EventAgentChallengeInstanceUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{10}
}
func (m *EventAgentChallengeInstanceUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAgentChallengeInstanceUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAgentChallengeInstanceUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAgentChallengeInstanceUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAgentChallengeInstanceUpdate.Merge(m, src)
}
func (m *EventAgentChallengeInstanceUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventAgentChallengeInstanceUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAgentChallengeInstanceUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventAgentChallengeInstanceUpdate proto.InternalMessageInfo

func (m *EventAgentChallengeInstanceUpdate) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventTeamCreation struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventTeamCreation) Reset()         { *m = EventTeamCreation{} }
func (m *EventTeamCreation) String() string { return proto.CompactTextString(m) }
func (*EventTeamCreation) ProtoMessage()    {}
func (*EventTeamCreation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{11}
}
func (m *EventTeamCreation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTeamCreation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTeamCreation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTeamCreation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTeamCreation.Merge(m, src)
}
func (m *EventTeamCreation) XXX_Size() int {
	return m.Size()
}
func (m *EventTeamCreation) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTeamCreation.DiscardUnknown(m)
}

var xxx_messageInfo_EventTeamCreation proto.InternalMessageInfo

func (m *EventTeamCreation) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventTeamInviteSend struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventTeamInviteSend) Reset()         { *m = EventTeamInviteSend{} }
func (m *EventTeamInviteSend) String() string { return proto.CompactTextString(m) }
func (*EventTeamInviteSend) ProtoMessage()    {}
func (*EventTeamInviteSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{12}
}
func (m *EventTeamInviteSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTeamInviteSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTeamInviteSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTeamInviteSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTeamInviteSend.Merge(m, src)
}
func (m *EventTeamInviteSend) XXX_Size() int {
	return m.Size()
}
func (m *EventTeamInviteSend) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTeamInviteSend.DiscardUnknown(m)
}

var xxx_messageInfo_EventTeamInviteSend proto.InternalMessageInfo

func (m *EventTeamInviteSend) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventTeamInviteAccept struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventTeamInviteAccept) Reset()         { *m = EventTeamInviteAccept{} }
func (m *EventTeamInviteAccept) String() string { return proto.CompactTextString(m) }
func (*EventTeamInviteAccept) ProtoMessage()    {}
func (*EventTeamInviteAccept) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2d271497a45f3be, []int{13}
}
func (m *EventTeamInviteAccept) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTeamInviteAccept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTeamInviteAccept.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTeamInviteAccept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTeamInviteAccept.Merge(m, src)
}
func (m *EventTeamInviteAccept) XXX_Size() int {
	return m.Size()
}
func (m *EventTeamInviteAccept) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTeamInviteAccept.DiscardUnknown(m)
}

var xxx_messageInfo_EventTeamInviteAccept proto.InternalMessageInfo

func (m *EventTeamInviteAccept) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "pathwar.es.Event")
	proto.RegisterType((*EventUserRegister)(nil), "pathwar.es.EventUserRegister")
	proto.RegisterType((*EventUserLogin)(nil), "pathwar.es.EventUserLogin")
	proto.RegisterType((*EventUserSetPreferences)(nil), "pathwar.es.EventUserSetPreferences")
	proto.RegisterType((*EventUserDeleteAccount)(nil), "pathwar.es.EventUserDeleteAccount")
	proto.RegisterType((*EventSeasonChallengeBuy)(nil), "pathwar.es.EventSeasonChallengeBuy")
	proto.RegisterType((*EventChallengeSubscriptionValidate)(nil), "pathwar.es.EventChallengeSubscriptionValidate")
	proto.RegisterType((*EventCouponValidate)(nil), "pathwar.es.EventCouponValidate")
	proto.RegisterType((*EventAgentRegister)(nil), "pathwar.es.EventAgentRegister")
	proto.RegisterType((*EventAgentChallengeInstanceCreate)(nil), "pathwar.es.EventAgentChallengeInstanceCreate")
	proto.RegisterType((*EventAgentChallengeInstanceUpdate)(nil), "pathwar.es.EventAgentChallengeInstanceUpdate")
	proto.RegisterType((*EventTeamCreation)(nil), "pathwar.es.EventTeamCreation")
	proto.RegisterType((*EventTeamInviteSend)(nil), "pathwar.es.EventTeamInviteSend")
	proto.RegisterType((*EventTeamInviteAccept)(nil), "pathwar.es.EventTeamInviteAccept")
}

func init() { proto.RegisterFile("pwes.proto", fileDescriptor_e2d271497a45f3be) }

var fileDescriptor_e2d271497a45f3be = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0x8e, 0x21, 0xf1, 0x4e, 0x1a, 0x2c, 0x68, 0x50, 0xf5, 0x10, 0x46, 0x84, 0xc4,
	0x2e, 0xb8, 0x52, 0xb9, 0x80, 0xc4, 0xbf, 0x74, 0x70, 0x98, 0xb4, 0x03, 0xa4, 0x1b, 0x07, 0x6e,
	0x8e, 0xf3, 0xce, 0xb5, 0x48, 0x6c, 0x2b, 0x76, 0x56, 0xf1, 0x2d, 0xf8, 0x1a, 0xdc, 0xf9, 0x10,
	0x1c, 0x77, 0xe4, 0x88, 0xda, 0x2f, 0x82, 0xe2, 0x34, 0x29, 0xec, 0x94, 0x22, 0x0e, 0xbb, 0xf9,
	0xcf, 0xf3, 0x7b, 0xfc, 0xd8, 0xc9, 0xfb, 0x02, 0xe8, 0x39, 0x1a, 0xa2, 0x0b, 0x65, 0x95, 0x0f,
	0x9a, 0xda, 0xd9, 0x9c, 0x16, 0x04, 0xcd, 0xf0, 0x09, 0x17, 0x76, 0x56, 0x26, 0x84, 0xa9, 0x7c,
	0xc4, 0x15, 0x57, 0x23, 0x27, 0x49, 0xca, 0x73, 0x37, 0x73, 0x13, 0x37, 0xaa, 0xd1, 0xe1, 0x03,
	0xae, 0x14, 0xcf, 0x70, 0xad, 0xb2, 0x22, 0x47, 0x63, 0x69, 0xae, 0x57, 0x02, 0xd0, 0xf3, 0x34,
	0xa9, 0xc7, 0xe1, 0x07, 0xd8, 0x7e, 0x77, 0x81, 0xd2, 0xfa, 0xbb, 0xd0, 0x17, 0xe9, 0xc0, 0x3b,
	0xf0, 0x0e, 0xb7, 0xe2, 0xbe, 0x48, 0xfd, 0x67, 0x70, 0x8b, 0x15, 0x48, 0x2d, 0xa6, 0x91, 0x1d,
	0xf4, 0x0f, 0xbc, 0xc3, 0x9d, 0xf1, 0x90, 0xd4, 0xce, 0xa4, 0x71, 0x26, 0xa7, 0x8d, 0x73, 0xbc,
	0x16, 0x87, 0x2f, 0x60, 0xcf, 0x59, 0x9e, 0x19, 0x2c, 0x62, 0xe4, 0xc2, 0x58, 0x2c, 0xfc, 0xc7,
	0xb0, 0x8d, 0xd5, 0xa2, 0x3b, 0x61, 0x67, 0xbc, 0x47, 0xd6, 0xf7, 0x23, 0x4e, 0x1d, 0xd7, 0xfb,
	0xe1, 0x73, 0xd8, 0x6d, 0xe9, 0x13, 0xc5, 0x85, 0xec, 0x8e, 0x4e, 0xe0, 0x7e, 0x8b, 0x4e, 0xd1,
	0xbe, 0x2f, 0xf0, 0x1c, 0x0b, 0x94, 0x0c, 0x4d, 0x77, 0x8f, 0x08, 0xee, 0xb5, 0x1e, 0x6f, 0x31,
	0x43, 0x8b, 0x11, 0x63, 0xaa, 0x94, 0xb6, 0xbb, 0xc5, 0x37, 0x6f, 0x95, 0x63, 0x8a, 0xd4, 0x28,
	0x79, 0x34, 0xa3, 0x59, 0x86, 0x92, 0xe3, 0xa4, 0xfc, 0xd2, 0xd9, 0xc4, 0x7f, 0x0d, 0xb7, 0xcd,
	0xdf, 0xf8, 0xea, 0x23, 0xec, 0xb7, 0x48, 0x9a, 0x90, 0x76, 0x33, 0xbe, 0xaa, 0xf6, 0x1f, 0xc1,
	0x0d, 0x8b, 0x34, 0x1f, 0x6c, 0x39, 0xea, 0xce, 0x9f, 0xd4, 0x29, 0xd2, 0x3c, 0x76, 0xbb, 0xe1,
	0x77, 0x0f, 0x42, 0x77, 0x6e, 0x0b, 0x4e, 0xcb, 0xc4, 0xb0, 0x42, 0x68, 0x2b, 0x94, 0xfc, 0x48,
	0x33, 0x91, 0x52, 0x8b, 0xd7, 0x2e, 0xf6, 0x2b, 0xb8, 0x5b, 0xa7, 0x56, 0xa5, 0xfe, 0x87, 0x98,
	0xe1, 0x4b, 0xf0, 0xdd, 0x3c, 0xe2, 0xd5, 0xe2, 0xc6, 0xff, 0xe8, 0x09, 0x3c, 0x5c, 0xe3, 0x6d,
	0xf6, 0x63, 0x69, 0x2c, 0x95, 0x0c, 0x8f, 0x5c, 0x25, 0xfc, 0x2f, 0xb7, 0x33, 0xbd, 0xd9, 0xd5,
	0x9a, 0xea, 0xab, 0x5e, 0xcb, 0x25, 0x11, 0x6a, 0x83, 0x12, 0x6a, 0x1e, 0xb6, 0xa2, 0x8f, 0xe5,
	0x85, 0xb0, 0x38, 0x45, 0x99, 0x76, 0xe7, 0xdf, 0xc0, 0xfe, 0x15, 0x3e, 0x62, 0x0c, 0x75, 0xf7,
	0xea, 0x99, 0x8c, 0x7f, 0x2c, 0x02, 0xef, 0x72, 0x11, 0x78, 0xbf, 0x16, 0x81, 0xf7, 0x75, 0x19,
	0xf4, 0x2e, 0x97, 0x41, 0xef, 0xe7, 0x32, 0xe8, 0x7d, 0x1a, 0x34, 0x48, 0x46, 0x65, 0x3a, 0xaa,
	0xda, 0xe0, 0x67, 0x3e, 0xaa, 0x5a, 0x66, 0x72, 0xd3, 0x35, 0xa4, 0xa7, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xe7, 0x46, 0x10, 0x4e, 0x41, 0x05, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPwes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventUserRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUserRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUserRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUserLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUserLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUserLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUserSetPreferences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUserSetPreferences) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUserSetPreferences) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUserDeleteAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUserDeleteAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUserDeleteAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSeasonChallengeBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSeasonChallengeBuy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSeasonChallengeBuy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SeasonChallenge != nil {
		{
			size, err := m.SeasonChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChallengeSubscriptionValidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChallengeSubscriptionValidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChallengeSubscriptionValidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SeasonChallenge != nil {
		{
			size, err := m.SeasonChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCouponValidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCouponValidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCouponValidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAgentRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAgentRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAgentRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAgentChallengeInstanceCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAgentChallengeInstanceCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAgentChallengeInstanceCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAgentChallengeInstanceUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAgentChallengeInstanceUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAgentChallengeInstanceUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventTeamCreation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTeamCreation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTeamCreation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventTeamInviteSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTeamInviteSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTeamInviteSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventTeamInviteAccept) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTeamInviteAccept) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTeamInviteAccept) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPwes(dAtA []byte, offset int, v uint64) int {
	offset -= sovPwes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPwes(uint64(m.Id))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventUserRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventUserLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventUserSetPreferences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventUserDeleteAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventSeasonChallengeBuy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	if m.SeasonChallenge != nil {
		l = m.SeasonChallenge.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventChallengeSubscriptionValidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	if m.SeasonChallenge != nil {
		l = m.SeasonChallenge.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventCouponValidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventAgentRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventAgentChallengeInstanceCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventAgentChallengeInstanceUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventTeamCreation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventTeamInviteSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func (m *EventTeamInviteAccept) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPwes(uint64(l))
	}
	return n
}

func sovPwes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPwes(x uint64) (n int) {
	return sovPwes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &timestamp.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUserRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUserRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUserRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUserLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUserLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUserLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUserSetPreferences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUserSetPreferences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUserSetPreferences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUserDeleteAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUserDeleteAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUserDeleteAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSeasonChallengeBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSeasonChallengeBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSeasonChallengeBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonChallenge == nil {
				m.SeasonChallenge = &pwdb.Challenge{}
			}
			if err := m.SeasonChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &pwdb.Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChallengeSubscriptionValidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChallengeSubscriptionValidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChallengeSubscriptionValidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonChallenge == nil {
				m.SeasonChallenge = &pwdb.Challenge{}
			}
			if err := m.SeasonChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &pwdb.Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCouponValidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCouponValidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCouponValidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAgentRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAgentRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAgentRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAgentChallengeInstanceCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAgentChallengeInstanceCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAgentChallengeInstanceCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAgentChallengeInstanceUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAgentChallengeInstanceUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAgentChallengeInstanceUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTeamCreation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTeamCreation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTeamCreation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTeamInviteSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTeamInviteSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTeamInviteSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTeamInviteAccept) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTeamInviteAccept: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTeamInviteAccept: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPwes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPwes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPwes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPwes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPwes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPwes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPwes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPwes = fmt.Errorf("proto: unexpected end of group")
)
