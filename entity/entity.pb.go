// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entity/entity.proto

package entity

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TeamMember_Role int32

const (
	TeamMember_Undefined TeamMember_Role = 0
	TeamMember_Owner     TeamMember_Role = 1
	TeamMember_Basic     TeamMember_Role = 2
)

var TeamMember_Role_name = map[int32]string{
	0: "Undefined",
	1: "Owner",
	2: "Basic",
}

var TeamMember_Role_value = map[string]int32{
	"Undefined": 0,
	"Owner":     1,
	"Basic":     2,
}

func (x TeamMember_Role) String() string {
	return proto.EnumName(TeamMember_Role_name, int32(x))
}

func (TeamMember_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{1, 0}
}

//
// fields
//
type Achievement_Type int32

const (
	Achievement_Undefined                      Achievement_Type = 0
	Achievement_Buy1LevelAchievement           Achievement_Type = 1
	Achievement_Buy5LevelsAchievement          Achievement_Type = 2
	Achievement_Buy10LevelsAchievements        Achievement_Type = 3
	Achievement_Buy20LevelsAchievements        Achievement_Type = 4
	Achievement_Buy50LevelsAchievements        Achievement_Type = 5
	Achievement_Buy100LevelsAchievements       Achievement_Type = 6
	Achievement_Buy200LevelsAchievements       Achievement_Type = 7
	Achievement_Buy500LevelsAchievements       Achievement_Type = 8
	Achievement_Buy1000LevelsAchievements      Achievement_Type = 9
	Achievement_Validate1LevelAchievement      Achievement_Type = 10
	Achievement_Validate5LevelsAchievement     Achievement_Type = 11
	Achievement_Validate10LevelsAchievements   Achievement_Type = 12
	Achievement_Validate20LevelsAchievements   Achievement_Type = 13
	Achievement_Validate50LevelsAchievements   Achievement_Type = 14
	Achievement_Validate100LevelsAchievements  Achievement_Type = 15
	Achievement_Validate200LevelsAchievements  Achievement_Type = 16
	Achievement_Validate500LevelsAchievements  Achievement_Type = 17
	Achievement_Validate1000LevelsAchievements Achievement_Type = 18
	Achievement_Validate1Coupon                Achievement_Type = 19
	Achievement_Validate5Coupons               Achievement_Type = 20
	Achievement_Validate10Coupons              Achievement_Type = 21
	Achievement_Validate20Coupons              Achievement_Type = 22
	Achievement_Validate50Coupons              Achievement_Type = 23
	Achievement_Validate100Coupons             Achievement_Type = 24
	Achievement_Validate200Coupons             Achievement_Type = 25
	Achievement_Validate500Coupons             Achievement_Type = 26
	Achievement_Validate1000Coupons            Achievement_Type = 27
)

var Achievement_Type_name = map[int32]string{
	0:  "Undefined",
	1:  "Buy1LevelAchievement",
	2:  "Buy5LevelsAchievement",
	3:  "Buy10LevelsAchievements",
	4:  "Buy20LevelsAchievements",
	5:  "Buy50LevelsAchievements",
	6:  "Buy100LevelsAchievements",
	7:  "Buy200LevelsAchievements",
	8:  "Buy500LevelsAchievements",
	9:  "Buy1000LevelsAchievements",
	10: "Validate1LevelAchievement",
	11: "Validate5LevelsAchievement",
	12: "Validate10LevelsAchievements",
	13: "Validate20LevelsAchievements",
	14: "Validate50LevelsAchievements",
	15: "Validate100LevelsAchievements",
	16: "Validate200LevelsAchievements",
	17: "Validate500LevelsAchievements",
	18: "Validate1000LevelsAchievements",
	19: "Validate1Coupon",
	20: "Validate5Coupons",
	21: "Validate10Coupons",
	22: "Validate20Coupons",
	23: "Validate50Coupons",
	24: "Validate100Coupons",
	25: "Validate200Coupons",
	26: "Validate500Coupons",
	27: "Validate1000Coupons",
}

var Achievement_Type_value = map[string]int32{
	"Undefined":                      0,
	"Buy1LevelAchievement":           1,
	"Buy5LevelsAchievement":          2,
	"Buy10LevelsAchievements":        3,
	"Buy20LevelsAchievements":        4,
	"Buy50LevelsAchievements":        5,
	"Buy100LevelsAchievements":       6,
	"Buy200LevelsAchievements":       7,
	"Buy500LevelsAchievements":       8,
	"Buy1000LevelsAchievements":      9,
	"Validate1LevelAchievement":      10,
	"Validate5LevelsAchievement":     11,
	"Validate10LevelsAchievements":   12,
	"Validate20LevelsAchievements":   13,
	"Validate50LevelsAchievements":   14,
	"Validate100LevelsAchievements":  15,
	"Validate200LevelsAchievements":  16,
	"Validate500LevelsAchievements":  17,
	"Validate1000LevelsAchievements": 18,
	"Validate1Coupon":                19,
	"Validate5Coupons":               20,
	"Validate10Coupons":              21,
	"Validate20Coupons":              22,
	"Validate50Coupons":              23,
	"Validate100Coupons":             24,
	"Validate200Coupons":             25,
	"Validate500Coupons":             26,
	"Validate1000Coupons":            27,
}

func (x Achievement_Type) String() string {
	return proto.EnumName(Achievement_Type_name, int32(x))
}

func (Achievement_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{17, 0}
}

type Metadata struct {
	ID        string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt *time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Metadata) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Metadata) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type TeamMember struct {
	Metadata         `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Role             TeamMember_Role `protobuf:"varint,100,opt,name=role,proto3,enum=pathwar.entity.TeamMember_Role" json:"role,omitempty"`
	User             *User           `protobuf:"bytes,200,opt,name=user,proto3" json:"user,omitempty" gorm:"foreignkey:UserID"`
	UserID           string          `protobuf:"bytes,201,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:"type:string not null REFERENCES user(id)" gorm:"index"`
	TournamentTeam   *TournamentTeam `protobuf:"bytes,202,opt,name=tournament_team,json=tournamentTeam,proto3" json:"tournament_team,omitempty" gorm:"foreignkey:TournamentTeamID"`
	TournamentTeamID string          `protobuf:"bytes,203,opt,name=tournament_team_id,json=tournamentTeamId,proto3" json:"tournament_team_id,omitempty" sql:"type:string not null REFERENCES tournament_team(id)" gorm:"index"`
}

func (m *TeamMember) Reset()         { *m = TeamMember{} }
func (m *TeamMember) String() string { return proto.CompactTextString(m) }
func (*TeamMember) ProtoMessage()    {}
func (*TeamMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{1}
}
func (m *TeamMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamMember.Merge(m, src)
}
func (m *TeamMember) XXX_Size() int {
	return m.Size()
}
func (m *TeamMember) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamMember.DiscardUnknown(m)
}

var xxx_messageInfo_TeamMember proto.InternalMessageInfo

func (m *TeamMember) GetRole() TeamMember_Role {
	if m != nil {
		return m.Role
	}
	return TeamMember_Undefined
}

func (m *TeamMember) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TeamMember) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *TeamMember) GetTournamentTeam() *TournamentTeam {
	if m != nil {
		return m.TournamentTeam
	}
	return nil
}

func (m *TeamMember) GetTournamentTeamID() string {
	if m != nil {
		return m.TournamentTeamID
	}
	return ""
}

// User definces a User Account / Profile
type User struct {
	Metadata        `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Username        string         `protobuf:"bytes,100,opt,name=username,proto3" json:"username,omitempty"`
	Email           string         `protobuf:"bytes,101,opt,name=email,proto3" json:"email,omitempty"`
	PasswordHash    string         `protobuf:"bytes,102,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
	PasswordSalt    string         `protobuf:"bytes,103,opt,name=password_salt,json=passwordSalt,proto3" json:"password_salt,omitempty"`
	SshKey          string         `protobuf:"bytes,104,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Sessions        []*UserSession `protobuf:"bytes,200,rep,name=sessions,proto3" json:"sessions,omitempty"`
	TeamMemberships []*TeamMember  `protobuf:"bytes,201,rep,name=team_memberships,json=teamMemberships,proto3" json:"team_memberships,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{2}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPasswordHash() string {
	if m != nil {
		return m.PasswordHash
	}
	return ""
}

func (m *User) GetPasswordSalt() string {
	if m != nil {
		return m.PasswordSalt
	}
	return ""
}

func (m *User) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *User) GetSessions() []*UserSession {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *User) GetTeamMemberships() []*TeamMember {
	if m != nil {
		return m.TeamMemberships
	}
	return nil
}

type UserSession struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Username string `protobuf:"bytes,100,opt,name=username,proto3" json:"username,omitempty"`
	UserID   string `protobuf:"bytes,200,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *UserSession) Reset()         { *m = UserSession{} }
func (m *UserSession) String() string { return proto.CompactTextString(m) }
func (*UserSession) ProtoMessage()    {}
func (*UserSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{3}
}
func (m *UserSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSession.Merge(m, src)
}
func (m *UserSession) XXX_Size() int {
	return m.Size()
}
func (m *UserSession) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSession.DiscardUnknown(m)
}

var xxx_messageInfo_UserSession proto.InternalMessageInfo

func (m *UserSession) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserSession) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type Team struct {
	Metadata    `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Name        string        `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	GravatarUrl string        `protobuf:"bytes,101,opt,name=gravatar_url,json=gravatarUrl,proto3" json:"gravatar_url,omitempty"`
	Members     []*TeamMember `protobuf:"bytes,200,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{4}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetGravatarUrl() string {
	if m != nil {
		return m.GravatarUrl
	}
	return ""
}

func (m *Team) GetMembers() []*TeamMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type Level struct {
	Metadata    `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Name        string `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,101,opt,name=description,proto3" json:"description,omitempty"`
	Author      string `protobuf:"bytes,102,opt,name=author,proto3" json:"author,omitempty"`
	SourceUrl   string `protobuf:"bytes,103,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	Version     string `protobuf:"bytes,104,opt,name=version,proto3" json:"version,omitempty"`
	Lang        string `protobuf:"bytes,105,opt,name=lang,proto3" json:"lang,omitempty"`
	IsDraft     bool   `protobuf:"varint,106,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
}

func (m *Level) Reset()         { *m = Level{} }
func (m *Level) String() string { return proto.CompactTextString(m) }
func (*Level) ProtoMessage()    {}
func (*Level) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{5}
}
func (m *Level) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Level) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Level.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Level) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Level.Merge(m, src)
}
func (m *Level) XXX_Size() int {
	return m.Size()
}
func (m *Level) XXX_DiscardUnknown() {
	xxx_messageInfo_Level.DiscardUnknown(m)
}

var xxx_messageInfo_Level proto.InternalMessageInfo

func (m *Level) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Level) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Level) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Level) GetSourceUrl() string {
	if m != nil {
		return m.SourceUrl
	}
	return ""
}

func (m *Level) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Level) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *Level) GetIsDraft() bool {
	if m != nil {
		return m.IsDraft
	}
	return false
}

type Tournament struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
}

func (m *Tournament) Reset()         { *m = Tournament{} }
func (m *Tournament) String() string { return proto.CompactTextString(m) }
func (*Tournament) ProtoMessage()    {}
func (*Tournament) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{6}
}
func (m *Tournament) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tournament) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tournament.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tournament) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tournament.Merge(m, src)
}
func (m *Tournament) XXX_Size() int {
	return m.Size()
}
func (m *Tournament) XXX_DiscardUnknown() {
	xxx_messageInfo_Tournament.DiscardUnknown(m)
}

var xxx_messageInfo_Tournament proto.InternalMessageInfo

type TournamentTeam struct {
	Metadata     `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Tournament   *Tournament `protobuf:"bytes,200,opt,name=tournament,proto3" json:"tournament,omitempty" gorm:"foreignkey:TournamentID"`
	TournamentID string      `protobuf:"bytes,201,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty" sql:"type:string not null REFERENCES tournament(id)" gorm:"index"`
}

func (m *TournamentTeam) Reset()         { *m = TournamentTeam{} }
func (m *TournamentTeam) String() string { return proto.CompactTextString(m) }
func (*TournamentTeam) ProtoMessage()    {}
func (*TournamentTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{7}
}
func (m *TournamentTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TournamentTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TournamentTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TournamentTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TournamentTeam.Merge(m, src)
}
func (m *TournamentTeam) XXX_Size() int {
	return m.Size()
}
func (m *TournamentTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_TournamentTeam.DiscardUnknown(m)
}

var xxx_messageInfo_TournamentTeam proto.InternalMessageInfo

func (m *TournamentTeam) GetTournament() *Tournament {
	if m != nil {
		return m.Tournament
	}
	return nil
}

func (m *TournamentTeam) GetTournamentID() string {
	if m != nil {
		return m.TournamentID
	}
	return ""
}

type WhoswhoAttempt struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
}

func (m *WhoswhoAttempt) Reset()         { *m = WhoswhoAttempt{} }
func (m *WhoswhoAttempt) String() string { return proto.CompactTextString(m) }
func (*WhoswhoAttempt) ProtoMessage()    {}
func (*WhoswhoAttempt) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{8}
}
func (m *WhoswhoAttempt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhoswhoAttempt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhoswhoAttempt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhoswhoAttempt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhoswhoAttempt.Merge(m, src)
}
func (m *WhoswhoAttempt) XXX_Size() int {
	return m.Size()
}
func (m *WhoswhoAttempt) XXX_DiscardUnknown() {
	xxx_messageInfo_WhoswhoAttempt.DiscardUnknown(m)
}

var xxx_messageInfo_WhoswhoAttempt proto.InternalMessageInfo

type LevelSubscription struct {
	Metadata         `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	TournamentTeam   *TournamentTeam `protobuf:"bytes,200,opt,name=tournament_team,json=tournamentTeam,proto3" json:"tournament_team,omitempty" gorm:"foreignkey:TournamentTeamID"`
	TournamentTeamID string          `protobuf:"bytes,201,opt,name=tournament_team_id,json=tournamentTeamId,proto3" json:"tournament_team_id,omitempty" sql:"type:string not null REFERENCES tournament_team(id)" gorm:"index"`
}

func (m *LevelSubscription) Reset()         { *m = LevelSubscription{} }
func (m *LevelSubscription) String() string { return proto.CompactTextString(m) }
func (*LevelSubscription) ProtoMessage()    {}
func (*LevelSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{9}
}
func (m *LevelSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelSubscription.Merge(m, src)
}
func (m *LevelSubscription) XXX_Size() int {
	return m.Size()
}
func (m *LevelSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_LevelSubscription proto.InternalMessageInfo

func (m *LevelSubscription) GetTournamentTeam() *TournamentTeam {
	if m != nil {
		return m.TournamentTeam
	}
	return nil
}

func (m *LevelSubscription) GetTournamentTeamID() string {
	if m != nil {
		return m.TournamentTeamID
	}
	return ""
}

type ShopItem struct {
	Metadata         `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	TournamentTeam   *TournamentTeam `protobuf:"bytes,200,opt,name=tournament_team,json=tournamentTeam,proto3" json:"tournament_team,omitempty" gorm:"foreignkey:TournamentTeamID"`
	TournamentTeamID string          `protobuf:"bytes,201,opt,name=tournament_team_id,json=tournamentTeamId,proto3" json:"tournament_team_id,omitempty" sql:"type:string not null REFERENCES tournament_team(id)" gorm:"index"`
}

func (m *ShopItem) Reset()         { *m = ShopItem{} }
func (m *ShopItem) String() string { return proto.CompactTextString(m) }
func (*ShopItem) ProtoMessage()    {}
func (*ShopItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{10}
}
func (m *ShopItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShopItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopItem.Merge(m, src)
}
func (m *ShopItem) XXX_Size() int {
	return m.Size()
}
func (m *ShopItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopItem.DiscardUnknown(m)
}

var xxx_messageInfo_ShopItem proto.InternalMessageInfo

func (m *ShopItem) GetTournamentTeam() *TournamentTeam {
	if m != nil {
		return m.TournamentTeam
	}
	return nil
}

func (m *ShopItem) GetTournamentTeamID() string {
	if m != nil {
		return m.TournamentTeamID
	}
	return ""
}

type LevelFlavor struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
}

func (m *LevelFlavor) Reset()         { *m = LevelFlavor{} }
func (m *LevelFlavor) String() string { return proto.CompactTextString(m) }
func (*LevelFlavor) ProtoMessage()    {}
func (*LevelFlavor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{11}
}
func (m *LevelFlavor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelFlavor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelFlavor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelFlavor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelFlavor.Merge(m, src)
}
func (m *LevelFlavor) XXX_Size() int {
	return m.Size()
}
func (m *LevelFlavor) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelFlavor.DiscardUnknown(m)
}

var xxx_messageInfo_LevelFlavor proto.InternalMessageInfo

type LevelInstance struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	//
	// associations
	//
	Hypervisor   *Hypervisor `protobuf:"bytes,200,opt,name=hypervisor,proto3" json:"hypervisor,omitempty" gorm:"foreignkey:HypervisorID"`
	HypervisorID string      `protobuf:"bytes,201,opt,name=hypervisor_id,json=hypervisorId,proto3" json:"hypervisor_id,omitempty" sql:"type:string not null REFERENCES hypervisor(id)" gorm:"index"`
}

func (m *LevelInstance) Reset()         { *m = LevelInstance{} }
func (m *LevelInstance) String() string { return proto.CompactTextString(m) }
func (*LevelInstance) ProtoMessage()    {}
func (*LevelInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{12}
}
func (m *LevelInstance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelInstance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelInstance.Merge(m, src)
}
func (m *LevelInstance) XXX_Size() int {
	return m.Size()
}
func (m *LevelInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelInstance.DiscardUnknown(m)
}

var xxx_messageInfo_LevelInstance proto.InternalMessageInfo

func (m *LevelInstance) GetHypervisor() *Hypervisor {
	if m != nil {
		return m.Hypervisor
	}
	return nil
}

func (m *LevelInstance) GetHypervisorID() string {
	if m != nil {
		return m.HypervisorID
	}
	return ""
}

type Hypervisor struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
}

func (m *Hypervisor) Reset()         { *m = Hypervisor{} }
func (m *Hypervisor) String() string { return proto.CompactTextString(m) }
func (*Hypervisor) ProtoMessage()    {}
func (*Hypervisor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{13}
}
func (m *Hypervisor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hypervisor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hypervisor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hypervisor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hypervisor.Merge(m, src)
}
func (m *Hypervisor) XXX_Size() int {
	return m.Size()
}
func (m *Hypervisor) XXX_DiscardUnknown() {
	xxx_messageInfo_Hypervisor.DiscardUnknown(m)
}

var xxx_messageInfo_Hypervisor proto.InternalMessageInfo

type Event struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{14}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type Notification struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{15}
}
func (m *Notification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return m.Size()
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

type Coupon struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	//
	// fields
	//
	Value int32 `protobuf:"varint,100,opt,name=value,proto3" json:"value,omitempty"`
	//
	// associations
	//
	TeamMember   *TeamMember `protobuf:"bytes,200,opt,name=team_member,json=teamMember,proto3" json:"team_member,omitempty" gorm:"foreignkey:TeamMemberID"`
	TeamMemberID string      `protobuf:"bytes,201,opt,name=team_member_id,json=teamMemberId,proto3" json:"team_member_id,omitempty" sql:"type:string REFERENCES team_member(id)" gorm:"index"`
}

func (m *Coupon) Reset()         { *m = Coupon{} }
func (m *Coupon) String() string { return proto.CompactTextString(m) }
func (*Coupon) ProtoMessage()    {}
func (*Coupon) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{16}
}
func (m *Coupon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coupon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coupon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coupon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coupon.Merge(m, src)
}
func (m *Coupon) XXX_Size() int {
	return m.Size()
}
func (m *Coupon) XXX_DiscardUnknown() {
	xxx_messageInfo_Coupon.DiscardUnknown(m)
}

var xxx_messageInfo_Coupon proto.InternalMessageInfo

func (m *Coupon) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Coupon) GetTeamMember() *TeamMember {
	if m != nil {
		return m.TeamMember
	}
	return nil
}

func (m *Coupon) GetTeamMemberID() string {
	if m != nil {
		return m.TeamMemberID
	}
	return ""
}

type Achievement struct {
	Metadata     `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Type         Achievement_Type `protobuf:"varint,100,opt,name=type,proto3,enum=pathwar.entity.Achievement_Type" json:"type,omitempty"`
	TeamMember   *TeamMember      `protobuf:"bytes,200,opt,name=team_member,json=teamMember,proto3" json:"team_member,omitempty" gorm:"foreignkey:TeamMemberID"`
	TeamMemberID string           `protobuf:"bytes,201,opt,name=team_member_id,json=teamMemberId,proto3" json:"team_member_id,omitempty" sql:"type:string not null REFERENCES team_member(id)" gorm:"index"`
}

func (m *Achievement) Reset()         { *m = Achievement{} }
func (m *Achievement) String() string { return proto.CompactTextString(m) }
func (*Achievement) ProtoMessage()    {}
func (*Achievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{17}
}
func (m *Achievement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement.Merge(m, src)
}
func (m *Achievement) XXX_Size() int {
	return m.Size()
}
func (m *Achievement) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement proto.InternalMessageInfo

func (m *Achievement) GetType() Achievement_Type {
	if m != nil {
		return m.Type
	}
	return Achievement_Undefined
}

func (m *Achievement) GetTeamMember() *TeamMember {
	if m != nil {
		return m.TeamMember
	}
	return nil
}

func (m *Achievement) GetTeamMemberID() string {
	if m != nil {
		return m.TeamMemberID
	}
	return ""
}

type Dump struct {
	UserSessions []*UserSession `protobuf:"bytes,1,rep,name=user_sessions,json=userSessions,proto3" json:"user_sessions,omitempty"`
	Levels       []*Level       `protobuf:"bytes,2,rep,name=levels,proto3" json:"levels,omitempty"`
	Users        []*User        `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	TeamMembers  []*TeamMember  `protobuf:"bytes,4,rep,name=team_members,json=teamMembers,proto3" json:"team_members,omitempty"`
	Teams        []*Team        `protobuf:"bytes,5,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (m *Dump) Reset()         { *m = Dump{} }
func (m *Dump) String() string { return proto.CompactTextString(m) }
func (*Dump) ProtoMessage()    {}
func (*Dump) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{18}
}
func (m *Dump) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dump.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dump.Merge(m, src)
}
func (m *Dump) XXX_Size() int {
	return m.Size()
}
func (m *Dump) XXX_DiscardUnknown() {
	xxx_messageInfo_Dump.DiscardUnknown(m)
}

var xxx_messageInfo_Dump proto.InternalMessageInfo

func (m *Dump) GetUserSessions() []*UserSession {
	if m != nil {
		return m.UserSessions
	}
	return nil
}

func (m *Dump) GetLevels() []*Level {
	if m != nil {
		return m.Levels
	}
	return nil
}

func (m *Dump) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Dump) GetTeamMembers() []*TeamMember {
	if m != nil {
		return m.TeamMembers
	}
	return nil
}

func (m *Dump) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func init() {
	proto.RegisterEnum("pathwar.entity.TeamMember_Role", TeamMember_Role_name, TeamMember_Role_value)
	proto.RegisterEnum("pathwar.entity.Achievement_Type", Achievement_Type_name, Achievement_Type_value)
	proto.RegisterType((*Metadata)(nil), "pathwar.entity.Metadata")
	proto.RegisterType((*TeamMember)(nil), "pathwar.entity.TeamMember")
	proto.RegisterType((*User)(nil), "pathwar.entity.User")
	proto.RegisterType((*UserSession)(nil), "pathwar.entity.UserSession")
	proto.RegisterType((*Team)(nil), "pathwar.entity.Team")
	proto.RegisterType((*Level)(nil), "pathwar.entity.Level")
	proto.RegisterType((*Tournament)(nil), "pathwar.entity.Tournament")
	proto.RegisterType((*TournamentTeam)(nil), "pathwar.entity.TournamentTeam")
	proto.RegisterType((*WhoswhoAttempt)(nil), "pathwar.entity.WhoswhoAttempt")
	proto.RegisterType((*LevelSubscription)(nil), "pathwar.entity.LevelSubscription")
	proto.RegisterType((*ShopItem)(nil), "pathwar.entity.ShopItem")
	proto.RegisterType((*LevelFlavor)(nil), "pathwar.entity.LevelFlavor")
	proto.RegisterType((*LevelInstance)(nil), "pathwar.entity.LevelInstance")
	proto.RegisterType((*Hypervisor)(nil), "pathwar.entity.Hypervisor")
	proto.RegisterType((*Event)(nil), "pathwar.entity.Event")
	proto.RegisterType((*Notification)(nil), "pathwar.entity.Notification")
	proto.RegisterType((*Coupon)(nil), "pathwar.entity.Coupon")
	proto.RegisterType((*Achievement)(nil), "pathwar.entity.Achievement")
	proto.RegisterType((*Dump)(nil), "pathwar.entity.Dump")
}

func init() { proto.RegisterFile("entity/entity.proto", fileDescriptor_9b38ccb06a827056) }

var fileDescriptor_9b38ccb06a827056 = []byte{
	// 1534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x73, 0xdb, 0xc4,
	0x17, 0x8f, 0x1c, 0xdb, 0xb1, 0x9f, 0x9d, 0xc4, 0xd9, 0x24, 0x8d, 0x92, 0xa6, 0x96, 0xab, 0xef,
	0x77, 0x98, 0x40, 0xa9, 0x03, 0x2e, 0x99, 0x81, 0x74, 0x60, 0x88, 0x9b, 0xa4, 0xf5, 0xd0, 0x14,
	0x46, 0x69, 0xca, 0x0c, 0x07, 0x8c, 0x62, 0x6d, 0x6c, 0x51, 0x59, 0x12, 0xda, 0x95, 0x83, 0x87,
	0xe1, 0xc6, 0x15, 0xe8, 0x3f, 0xc0, 0x9f, 0x00, 0x27, 0x86, 0x3f, 0x80, 0x53, 0x0a, 0x1c, 0x7a,
	0x61, 0x86, 0x0b, 0x86, 0x49, 0xff, 0x03, 0xdf, 0x99, 0x61, 0x76, 0x65, 0x59, 0xb2, 0xa3, 0x94,
	0x74, 0x9c, 0xd2, 0x0b, 0x27, 0xef, 0xbe, 0xf7, 0x79, 0x3f, 0xf7, 0xed, 0x7b, 0x5a, 0xc3, 0x2c,
	0x36, 0xa9, 0x4e, 0xdb, 0xab, 0xde, 0x4f, 0xd1, 0x76, 0x2c, 0x6a, 0xa1, 0x29, 0x5b, 0xa5, 0x8d,
	0x43, 0xd5, 0x29, 0x7a, 0xd4, 0xa5, 0xeb, 0x75, 0x9d, 0x36, 0xdc, 0xfd, 0x62, 0xcd, 0x6a, 0xae,
	0xd6, 0x2d, 0x43, 0x35, 0xeb, 0xab, 0x1c, 0xb8, 0xef, 0x1e, 0xac, 0xda, 0xb4, 0x6d, 0x63, 0xb2,
	0x4a, 0xf5, 0x26, 0x26, 0x54, 0x6d, 0xda, 0xc1, 0xca, 0x53, 0xb6, 0x74, 0x75, 0x40, 0xb8, 0x6e,
	0x05, 0xa2, 0x6c, 0xc7, 0x37, 0x7c, 0xe5, 0xc1, 0xe5, 0x1f, 0x05, 0x48, 0xed, 0x60, 0xaa, 0x6a,
	0x2a, 0x55, 0xd1, 0xcb, 0x10, 0xd3, 0x35, 0x51, 0x28, 0x08, 0x2b, 0xe9, 0xf2, 0xf2, 0x71, 0x47,
	0x8a, 0x55, 0x36, 0xbb, 0x1d, 0x09, 0xd5, 0x2d, 0xa7, 0xb9, 0x2e, 0xdb, 0x8e, 0xde, 0x54, 0x9d,
	0x76, 0xf5, 0x3e, 0x6e, 0xcb, 0x4a, 0x4c, 0xd7, 0xd0, 0x0d, 0x80, 0x9a, 0x83, 0x55, 0x8a, 0xb5,
	0xaa, 0x4a, 0xc5, 0x58, 0x41, 0x58, 0xc9, 0x94, 0x96, 0x8a, 0x75, 0xcb, 0xaa, 0x1b, 0xb8, 0xe8,
	0x5b, 0x2d, 0xde, 0xf5, 0xfd, 0x2b, 0xa7, 0x8e, 0x3a, 0x92, 0xf0, 0xe0, 0x0f, 0x49, 0x50, 0xd2,
	0x3d, 0xb9, 0x0d, 0xca, 0x94, 0xb8, 0xb6, 0xe6, 0x2b, 0x19, 0x7f, 0x1a, 0x25, 0x3d, 0xb9, 0x0d,
	0x2a, 0x77, 0xe2, 0x00, 0x77, 0xb1, 0xda, 0xdc, 0xc1, 0xcd, 0x7d, 0xec, 0xa0, 0xb7, 0x20, 0xd5,
	0xec, 0x85, 0xc4, 0x83, 0xc9, 0x94, 0xc4, 0xe2, 0x60, 0x8a, 0x8b, 0x7e, 0xc8, 0x5c, 0xdf, 0xd8,
	0xa3, 0x8e, 0x24, 0x28, 0x7d, 0x19, 0x74, 0x0d, 0xe2, 0x8e, 0x65, 0x60, 0x51, 0x2b, 0x08, 0x2b,
	0x53, 0x25, 0x69, 0x58, 0x36, 0xb0, 0x54, 0x54, 0x2c, 0x03, 0x2b, 0x1c, 0x8c, 0x6e, 0x42, 0xdc,
	0x25, 0xd8, 0x11, 0x8f, 0x3c, 0x8b, 0x73, 0xc3, 0x52, 0x7b, 0x04, 0x3b, 0xe5, 0xe5, 0x6e, 0x47,
	0x12, 0xbd, 0x74, 0x1e, 0x58, 0x0e, 0xd6, 0xeb, 0xe6, 0x7d, 0xdc, 0x5e, 0x67, 0xac, 0xca, 0xa6,
	0xac, 0x70, 0x05, 0xa8, 0x06, 0x13, 0xec, 0xb7, 0xaa, 0x6b, 0xe2, 0x43, 0xef, 0x28, 0x2a, 0xc7,
	0x1d, 0x29, 0xe9, 0x81, 0xba, 0x1d, 0xe9, 0x3a, 0xf9, 0xc4, 0x58, 0x97, 0x59, 0x19, 0xac, 0x13,
	0xea, 0xe8, 0x66, 0xbd, 0x60, 0x5a, 0xb4, 0x60, 0xba, 0x86, 0x51, 0x50, 0xb6, 0xb6, 0xb7, 0x94,
	0xad, 0x3b, 0x37, 0xb6, 0x76, 0x0b, 0x4c, 0xc5, 0x8a, 0xae, 0xbd, 0x28, 0x17, 0x3c, 0x73, 0xba,
	0xa9, 0xe1, 0x4f, 0x65, 0x25, 0xc9, 0xe8, 0x15, 0x0d, 0xd9, 0x30, 0x4d, 0x2d, 0xd7, 0x31, 0xd5,
	0x26, 0x36, 0x69, 0x95, 0x62, 0xb5, 0x29, 0xfe, 0xe4, 0x39, 0x9e, 0x3f, 0x11, 0x6e, 0x1f, 0xc7,
	0x02, 0x2f, 0xbf, 0xd0, 0xed, 0x48, 0xf2, 0x89, 0x10, 0x06, 0x41, 0x2c, 0x98, 0x29, 0x3a, 0x40,
	0x42, 0x5f, 0x0a, 0x80, 0x86, 0x4c, 0xb2, 0x10, 0x7f, 0xf6, 0x42, 0xfc, 0xf0, 0xb8, 0x23, 0xe5,
	0x86, 0x95, 0x74, 0x3b, 0xd2, 0xf6, 0x99, 0x82, 0x1d, 0xd2, 0x1b, 0x11, 0x77, 0x6e, 0xd0, 0x9b,
	0x8a, 0x26, 0x5f, 0x81, 0x38, 0x3b, 0x3d, 0x34, 0x09, 0xe9, 0x3d, 0x53, 0xc3, 0x07, 0xba, 0x89,
	0xb5, 0xdc, 0x18, 0x4a, 0x43, 0xe2, 0xdd, 0x43, 0x13, 0x3b, 0x39, 0x81, 0x2d, 0xcb, 0x2a, 0xd1,
	0x6b, 0xb9, 0x98, 0xfc, 0x7b, 0x0c, 0xe2, 0xec, 0x00, 0x46, 0x2e, 0xad, 0x25, 0x48, 0xb1, 0x13,
	0x60, 0x9e, 0xf0, 0xf2, 0x4a, 0x2b, 0xfd, 0x3d, 0x9a, 0x83, 0x04, 0x6e, 0xaa, 0xba, 0x21, 0x62,
	0xce, 0xf0, 0x36, 0xe8, 0x7f, 0x30, 0x69, 0xab, 0x84, 0x1c, 0x5a, 0x8e, 0x56, 0x6d, 0xa8, 0xa4,
	0x21, 0x1e, 0x70, 0x6e, 0xd6, 0x27, 0xde, 0x52, 0x49, 0x63, 0x00, 0x44, 0x54, 0x83, 0x8a, 0xf5,
	0x41, 0xd0, 0xae, 0x6a, 0x50, 0xb4, 0x00, 0x13, 0x84, 0x34, 0xd8, 0xfd, 0x15, 0x1b, 0x9c, 0x9d,
	0x24, 0xa4, 0xf1, 0x0e, 0x6e, 0xa3, 0xd7, 0x21, 0x45, 0x30, 0x21, 0xba, 0x65, 0x12, 0x56, 0xbe,
	0xe3, 0x2b, 0x99, 0xd2, 0xc5, 0xa8, 0xf2, 0xdd, 0xf5, 0x40, 0x4a, 0x1f, 0x8d, 0xb6, 0x21, 0xc7,
	0x0f, 0xb2, 0xc9, 0xaf, 0x03, 0x69, 0xe8, 0x36, 0x61, 0x45, 0x3b, 0xce, 0x2f, 0xf1, 0xa9, 0xd7,
	0x46, 0x99, 0xa6, 0xfd, 0x35, 0x97, 0x91, 0xbf, 0x16, 0x20, 0x13, 0xb2, 0xf0, 0x4c, 0xd3, 0xfc,
	0xff, 0xe0, 0x7e, 0x1d, 0x79, 0xc5, 0x07, 0xc1, 0xfd, 0xf2, 0x2f, 0x88, 0xfc, 0xbd, 0x00, 0x71,
	0x5e, 0xb7, 0xa3, 0xba, 0x82, 0x20, 0x1e, 0x72, 0x83, 0xaf, 0xd1, 0x65, 0xc8, 0xd6, 0x1d, 0xb5,
	0xa5, 0x52, 0xd5, 0xa9, 0xba, 0x8e, 0x7f, 0xe0, 0x19, 0x9f, 0xb6, 0xe7, 0x18, 0x68, 0x0d, 0x26,
	0x7a, 0x49, 0xf5, 0x8f, 0xe4, 0x49, 0x09, 0xf5, 0xb1, 0xf2, 0x5f, 0x02, 0x24, 0x6e, 0xe3, 0x16,
	0x36, 0x9e, 0x89, 0xdf, 0x05, 0xc8, 0x68, 0x98, 0xd4, 0x1c, 0xdd, 0xa6, 0xba, 0x65, 0xfa, 0x6e,
	0x87, 0x48, 0xe8, 0x02, 0x24, 0x55, 0x97, 0x36, 0x2c, 0xa7, 0x57, 0xa6, 0xbd, 0x1d, 0xba, 0x04,
	0x40, 0x2c, 0xd7, 0xa9, 0x61, 0x1e, 0xaf, 0x57, 0x9d, 0x69, 0x8f, 0xc2, 0xa2, 0x15, 0x61, 0xa2,
	0x85, 0x1d, 0x76, 0xf4, 0xbd, 0xd2, 0xf4, 0xb7, 0xcc, 0x0d, 0x36, 0x00, 0x45, 0xdd, 0x73, 0x83,
	0xad, 0xd1, 0x22, 0xa4, 0x74, 0x52, 0xd5, 0x1c, 0xf5, 0x80, 0x8a, 0x1f, 0x17, 0x84, 0x95, 0x94,
	0x32, 0xa1, 0x93, 0x4d, 0xb6, 0x95, 0x6f, 0x03, 0x04, 0x5d, 0x64, 0xd4, 0x1c, 0xc8, 0xdf, 0xc5,
	0x60, 0x6a, 0xb0, 0x29, 0x8d, 0x9c, 0xd6, 0x2a, 0x40, 0xd0, 0x8a, 0xfc, 0x61, 0xb1, 0x74, 0x7a,
	0xcf, 0x2d, 0xcb, 0xdd, 0x8e, 0x94, 0x7f, 0x42, 0xbf, 0x65, 0xbd, 0x36, 0xa4, 0x12, 0x7d, 0x06,
	0x93, 0xa1, 0x76, 0x18, 0x0c, 0x91, 0xbd, 0xe3, 0x8e, 0x94, 0x0d, 0x8b, 0x75, 0x3b, 0xd2, 0xc6,
	0x53, 0x76, 0xd7, 0x88, 0xc6, 0x9a, 0x0d, 0xb8, 0x15, 0x4d, 0x7e, 0x0f, 0xa6, 0xde, 0x6f, 0x58,
	0xe4, 0xb0, 0x61, 0x6d, 0x50, 0x8a, 0x9b, 0xf6, 0xe8, 0x47, 0xf0, 0x6b, 0x0c, 0x66, 0x78, 0x41,
	0xef, 0xba, 0xfb, 0x41, 0x99, 0x8d, 0x7a, 0x0a, 0x11, 0xe3, 0xef, 0xe8, 0xb9, 0x8c, 0xbf, 0x87,
	0xcf, 0x6b, 0xfc, 0xfd, 0x12, 0x83, 0xd4, 0x6e, 0xc3, 0xb2, 0x2b, 0x14, 0x37, 0xff, 0x4b, 0xe7,
	0xc8, 0xe9, 0xdc, 0x81, 0x0c, 0xaf, 0xd2, 0x6d, 0x43, 0x6d, 0x59, 0x23, 0x7f, 0x26, 0xc8, 0xdf,
	0xc6, 0x60, 0x92, 0xeb, 0xab, 0x98, 0x84, 0xaa, 0x66, 0x0d, 0x9f, 0x47, 0xdf, 0x69, 0xb4, 0x6d,
	0xec, 0xb4, 0x74, 0x62, 0x39, 0xa7, 0xf6, 0x9d, 0x5b, 0x7d, 0xc8, 0x29, 0x7d, 0x27, 0x00, 0xf0,
	0xbe, 0x13, 0xa8, 0x64, 0x7d, 0x27, 0xd8, 0x0d, 0xf7, 0x9d, 0xb0, 0xd8, 0x99, 0xfb, 0x4e, 0xa0,
	0x2e, 0xaa, 0xef, 0x04, 0xdc, 0x8a, 0xc6, 0xda, 0x7e, 0x60, 0x62, 0xe4, 0xec, 0xdf, 0x84, 0xc4,
	0x56, 0xeb, 0x3c, 0xe6, 0xc7, 0x1d, 0xc8, 0xde, 0xb1, 0xa8, 0x7e, 0xa0, 0xd7, 0xd4, 0xf3, 0x68,
	0x5b, 0xf2, 0x0f, 0x31, 0x48, 0xde, 0xb0, 0x5c, 0xfb, 0x1c, 0x3a, 0xe0, 0x1c, 0x24, 0x5a, 0xaa,
	0xe1, 0x7a, 0xf3, 0x3d, 0xa1, 0x78, 0x1b, 0xf4, 0x11, 0x64, 0x42, 0xdf, 0x73, 0xa7, 0x8f, 0xa7,
	0xfe, 0x97, 0xc7, 0x69, 0xe3, 0xa9, 0x0f, 0xf0, 0xc6, 0x53, 0xf0, 0x36, 0xa3, 0x30, 0x15, 0xb2,
	0x10, 0xaa, 0x93, 0x1d, 0x3e, 0x9f, 0x42, 0x72, 0xdd, 0x8e, 0xf4, 0xc6, 0x89, 0x3a, 0x09, 0x5f,
	0xd3, 0x40, 0x4d, 0xe4, 0x5c, 0x0a, 0x54, 0x69, 0xf2, 0x17, 0x69, 0xc8, 0x6c, 0xd4, 0x1a, 0x3a,
	0x6e, 0xe1, 0xf3, 0xf8, 0x30, 0x40, 0xaf, 0x41, 0x9c, 0x79, 0xd5, 0x7b, 0x21, 0x16, 0x86, 0x65,
	0x43, 0xa6, 0x8a, 0x77, 0xdb, 0x36, 0x56, 0x38, 0xfa, 0x5f, 0xc8, 0xee, 0xe7, 0xa7, 0x65, 0xf7,
	0x5e, 0x44, 0x76, 0xcb, 0x67, 0xeb, 0x86, 0x4f, 0x91, 0xe6, 0x6f, 0x92, 0x10, 0x67, 0xf1, 0x0e,
	0x3f, 0xaa, 0x44, 0x98, 0x2b, 0xbb, 0xed, 0x57, 0x79, 0x47, 0x0b, 0xe5, 0x26, 0x27, 0xa0, 0x45,
	0x98, 0x2f, 0xbb, 0xed, 0x35, 0xce, 0x21, 0x61, 0x56, 0x0c, 0x5d, 0x84, 0x05, 0x26, 0xf4, 0xca,
	0x09, 0x1e, 0xc9, 0x8d, 0xf7, 0x98, 0xa5, 0x28, 0x66, 0xbc, 0xc7, 0x5c, 0x8b, 0x62, 0x26, 0xd0,
	0x32, 0x88, 0x5c, 0x6d, 0x14, 0x37, 0xd9, 0xe3, 0x96, 0x22, 0xb9, 0x13, 0x3d, 0xee, 0x5a, 0x24,
	0x37, 0x85, 0x2e, 0xc1, 0xa2, 0xa7, 0x39, 0x8a, 0x9d, 0x66, 0xec, 0x7b, 0xaa, 0xa1, 0x6b, 0x2a,
	0xc5, 0x27, 0x33, 0x01, 0x28, 0x0f, 0x4b, 0x3e, 0x3b, 0x22, 0x1d, 0x19, 0x54, 0x80, 0xe5, 0xbe,
	0x78, 0x94, 0x81, 0x6c, 0x18, 0x11, 0x99, 0x98, 0xc9, 0x30, 0x22, 0x32, 0x3b, 0x53, 0xe8, 0x32,
	0x5c, 0x0a, 0xac, 0x44, 0x41, 0xa6, 0xc3, 0x90, 0xe8, 0x3c, 0xe5, 0xc2, 0x90, 0xe8, 0x64, 0xcd,
	0x20, 0x19, 0xf2, 0x21, 0x43, 0x51, 0x18, 0x84, 0x66, 0x61, 0xba, 0x8f, 0xf1, 0xda, 0x5e, 0x6e,
	0x16, 0xcd, 0x41, 0xae, 0xaf, 0xdb, 0x23, 0x92, 0xdc, 0x1c, 0x9a, 0x87, 0x99, 0x40, 0x9d, 0x4f,
	0x9e, 0x0f, 0x93, 0x4b, 0x7d, 0xf2, 0x85, 0x30, 0x79, 0xad, 0x4f, 0x5e, 0x40, 0x17, 0x00, 0x85,
	0x7c, 0xf2, 0xe9, 0x62, 0x98, 0x5e, 0x0a, 0xe8, 0x8b, 0x61, 0xfa, 0x5a, 0x40, 0x5f, 0x42, 0x0b,
	0x30, 0x1b, 0x8e, 0xcd, 0x67, 0x5c, 0x94, 0xbf, 0x8a, 0x41, 0x7c, 0xd3, 0x6d, 0xda, 0xe8, 0x6d,
	0x98, 0xe4, 0x6f, 0xd0, 0xfe, 0xb3, 0xfb, 0x0c, 0xaf, 0xee, 0xac, 0x1b, 0x6c, 0x08, 0xba, 0x0a,
	0x49, 0x83, 0xe7, 0x4c, 0x8c, 0x71, 0xd1, 0xf9, 0x61, 0x51, 0x9e, 0x51, 0xa5, 0x07, 0x42, 0x2f,
	0x41, 0x82, 0x89, 0x13, 0x71, 0x9c, 0xa3, 0x23, 0xff, 0x9d, 0x52, 0x3c, 0x08, 0x7a, 0x13, 0xb2,
	0xe1, 0x47, 0xbd, 0x18, 0xff, 0xc7, 0xe7, 0x67, 0x26, 0xf4, 0x9e, 0x67, 0xa6, 0xd8, 0x96, 0x88,
	0x89, 0x68, 0x53, 0x4c, 0x4e, 0xf1, 0x20, 0xe5, 0x2b, 0x47, 0xc7, 0x79, 0xe1, 0xd1, 0x71, 0x5e,
	0xf8, 0xf3, 0x38, 0x2f, 0x3c, 0x78, 0x9c, 0x1f, 0x7b, 0xf4, 0x38, 0x3f, 0xf6, 0xdb, 0xe3, 0xfc,
	0xd8, 0x07, 0x33, 0xbe, 0x94, 0x7d, 0xd8, 0xfb, 0xb3, 0x74, 0x3f, 0xc9, 0xff, 0x0e, 0xbc, 0xf6,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0x39, 0xea, 0x72, 0x44, 0x15, 0x00, 0x00,
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntity(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UpdatedAt != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)))
		n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *TeamMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n3, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.Role != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Role))
	}
	if m.User != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.User.Size()))
		n4, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if m.TournamentTeam != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.TournamentTeam.Size()))
		n5, err := m.TournamentTeam.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.TournamentTeamID) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TournamentTeamID)))
		i += copy(dAtA[i:], m.TournamentTeamID)
	}
	return i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n6, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Username) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.PasswordHash) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.PasswordHash)))
		i += copy(dAtA[i:], m.PasswordHash)
	}
	if len(m.PasswordSalt) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.PasswordSalt)))
		i += copy(dAtA[i:], m.PasswordSalt)
	}
	if len(m.SshKey) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.SshKey)))
		i += copy(dAtA[i:], m.SshKey)
	}
	if len(m.Sessions) > 0 {
		for _, msg := range m.Sessions {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0xc
			i++
			i = encodeVarintEntity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TeamMemberships) > 0 {
		for _, msg := range m.TeamMemberships {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0xc
			i++
			i = encodeVarintEntity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n7, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Username) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	return i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n8, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if len(m.Name) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.GravatarUrl) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.GravatarUrl)))
		i += copy(dAtA[i:], m.GravatarUrl)
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0xc
			i++
			i = encodeVarintEntity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Level) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Level) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n9, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.Name) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if len(m.SourceUrl) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.SourceUrl)))
		i += copy(dAtA[i:], m.SourceUrl)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Lang) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Lang)))
		i += copy(dAtA[i:], m.Lang)
	}
	if m.IsDraft {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x6
		i++
		if m.IsDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Tournament) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tournament) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n10, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *TournamentTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n11, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if m.Tournament != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Tournament.Size()))
		n12, err := m.Tournament.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.TournamentID) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TournamentID)))
		i += copy(dAtA[i:], m.TournamentID)
	}
	return i, nil
}

func (m *WhoswhoAttempt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhoswhoAttempt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n13, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	return i, nil
}

func (m *LevelSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelSubscription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n14, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if m.TournamentTeam != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.TournamentTeam.Size()))
		n15, err := m.TournamentTeam.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.TournamentTeamID) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TournamentTeamID)))
		i += copy(dAtA[i:], m.TournamentTeamID)
	}
	return i, nil
}

func (m *ShopItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n16, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if m.TournamentTeam != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.TournamentTeam.Size()))
		n17, err := m.TournamentTeam.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.TournamentTeamID) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TournamentTeamID)))
		i += copy(dAtA[i:], m.TournamentTeamID)
	}
	return i, nil
}

func (m *LevelFlavor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelFlavor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n18, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	return i, nil
}

func (m *LevelInstance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelInstance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n19, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if m.Hypervisor != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Hypervisor.Size()))
		n20, err := m.Hypervisor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if len(m.HypervisorID) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.HypervisorID)))
		i += copy(dAtA[i:], m.HypervisorID)
	}
	return i, nil
}

func (m *Hypervisor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hypervisor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n21, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n22, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	return i, nil
}

func (m *Notification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notification) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n23, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	return i, nil
}

func (m *Coupon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coupon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n24, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	if m.Value != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Value))
	}
	if m.TeamMember != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.TeamMember.Size()))
		n25, err := m.TeamMember.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if len(m.TeamMemberID) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TeamMemberID)))
		i += copy(dAtA[i:], m.TeamMemberID)
	}
	return i, nil
}

func (m *Achievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Metadata.Size()))
	n26, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	if m.Type != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Type))
	}
	if m.TeamMember != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.TeamMember.Size()))
		n27, err := m.TeamMember.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if len(m.TeamMemberID) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TeamMemberID)))
		i += copy(dAtA[i:], m.TeamMemberID)
	}
	return i, nil
}

func (m *Dump) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dump) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserSessions) > 0 {
		for _, msg := range m.UserSessions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEntity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Levels) > 0 {
		for _, msg := range m.Levels {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEntity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintEntity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TeamMembers) > 0 {
		for _, msg := range m.TeamMembers {
			dAtA[i] = 0x22
			i++
			i = encodeVarintEntity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Teams) > 0 {
		for _, msg := range m.Teams {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintEntity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintEntity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *TeamMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.Role != 0 {
		n += 2 + sovEntity(uint64(m.Role))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.TournamentTeam != nil {
		l = m.TournamentTeam.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TournamentTeamID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Username)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.PasswordHash)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.PasswordSalt)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.TeamMemberships) > 0 {
		for _, e := range m.TeamMemberships {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *UserSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Username)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.GravatarUrl)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *Level) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.SourceUrl)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Lang)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.IsDraft {
		n += 3
	}
	return n
}

func (m *Tournament) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	return n
}

func (m *TournamentTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.Tournament != nil {
		l = m.Tournament.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TournamentID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *WhoswhoAttempt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	return n
}

func (m *LevelSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.TournamentTeam != nil {
		l = m.TournamentTeam.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TournamentTeamID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *ShopItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.TournamentTeam != nil {
		l = m.TournamentTeam.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TournamentTeamID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *LevelFlavor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	return n
}

func (m *LevelInstance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.Hypervisor != nil {
		l = m.Hypervisor.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.HypervisorID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Hypervisor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	return n
}

func (m *Notification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	return n
}

func (m *Coupon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.Value != 0 {
		n += 2 + sovEntity(uint64(m.Value))
	}
	if m.TeamMember != nil {
		l = m.TeamMember.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TeamMemberID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Achievement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.Type != 0 {
		n += 2 + sovEntity(uint64(m.Type))
	}
	if m.TeamMember != nil {
		l = m.TeamMember.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TeamMemberID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Dump) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserSessions) > 0 {
		for _, e := range m.UserSessions {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Levels) > 0 {
		for _, e := range m.Levels {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.TeamMembers) > 0 {
		for _, e := range m.TeamMembers {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func sovEntity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEntity(x uint64) (n int) {
	return sovEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (TeamMember_Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentTeam == nil {
				m.TournamentTeam = &TournamentTeam{}
			}
			if err := m.TournamentTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordSalt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordSalt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &UserSession{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMemberships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamMemberships = append(m.TeamMemberships, &TeamMember{})
			if err := m.TeamMemberships[len(m.TeamMemberships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravatarUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravatarUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &TeamMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Level) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Level: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Level: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDraft = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tournament) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tournament: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tournament: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tournament", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tournament == nil {
				m.Tournament = &Tournament{}
			}
			if err := m.Tournament.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhoswhoAttempt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhoswhoAttempt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhoswhoAttempt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentTeam == nil {
				m.TournamentTeam = &TournamentTeam{}
			}
			if err := m.TournamentTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentTeam == nil {
				m.TournamentTeam = &TournamentTeam{}
			}
			if err := m.TournamentTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelFlavor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelFlavor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelFlavor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelInstance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hypervisor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hypervisor == nil {
				m.Hypervisor = &Hypervisor{}
			}
			if err := m.Hypervisor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HypervisorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HypervisorID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hypervisor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hypervisor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hypervisor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coupon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coupon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coupon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamMember == nil {
				m.TeamMember = &TeamMember{}
			}
			if err := m.TeamMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMemberID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamMemberID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Achievement_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamMember == nil {
				m.TeamMember = &TeamMember{}
			}
			if err := m.TeamMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMemberID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamMemberID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dump) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dump: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dump: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserSessions = append(m.UserSessions, &UserSession{})
			if err := m.UserSessions[len(m.UserSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Levels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Levels = append(m.Levels, &Level{})
			if err := m.Levels[len(m.Levels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamMembers = append(m.TeamMembers, &TeamMember{})
			if err := m.TeamMembers[len(m.TeamMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEntity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEntity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEntity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEntity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntity   = fmt.Errorf("proto: integer overflow")
)
