// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entity/entity.proto

package entity

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TeamMember_Role int32

const (
	TeamMember_Undefined TeamMember_Role = 0
	TeamMember_Owner     TeamMember_Role = 1
	TeamMember_Member    TeamMember_Role = 2
)

var TeamMember_Role_name = map[int32]string{
	0: "Undefined",
	1: "Owner",
	2: "Member",
}

var TeamMember_Role_value = map[string]int32{
	"Undefined": 0,
	"Owner":     1,
	"Member":    2,
}

func (x TeamMember_Role) String() string {
	return proto.EnumName(TeamMember_Role_name, int32(x))
}

func (TeamMember_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{1, 0}
}

type TournamentMember_Role int32

const (
	TournamentMember_Undefined TournamentMember_Role = 0
	TournamentMember_Owner     TournamentMember_Role = 1
	TournamentMember_Member    TournamentMember_Role = 2
)

var TournamentMember_Role_name = map[int32]string{
	0: "Undefined",
	1: "Owner",
	2: "Member",
}

var TournamentMember_Role_value = map[string]int32{
	"Undefined": 0,
	"Owner":     1,
	"Member":    2,
}

func (x TournamentMember_Role) String() string {
	return proto.EnumName(TournamentMember_Role_name, int32(x))
}

func (TournamentMember_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{2, 0}
}

type LevelVersion_Driver int32

const (
	LevelVersion_Unknown       LevelVersion_Driver = 0
	LevelVersion_Docker        LevelVersion_Driver = 1
	LevelVersion_DockerCompose LevelVersion_Driver = 2
)

var LevelVersion_Driver_name = map[int32]string{
	0: "Unknown",
	1: "Docker",
	2: "DockerCompose",
}

var LevelVersion_Driver_value = map[string]int32{
	"Unknown":       0,
	"Docker":        1,
	"DockerCompose": 2,
}

func (x LevelVersion_Driver) String() string {
	return proto.EnumName(LevelVersion_Driver_name, int32(x))
}

func (LevelVersion_Driver) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{9, 0}
}

type Tournament_Status int32

const (
	Tournament_UnknownStatus Tournament_Status = 0
	Tournament_Started       Tournament_Status = 1
	Tournament_Stopped       Tournament_Status = 2
)

var Tournament_Status_name = map[int32]string{
	0: "UnknownStatus",
	1: "Started",
	2: "Stopped",
}

var Tournament_Status_value = map[string]int32{
	"UnknownStatus": 0,
	"Started":       1,
	"Stopped":       2,
}

func (x Tournament_Status) String() string {
	return proto.EnumName(Tournament_Status_name, int32(x))
}

func (Tournament_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{10, 0}
}

type Tournament_Visibility int32

const (
	Tournament_UnknownVisibility Tournament_Visibility = 0
	Tournament_Private           Tournament_Visibility = 1
	Tournament_Unlisted          Tournament_Visibility = 2
	Tournament_Public            Tournament_Visibility = 3
)

var Tournament_Visibility_name = map[int32]string{
	0: "UnknownVisibility",
	1: "Private",
	2: "Unlisted",
	3: "Public",
}

var Tournament_Visibility_value = map[string]int32{
	"UnknownVisibility": 0,
	"Private":           1,
	"Unlisted":          2,
	"Public":            3,
}

func (x Tournament_Visibility) String() string {
	return proto.EnumName(Tournament_Visibility_name, int32(x))
}

func (Tournament_Visibility) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{10, 1}
}

type LevelValidation_Status int32

const (
	LevelValidation_Unknown      LevelValidation_Status = 0
	LevelValidation_Sent         LevelValidation_Status = 1
	LevelValidation_Accepted     LevelValidation_Status = 2
	LevelValidation_Refused      LevelValidation_Status = 3
	LevelValidation_AutoAccepted LevelValidation_Status = 4
)

var LevelValidation_Status_name = map[int32]string{
	0: "Unknown",
	1: "Sent",
	2: "Accepted",
	3: "Refused",
	4: "AutoAccepted",
}

var LevelValidation_Status_value = map[string]int32{
	"Unknown":      0,
	"Sent":         1,
	"Accepted":     2,
	"Refused":      3,
	"AutoAccepted": 4,
}

func (x LevelValidation_Status) String() string {
	return proto.EnumName(LevelValidation_Status_name, int32(x))
}

func (LevelValidation_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{14, 0}
}

type InventoryItem_Item int32

const (
	InventoryItem_Unknown InventoryItem_Item = 0
)

var InventoryItem_Item_name = map[int32]string{
	0: "Unknown",
}

var InventoryItem_Item_value = map[string]int32{
	"Unknown": 0,
}

func (x InventoryItem_Item) String() string {
	return proto.EnumName(InventoryItem_Item_name, int32(x))
}

func (InventoryItem_Item) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{16, 0}
}

type LevelInstance_Status int32

const (
	LevelInstance_Unknown  LevelInstance_Status = 0
	LevelInstance_Active   LevelInstance_Status = 1
	LevelInstance_Inactive LevelInstance_Status = 2
)

var LevelInstance_Status_name = map[int32]string{
	0: "Unknown",
	1: "Active",
	2: "Inactive",
}

var LevelInstance_Status_value = map[string]int32{
	"Unknown":  0,
	"Active":   1,
	"Inactive": 2,
}

func (x LevelInstance_Status) String() string {
	return proto.EnumName(LevelInstance_Status_name, int32(x))
}

func (LevelInstance_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{18, 0}
}

type Hypervisor_Status int32

const (
	Hypervisor_Unknown  Hypervisor_Status = 0
	Hypervisor_Active   Hypervisor_Status = 1
	Hypervisor_Inactive Hypervisor_Status = 2
)

var Hypervisor_Status_name = map[int32]string{
	0: "Unknown",
	1: "Active",
	2: "Inactive",
}

var Hypervisor_Status_value = map[string]int32{
	"Unknown":  0,
	"Active":   1,
	"Inactive": 2,
}

func (x Hypervisor_Status) String() string {
	return proto.EnumName(Hypervisor_Status_name, int32(x))
}

func (Hypervisor_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{19, 0}
}

//
// fields
//
type Achievement_Type int32

const (
	Achievement_Undefined           Achievement_Type = 0
	Achievement_Buy1Level           Achievement_Type = 1
	Achievement_Buy5Levels          Achievement_Type = 2
	Achievement_Buy10Levels         Achievement_Type = 3
	Achievement_Buy20Levels         Achievement_Type = 4
	Achievement_Buy50Levels         Achievement_Type = 5
	Achievement_Validate1Level      Achievement_Type = 10
	Achievement_Validate5Levels     Achievement_Type = 11
	Achievement_Validate10Levels    Achievement_Type = 12
	Achievement_Validate20Levels    Achievement_Type = 13
	Achievement_Validate50Levels    Achievement_Type = 14
	Achievement_Validate1Coupon     Achievement_Type = 20
	Achievement_Validate5Coupons    Achievement_Type = 21
	Achievement_Validate10Coupons   Achievement_Type = 22
	Achievement_Validate20Coupons   Achievement_Type = 23
	Achievement_Validate50Coupons   Achievement_Type = 24
	Achievement_Validate100Coupons  Achievement_Type = 25
	Achievement_Author1Level        Achievement_Type = 30
	Achievement_Author2Levels       Achievement_Type = 31
	Achievement_Author5Levels       Achievement_Type = 32
	Achievement_Author10Levels      Achievement_Type = 33
	Achievement_EarlyAdopterTop100  Achievement_Type = 40
	Achievement_EarlyAdopterTop1000 Achievement_Type = 41
	Achievement_Old1Year            Achievement_Type = 50
	Achievement_Send1PullRequest    Achievement_Type = 90
	Achievement_Send2PullRequests   Achievement_Type = 91
	Achievement_Send5PullRequests   Achievement_Type = 92
	Achievement_Send10Pullrequests  Achievement_Type = 93
	Achievement_Staff               Achievement_Type = 100
	Achievement_Contributor         Achievement_Type = 101
	Achievement_BugHunter           Achievement_Type = 102
	Achievement_Moderator           Achievement_Type = 103
	Achievement_HackThePlatform     Achievement_Type = 104
)

var Achievement_Type_name = map[int32]string{
	0:   "Undefined",
	1:   "Buy1Level",
	2:   "Buy5Levels",
	3:   "Buy10Levels",
	4:   "Buy20Levels",
	5:   "Buy50Levels",
	10:  "Validate1Level",
	11:  "Validate5Levels",
	12:  "Validate10Levels",
	13:  "Validate20Levels",
	14:  "Validate50Levels",
	20:  "Validate1Coupon",
	21:  "Validate5Coupons",
	22:  "Validate10Coupons",
	23:  "Validate20Coupons",
	24:  "Validate50Coupons",
	25:  "Validate100Coupons",
	30:  "Author1Level",
	31:  "Author2Levels",
	32:  "Author5Levels",
	33:  "Author10Levels",
	40:  "EarlyAdopterTop100",
	41:  "EarlyAdopterTop1000",
	50:  "Old1Year",
	90:  "Send1PullRequest",
	91:  "Send2PullRequests",
	92:  "Send5PullRequests",
	93:  "Send10Pullrequests",
	100: "Staff",
	101: "Contributor",
	102: "BugHunter",
	103: "Moderator",
	104: "HackThePlatform",
}

var Achievement_Type_value = map[string]int32{
	"Undefined":           0,
	"Buy1Level":           1,
	"Buy5Levels":          2,
	"Buy10Levels":         3,
	"Buy20Levels":         4,
	"Buy50Levels":         5,
	"Validate1Level":      10,
	"Validate5Levels":     11,
	"Validate10Levels":    12,
	"Validate20Levels":    13,
	"Validate50Levels":    14,
	"Validate1Coupon":     20,
	"Validate5Coupons":    21,
	"Validate10Coupons":   22,
	"Validate20Coupons":   23,
	"Validate50Coupons":   24,
	"Validate100Coupons":  25,
	"Author1Level":        30,
	"Author2Levels":       31,
	"Author5Levels":       32,
	"Author10Levels":      33,
	"EarlyAdopterTop100":  40,
	"EarlyAdopterTop1000": 41,
	"Old1Year":            50,
	"Send1PullRequest":    90,
	"Send2PullRequests":   91,
	"Send5PullRequests":   92,
	"Send10Pullrequests":  93,
	"Staff":               100,
	"Contributor":         101,
	"BugHunter":           102,
	"Moderator":           103,
	"HackThePlatform":     104,
}

func (x Achievement_Type) String() string {
	return proto.EnumName(Achievement_Type_name, int32(x))
}

func (Achievement_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{23, 0}
}

type Metadata struct {
	ID        string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt *time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Metadata) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Metadata) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type TeamMember struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Role     TeamMember_Role `protobuf:"varint,100,opt,name=role,proto3,enum=pathwar.entity.TeamMember_Role" json:"role,omitempty"`
	User     *User           `protobuf:"bytes,200,opt,name=user,proto3" json:"user,omitempty" gorm:"foreignkey:UserID"`
	UserID   string          `protobuf:"bytes,201,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:"not null" gorm:"index"`
	Team     *Team           `protobuf:"bytes,202,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID   string          `protobuf:"bytes,203,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *TeamMember) Reset()         { *m = TeamMember{} }
func (m *TeamMember) String() string { return proto.CompactTextString(m) }
func (*TeamMember) ProtoMessage()    {}
func (*TeamMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{1}
}
func (m *TeamMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamMember.Merge(m, src)
}
func (m *TeamMember) XXX_Size() int {
	return m.Size()
}
func (m *TeamMember) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamMember.DiscardUnknown(m)
}

var xxx_messageInfo_TeamMember proto.InternalMessageInfo

func (m *TeamMember) GetRole() TeamMember_Role {
	if m != nil {
		return m.Role
	}
	return TeamMember_Undefined
}

func (m *TeamMember) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TeamMember) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *TeamMember) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *TeamMember) GetTeamID() string {
	if m != nil {
		return m.TeamID
	}
	return ""
}

type TournamentMember struct {
	Metadata                `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Role                    TournamentMember_Role `protobuf:"varint,100,opt,name=role,proto3,enum=pathwar.entity.TournamentMember_Role" json:"role,omitempty"`
	User                    *User                 `protobuf:"bytes,200,opt,name=user,proto3" json:"user,omitempty" gorm:"foreignkey:UserID"`
	UserID                  string                `protobuf:"bytes,201,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:"not null" gorm:"index"`
	TournamentTeam          *TournamentTeam       `protobuf:"bytes,202,opt,name=tournament_team,json=tournamentTeam,proto3" json:"tournament_team,omitempty" gorm:"foreignkey:TournamentTeamID"`
	TournamentTeamID        string                `protobuf:"bytes,203,opt,name=tournament_team_id,json=tournamentTeamId,proto3" json:"tournament_team_id,omitempty" sql:"not null" gorm:"index"`
	Coupons                 []*Coupon             `protobuf:"bytes,204,rep,name=coupons,proto3" json:"coupons,omitempty" gorm:"PRELOAD:false"`
	Achievements            []*Achievement        `protobuf:"bytes,205,rep,name=achievements,proto3" json:"achievements,omitempty" gorm:"PRELOAD:false"`
	SentWhoswhoAttempts     []*WhoswhoAttempt     `protobuf:"bytes,206,rep,name=sent_whoswho_attempts,json=sentWhoswhoAttempts,proto3" json:"sent_whoswho_attempts,omitempty" gorm:"PRELOAD:false"`
	ReceivedWhoswhoAttempts []*WhoswhoAttempt     `protobuf:"bytes,207,rep,name=received_whoswho_attempts,json=receivedWhoswhoAttempts,proto3" json:"received_whoswho_attempts,omitempty" gorm:"PRELOAD:false"`
	Items                   []*InventoryItem      `protobuf:"bytes,208,rep,name=items,proto3" json:"items,omitempty" gorm:"PRELOAD:false"`
	LevelValidations        []*LevelValidation    `protobuf:"bytes,209,rep,name=level_validations,json=levelValidations,proto3" json:"level_validations,omitempty" gorm:"PRELOAD:false"`
}

func (m *TournamentMember) Reset()         { *m = TournamentMember{} }
func (m *TournamentMember) String() string { return proto.CompactTextString(m) }
func (*TournamentMember) ProtoMessage()    {}
func (*TournamentMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{2}
}
func (m *TournamentMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TournamentMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TournamentMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TournamentMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TournamentMember.Merge(m, src)
}
func (m *TournamentMember) XXX_Size() int {
	return m.Size()
}
func (m *TournamentMember) XXX_DiscardUnknown() {
	xxx_messageInfo_TournamentMember.DiscardUnknown(m)
}

var xxx_messageInfo_TournamentMember proto.InternalMessageInfo

func (m *TournamentMember) GetRole() TournamentMember_Role {
	if m != nil {
		return m.Role
	}
	return TournamentMember_Undefined
}

func (m *TournamentMember) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TournamentMember) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *TournamentMember) GetTournamentTeam() *TournamentTeam {
	if m != nil {
		return m.TournamentTeam
	}
	return nil
}

func (m *TournamentMember) GetTournamentTeamID() string {
	if m != nil {
		return m.TournamentTeamID
	}
	return ""
}

func (m *TournamentMember) GetCoupons() []*Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

func (m *TournamentMember) GetAchievements() []*Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

func (m *TournamentMember) GetSentWhoswhoAttempts() []*WhoswhoAttempt {
	if m != nil {
		return m.SentWhoswhoAttempts
	}
	return nil
}

func (m *TournamentMember) GetReceivedWhoswhoAttempts() []*WhoswhoAttempt {
	if m != nil {
		return m.ReceivedWhoswhoAttempts
	}
	return nil
}

func (m *TournamentMember) GetItems() []*InventoryItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *TournamentMember) GetLevelValidations() []*LevelValidation {
	if m != nil {
		return m.LevelValidations
	}
	return nil
}

// User defines a User Account / Profile
type User struct {
	Metadata                 `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Username                 string              `protobuf:"bytes,100,opt,name=username,proto3" json:"username,omitempty"`
	Email                    string              `protobuf:"bytes,101,opt,name=email,proto3" json:"email,omitempty"`
	GravatarURL              string              `protobuf:"bytes,102,opt,name=gravatar_url,json=gravatarUrl,proto3" json:"gravatar_url,omitempty"`
	WebsiteURL               string              `protobuf:"bytes,103,opt,name=website_url,json=websiteUrl,proto3" json:"website_url,omitempty"`
	Locale                   string              `protobuf:"bytes,104,opt,name=locale,proto3" json:"locale,omitempty"`
	OauthSubject             string              `protobuf:"bytes,105,opt,name=oauth_subject,json=oauthSubject,proto3" json:"oauth_subject,omitempty" gorm:"unique_index"`
	TournamentMemberships    []*TournamentMember `protobuf:"bytes,200,rep,name=tournament_memberships,json=tournamentMemberships,proto3" json:"tournament_memberships,omitempty" gorm:"PRELOAD:false"`
	Notifications            []*Notification     `protobuf:"bytes,201,rep,name=notifications,proto3" json:"notifications,omitempty" gorm:"PRELOAD:false"`
	Memberships              []*TeamMember       `protobuf:"bytes,202,rep,name=memberships,proto3" json:"memberships,omitempty" gorm:"PRELOAD:false"`
	ActiveTournamentMember   *TournamentMember   `protobuf:"bytes,203,opt,name=active_tournament_member,json=activeTournamentMember,proto3" json:"active_tournament_member,omitempty" gorm:"foreignkey:ActiveTournamentMemberID;PRELOAD:false"`
	ActiveTournamentMemberID string              `protobuf:"bytes,204,opt,name=active_tournament_member_id,json=activeTournamentMemberId,proto3" json:"active_tournament_member_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{3}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetGravatarURL() string {
	if m != nil {
		return m.GravatarURL
	}
	return ""
}

func (m *User) GetWebsiteURL() string {
	if m != nil {
		return m.WebsiteURL
	}
	return ""
}

func (m *User) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *User) GetOauthSubject() string {
	if m != nil {
		return m.OauthSubject
	}
	return ""
}

func (m *User) GetTournamentMemberships() []*TournamentMember {
	if m != nil {
		return m.TournamentMemberships
	}
	return nil
}

func (m *User) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *User) GetMemberships() []*TeamMember {
	if m != nil {
		return m.Memberships
	}
	return nil
}

func (m *User) GetActiveTournamentMember() *TournamentMember {
	if m != nil {
		return m.ActiveTournamentMember
	}
	return nil
}

func (m *User) GetActiveTournamentMemberID() string {
	if m != nil {
		return m.ActiveTournamentMemberID
	}
	return ""
}

type UserList struct {
	Items []*User `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{4}
}
func (m *UserList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return m.Size()
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetItems() []*User {
	if m != nil {
		return m.Items
	}
	return nil
}

type Team struct {
	Metadata                `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Name                    string            `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	GravatarURL             string            `protobuf:"bytes,101,opt,name=gravatar_url,json=gravatarUrl,proto3" json:"gravatar_url,omitempty"`
	Locale                  string            `protobuf:"bytes,102,opt,name=locale,proto3" json:"locale,omitempty"`
	TournamentTeams         []*TournamentTeam `protobuf:"bytes,200,rep,name=tournament_teams,json=tournamentTeams,proto3" json:"tournament_teams,omitempty" gorm:"PRELOAD:false"`
	ReceivedWhoswhoAttempts []*WhoswhoAttempt `protobuf:"bytes,201,rep,name=received_whoswho_attempts,json=receivedWhoswhoAttempts,proto3" json:"received_whoswho_attempts,omitempty" gorm:"PRELOAD:false"`
	Members                 []*TeamMember     `protobuf:"bytes,202,rep,name=members,proto3" json:"members,omitempty" gorm:"PRELOAD:false"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{5}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetGravatarURL() string {
	if m != nil {
		return m.GravatarURL
	}
	return ""
}

func (m *Team) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *Team) GetTournamentTeams() []*TournamentTeam {
	if m != nil {
		return m.TournamentTeams
	}
	return nil
}

func (m *Team) GetReceivedWhoswhoAttempts() []*WhoswhoAttempt {
	if m != nil {
		return m.ReceivedWhoswhoAttempts
	}
	return nil
}

func (m *Team) GetMembers() []*TeamMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type TeamList struct {
	Items []*Team `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *TeamList) Reset()         { *m = TeamList{} }
func (m *TeamList) String() string { return proto.CompactTextString(m) }
func (*TeamList) ProtoMessage()    {}
func (*TeamList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{6}
}
func (m *TeamList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamList.Merge(m, src)
}
func (m *TeamList) XXX_Size() int {
	return m.Size()
}
func (m *TeamList) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamList.DiscardUnknown(m)
}

var xxx_messageInfo_TeamList proto.InternalMessageInfo

func (m *TeamList) GetItems() []*Team {
	if m != nil {
		return m.Items
	}
	return nil
}

type Level struct {
	Metadata    `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Name        string `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,101,opt,name=description,proto3" json:"description,omitempty"`
	Author      string `protobuf:"bytes,102,opt,name=author,proto3" json:"author,omitempty"`
	// AuthorProfile
	Locale     string `protobuf:"bytes,105,opt,name=locale,proto3" json:"locale,omitempty"`
	IsDraft    bool   `protobuf:"varint,106,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
	PreviewUrl string `protobuf:"bytes,107,opt,name=preview_url,json=previewUrl,proto3" json:"preview_url,omitempty"`
	// repeated string tags = ;
	Homepage string          `protobuf:"bytes,108,opt,name=homepage,proto3" json:"homepage,omitempty"`
	Versions []*LevelVersion `protobuf:"bytes,200,rep,name=versions,proto3" json:"versions,omitempty" gorm:"PRELOAD:false"`
}

func (m *Level) Reset()         { *m = Level{} }
func (m *Level) String() string { return proto.CompactTextString(m) }
func (*Level) ProtoMessage()    {}
func (*Level) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{7}
}
func (m *Level) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Level) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Level.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Level) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Level.Merge(m, src)
}
func (m *Level) XXX_Size() int {
	return m.Size()
}
func (m *Level) XXX_DiscardUnknown() {
	xxx_messageInfo_Level.DiscardUnknown(m)
}

var xxx_messageInfo_Level proto.InternalMessageInfo

func (m *Level) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Level) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Level) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Level) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *Level) GetIsDraft() bool {
	if m != nil {
		return m.IsDraft
	}
	return false
}

func (m *Level) GetPreviewUrl() string {
	if m != nil {
		return m.PreviewUrl
	}
	return ""
}

func (m *Level) GetHomepage() string {
	if m != nil {
		return m.Homepage
	}
	return ""
}

func (m *Level) GetVersions() []*LevelVersion {
	if m != nil {
		return m.Versions
	}
	return nil
}

type LevelList struct {
	Items []*Level `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *LevelList) Reset()         { *m = LevelList{} }
func (m *LevelList) String() string { return proto.CompactTextString(m) }
func (*LevelList) ProtoMessage()    {}
func (*LevelList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{8}
}
func (m *LevelList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelList.Merge(m, src)
}
func (m *LevelList) XXX_Size() int {
	return m.Size()
}
func (m *LevelList) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelList.DiscardUnknown(m)
}

var xxx_messageInfo_LevelList proto.InternalMessageInfo

func (m *LevelList) GetItems() []*Level {
	if m != nil {
		return m.Items
	}
	return nil
}

type LevelVersion struct {
	Metadata  `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Version   string              `protobuf:"bytes,100,opt,name=version,proto3" json:"version,omitempty"`
	Changelog string              `protobuf:"bytes,101,opt,name=changelog,proto3" json:"changelog,omitempty"`
	IsDraft   bool                `protobuf:"varint,102,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
	IsLatest  bool                `protobuf:"varint,103,opt,name=is_latest,json=isLatest,proto3" json:"is_latest,omitempty"`
	SourceURL string              `protobuf:"bytes,104,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	Driver    LevelVersion_Driver `protobuf:"varint,105,opt,name=driver,proto3,enum=pathwar.entity.LevelVersion_Driver" json:"driver,omitempty"`
	Level     *Level              `protobuf:"bytes,200,opt,name=level,proto3" json:"level,omitempty" gorm:"foreignkey:LevelID"`
	LevelID   string              `protobuf:"bytes,201,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty" sql:"not null" gorm:"index"`
	Flavors   []*LevelFlavor      `protobuf:"bytes,202,rep,name=flavors,proto3" json:"flavors,omitempty" gorm:"PRELOAD:false"`
}

func (m *LevelVersion) Reset()         { *m = LevelVersion{} }
func (m *LevelVersion) String() string { return proto.CompactTextString(m) }
func (*LevelVersion) ProtoMessage()    {}
func (*LevelVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{9}
}
func (m *LevelVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelVersion.Merge(m, src)
}
func (m *LevelVersion) XXX_Size() int {
	return m.Size()
}
func (m *LevelVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelVersion.DiscardUnknown(m)
}

var xxx_messageInfo_LevelVersion proto.InternalMessageInfo

func (m *LevelVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LevelVersion) GetChangelog() string {
	if m != nil {
		return m.Changelog
	}
	return ""
}

func (m *LevelVersion) GetIsDraft() bool {
	if m != nil {
		return m.IsDraft
	}
	return false
}

func (m *LevelVersion) GetIsLatest() bool {
	if m != nil {
		return m.IsLatest
	}
	return false
}

func (m *LevelVersion) GetSourceURL() string {
	if m != nil {
		return m.SourceURL
	}
	return ""
}

func (m *LevelVersion) GetDriver() LevelVersion_Driver {
	if m != nil {
		return m.Driver
	}
	return LevelVersion_Unknown
}

func (m *LevelVersion) GetLevel() *Level {
	if m != nil {
		return m.Level
	}
	return nil
}

func (m *LevelVersion) GetLevelID() string {
	if m != nil {
		return m.LevelID
	}
	return ""
}

func (m *LevelVersion) GetFlavors() []*LevelFlavor {
	if m != nil {
		return m.Flavors
	}
	return nil
}

type Tournament struct {
	Metadata   `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Name       string                `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Status     Tournament_Status     `protobuf:"varint,101,opt,name=status,proto3,enum=pathwar.entity.Tournament_Status" json:"status,omitempty"`
	Visibility Tournament_Visibility `protobuf:"varint,102,opt,name=visibility,proto3,enum=pathwar.entity.Tournament_Visibility" json:"visibility,omitempty"`
	IsDefault  bool                  `protobuf:"varint,103,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Teams      []*TournamentTeam     `protobuf:"bytes,200,rep,name=teams,proto3" json:"teams,omitempty" gorm:"PRELOAD:false"`
	Coupons    []*Coupon             `protobuf:"bytes,201,rep,name=coupons,proto3" json:"coupons,omitempty" gorm:"PRELOAD:false"`
}

func (m *Tournament) Reset()         { *m = Tournament{} }
func (m *Tournament) String() string { return proto.CompactTextString(m) }
func (*Tournament) ProtoMessage()    {}
func (*Tournament) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{10}
}
func (m *Tournament) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tournament) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tournament.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tournament) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tournament.Merge(m, src)
}
func (m *Tournament) XXX_Size() int {
	return m.Size()
}
func (m *Tournament) XXX_DiscardUnknown() {
	xxx_messageInfo_Tournament.DiscardUnknown(m)
}

var xxx_messageInfo_Tournament proto.InternalMessageInfo

func (m *Tournament) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tournament) GetStatus() Tournament_Status {
	if m != nil {
		return m.Status
	}
	return Tournament_UnknownStatus
}

func (m *Tournament) GetVisibility() Tournament_Visibility {
	if m != nil {
		return m.Visibility
	}
	return Tournament_UnknownVisibility
}

func (m *Tournament) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *Tournament) GetTeams() []*TournamentTeam {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *Tournament) GetCoupons() []*Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

type TournamentList struct {
	Items []*Tournament `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *TournamentList) Reset()         { *m = TournamentList{} }
func (m *TournamentList) String() string { return proto.CompactTextString(m) }
func (*TournamentList) ProtoMessage()    {}
func (*TournamentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{11}
}
func (m *TournamentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TournamentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TournamentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TournamentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TournamentList.Merge(m, src)
}
func (m *TournamentList) XXX_Size() int {
	return m.Size()
}
func (m *TournamentList) XXX_DiscardUnknown() {
	xxx_messageInfo_TournamentList.DiscardUnknown(m)
}

var xxx_messageInfo_TournamentList proto.InternalMessageInfo

func (m *TournamentList) GetItems() []*Tournament {
	if m != nil {
		return m.Items
	}
	return nil
}

type TournamentTeam struct {
	Metadata           `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	IsDefault          bool                 `protobuf:"varint,100,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Tournament         *Tournament          `protobuf:"bytes,200,opt,name=tournament,proto3" json:"tournament,omitempty" gorm:"foreignkey:TournamentID"`
	TournamentID       string               `protobuf:"bytes,201,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty" sql:"not null" gorm:"index"`
	Team               *Team                `protobuf:"bytes,202,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID             string               `protobuf:"bytes,203,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"index"`
	LevelSubscriptions []*LevelSubscription `protobuf:"bytes,205,rep,name=level_subscriptions,json=levelSubscriptions,proto3" json:"level_subscriptions,omitempty" gorm:"PRELOAD:false"`
	Members            []*TournamentMember  `protobuf:"bytes,206,rep,name=members,proto3" json:"members,omitempty" gorm:"PRELOAD:false"`
}

func (m *TournamentTeam) Reset()         { *m = TournamentTeam{} }
func (m *TournamentTeam) String() string { return proto.CompactTextString(m) }
func (*TournamentTeam) ProtoMessage()    {}
func (*TournamentTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{12}
}
func (m *TournamentTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TournamentTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TournamentTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TournamentTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TournamentTeam.Merge(m, src)
}
func (m *TournamentTeam) XXX_Size() int {
	return m.Size()
}
func (m *TournamentTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_TournamentTeam.DiscardUnknown(m)
}

var xxx_messageInfo_TournamentTeam proto.InternalMessageInfo

func (m *TournamentTeam) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *TournamentTeam) GetTournament() *Tournament {
	if m != nil {
		return m.Tournament
	}
	return nil
}

func (m *TournamentTeam) GetTournamentID() string {
	if m != nil {
		return m.TournamentID
	}
	return ""
}

func (m *TournamentTeam) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *TournamentTeam) GetTeamID() string {
	if m != nil {
		return m.TeamID
	}
	return ""
}

func (m *TournamentTeam) GetLevelSubscriptions() []*LevelSubscription {
	if m != nil {
		return m.LevelSubscriptions
	}
	return nil
}

func (m *TournamentTeam) GetMembers() []*TournamentMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type WhoswhoAttempt struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	//
	// fields
	//
	Success bool `protobuf:"varint,100,opt,name=success,proto3" json:"success,omitempty"`
	//
	// associations
	//
	Author         *TournamentMember `protobuf:"bytes,200,opt,name=author,proto3" json:"author,omitempty" sql:"not null" gorm:"foreignkey:AuthorID"`
	AuthorID       string            `protobuf:"bytes,201,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:"not null" gorm:"index"`
	TargetMember   *TournamentMember `protobuf:"bytes,202,opt,name=target_member,json=targetMember,proto3" json:"target_member,omitempty" sql:"not null" gorm:"foreignkey:TargetMemberID"`
	TargetMemberID string            `protobuf:"bytes,203,opt,name=target_member_id,json=targetMemberId,proto3" json:"target_member_id,omitempty" sql:"not null" gorm:"index"`
	TargetTeam     *TournamentTeam   `protobuf:"bytes,204,opt,name=target_team,json=targetTeam,proto3" json:"target_team,omitempty" sql:"not null" gorm:"foreignkey:TargetTeamID"`
	TargetTeamID   string            `protobuf:"bytes,205,opt,name=target_team_id,json=targetTeamId,proto3" json:"target_team_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *WhoswhoAttempt) Reset()         { *m = WhoswhoAttempt{} }
func (m *WhoswhoAttempt) String() string { return proto.CompactTextString(m) }
func (*WhoswhoAttempt) ProtoMessage()    {}
func (*WhoswhoAttempt) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{13}
}
func (m *WhoswhoAttempt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhoswhoAttempt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhoswhoAttempt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhoswhoAttempt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhoswhoAttempt.Merge(m, src)
}
func (m *WhoswhoAttempt) XXX_Size() int {
	return m.Size()
}
func (m *WhoswhoAttempt) XXX_DiscardUnknown() {
	xxx_messageInfo_WhoswhoAttempt.DiscardUnknown(m)
}

var xxx_messageInfo_WhoswhoAttempt proto.InternalMessageInfo

func (m *WhoswhoAttempt) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *WhoswhoAttempt) GetAuthor() *TournamentMember {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *WhoswhoAttempt) GetAuthorID() string {
	if m != nil {
		return m.AuthorID
	}
	return ""
}

func (m *WhoswhoAttempt) GetTargetMember() *TournamentMember {
	if m != nil {
		return m.TargetMember
	}
	return nil
}

func (m *WhoswhoAttempt) GetTargetMemberID() string {
	if m != nil {
		return m.TargetMemberID
	}
	return ""
}

func (m *WhoswhoAttempt) GetTargetTeam() *TournamentTeam {
	if m != nil {
		return m.TargetTeam
	}
	return nil
}

func (m *WhoswhoAttempt) GetTargetTeamID() string {
	if m != nil {
		return m.TargetTeamID
	}
	return ""
}

type LevelValidation struct {
	Metadata            `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Status              LevelValidation_Status `protobuf:"varint,100,opt,name=status,proto3,enum=pathwar.entity.LevelValidation_Status" json:"status,omitempty"`
	AuthorComment       string                 `protobuf:"bytes,101,opt,name=author_comment,json=authorComment,proto3" json:"author_comment,omitempty"`
	CorrectorComment    string                 `protobuf:"bytes,102,opt,name=corrector_comment,json=correctorComment,proto3" json:"corrector_comment,omitempty"`
	LevelSubscription   *LevelSubscription     `protobuf:"bytes,200,opt,name=level_subscription,json=levelSubscription,proto3" json:"level_subscription,omitempty" gorm:"foreignkey:LevelSubscriptionID"`
	LevelSubscriptionID string                 `protobuf:"bytes,201,opt,name=level_subscription_id,json=levelSubscriptionId,proto3" json:"level_subscription_id,omitempty" sql:"not null" gorm:"index"`
	TournamentMember    *TournamentMember      `protobuf:"bytes,202,opt,name=tournament_member,json=tournamentMember,proto3" json:"tournament_member,omitempty" gorm:"foreignkey:TournamentMemberID"`
	TournamentMemberID  string                 `protobuf:"bytes,203,opt,name=tournament_member_id,json=tournamentMemberId,proto3" json:"tournament_member_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *LevelValidation) Reset()         { *m = LevelValidation{} }
func (m *LevelValidation) String() string { return proto.CompactTextString(m) }
func (*LevelValidation) ProtoMessage()    {}
func (*LevelValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{14}
}
func (m *LevelValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelValidation.Merge(m, src)
}
func (m *LevelValidation) XXX_Size() int {
	return m.Size()
}
func (m *LevelValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelValidation.DiscardUnknown(m)
}

var xxx_messageInfo_LevelValidation proto.InternalMessageInfo

func (m *LevelValidation) GetStatus() LevelValidation_Status {
	if m != nil {
		return m.Status
	}
	return LevelValidation_Unknown
}

func (m *LevelValidation) GetAuthorComment() string {
	if m != nil {
		return m.AuthorComment
	}
	return ""
}

func (m *LevelValidation) GetCorrectorComment() string {
	if m != nil {
		return m.CorrectorComment
	}
	return ""
}

func (m *LevelValidation) GetLevelSubscription() *LevelSubscription {
	if m != nil {
		return m.LevelSubscription
	}
	return nil
}

func (m *LevelValidation) GetLevelSubscriptionID() string {
	if m != nil {
		return m.LevelSubscriptionID
	}
	return ""
}

func (m *LevelValidation) GetTournamentMember() *TournamentMember {
	if m != nil {
		return m.TournamentMember
	}
	return nil
}

func (m *LevelValidation) GetTournamentMemberID() string {
	if m != nil {
		return m.TournamentMemberID
	}
	return ""
}

type LevelSubscription struct {
	Metadata         `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	TournamentTeam   *TournamentTeam    `protobuf:"bytes,200,opt,name=tournament_team,json=tournamentTeam,proto3" json:"tournament_team,omitempty" gorm:"foreignkey:TournamentTeamID"`
	TournamentTeamID string             `protobuf:"bytes,201,opt,name=tournament_team_id,json=tournamentTeamId,proto3" json:"tournament_team_id,omitempty" sql:"not null" gorm:"index"`
	LevelFlavor      *LevelFlavor       `protobuf:"bytes,202,opt,name=level_flavor,json=levelFlavor,proto3" json:"level_flavor,omitempty" gorm:"foreignkey:LevelFlavorID"`
	LevelFlavorID    string             `protobuf:"bytes,203,opt,name=level_flavor_id,json=levelFlavorId,proto3" json:"level_flavor_id,omitempty" sql:"not null" gorm:"index"`
	Validations      []*LevelValidation `protobuf:"bytes,204,rep,name=validations,proto3" json:"validations,omitempty" gorm:"PRELOAD:false"`
}

func (m *LevelSubscription) Reset()         { *m = LevelSubscription{} }
func (m *LevelSubscription) String() string { return proto.CompactTextString(m) }
func (*LevelSubscription) ProtoMessage()    {}
func (*LevelSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{15}
}
func (m *LevelSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelSubscription.Merge(m, src)
}
func (m *LevelSubscription) XXX_Size() int {
	return m.Size()
}
func (m *LevelSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_LevelSubscription proto.InternalMessageInfo

func (m *LevelSubscription) GetTournamentTeam() *TournamentTeam {
	if m != nil {
		return m.TournamentTeam
	}
	return nil
}

func (m *LevelSubscription) GetTournamentTeamID() string {
	if m != nil {
		return m.TournamentTeamID
	}
	return ""
}

func (m *LevelSubscription) GetLevelFlavor() *LevelFlavor {
	if m != nil {
		return m.LevelFlavor
	}
	return nil
}

func (m *LevelSubscription) GetLevelFlavorID() string {
	if m != nil {
		return m.LevelFlavorID
	}
	return ""
}

func (m *LevelSubscription) GetValidations() []*LevelValidation {
	if m != nil {
		return m.Validations
	}
	return nil
}

type InventoryItem struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Item     InventoryItem_Item `protobuf:"varint,100,opt,name=item,proto3,enum=pathwar.entity.InventoryItem_Item" json:"item,omitempty"`
	Owner    *TournamentMember  `protobuf:"bytes,200,opt,name=owner,proto3" json:"owner,omitempty" gorm:"foreignkey:OwnerID"`
	OwnerID  string             `protobuf:"bytes,201,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *InventoryItem) Reset()         { *m = InventoryItem{} }
func (m *InventoryItem) String() string { return proto.CompactTextString(m) }
func (*InventoryItem) ProtoMessage()    {}
func (*InventoryItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{16}
}
func (m *InventoryItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InventoryItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InventoryItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InventoryItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InventoryItem.Merge(m, src)
}
func (m *InventoryItem) XXX_Size() int {
	return m.Size()
}
func (m *InventoryItem) XXX_DiscardUnknown() {
	xxx_messageInfo_InventoryItem.DiscardUnknown(m)
}

var xxx_messageInfo_InventoryItem proto.InternalMessageInfo

func (m *InventoryItem) GetItem() InventoryItem_Item {
	if m != nil {
		return m.Item
	}
	return InventoryItem_Unknown
}

func (m *InventoryItem) GetOwner() *TournamentMember {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *InventoryItem) GetOwnerID() string {
	if m != nil {
		return m.OwnerID
	}
	return ""
}

type LevelFlavor struct {
	Metadata       `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	LevelVersion   *Level               `protobuf:"bytes,200,opt,name=level_version,json=levelVersion,proto3" json:"level_version,omitempty" gorm:"foreignkey:LevelVersionID"`
	LevelVersionID string               `protobuf:"bytes,201,opt,name=level_version_id,json=levelVersionId,proto3" json:"level_version_id,omitempty" sql:"not null" gorm:"index"`
	Instances      []*LevelInstance     `protobuf:"bytes,202,rep,name=instances,proto3" json:"instances,omitempty" gorm:"PRELOAD:false"`
	Subscriptions  []*LevelSubscription `protobuf:"bytes,203,rep,name=subscriptions,proto3" json:"subscriptions,omitempty" gorm:"PRELOAD:false"`
}

func (m *LevelFlavor) Reset()         { *m = LevelFlavor{} }
func (m *LevelFlavor) String() string { return proto.CompactTextString(m) }
func (*LevelFlavor) ProtoMessage()    {}
func (*LevelFlavor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{17}
}
func (m *LevelFlavor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelFlavor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelFlavor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelFlavor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelFlavor.Merge(m, src)
}
func (m *LevelFlavor) XXX_Size() int {
	return m.Size()
}
func (m *LevelFlavor) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelFlavor.DiscardUnknown(m)
}

var xxx_messageInfo_LevelFlavor proto.InternalMessageInfo

func (m *LevelFlavor) GetLevelVersion() *Level {
	if m != nil {
		return m.LevelVersion
	}
	return nil
}

func (m *LevelFlavor) GetLevelVersionID() string {
	if m != nil {
		return m.LevelVersionID
	}
	return ""
}

func (m *LevelFlavor) GetInstances() []*LevelInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *LevelFlavor) GetSubscriptions() []*LevelSubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type LevelInstance struct {
	Metadata     `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Status       LevelInstance_Status `protobuf:"varint,100,opt,name=status,proto3,enum=pathwar.entity.LevelInstance_Status" json:"status,omitempty"`
	Hypervisor   *Hypervisor          `protobuf:"bytes,200,opt,name=hypervisor,proto3" json:"hypervisor,omitempty" gorm:"foreignkey:HypervisorID"`
	HypervisorID string               `protobuf:"bytes,201,opt,name=hypervisor_id,json=hypervisorId,proto3" json:"hypervisor_id,omitempty" sql:"not null" gorm:"index"`
	Flavor       *LevelFlavor         `protobuf:"bytes,202,opt,name=flavor,proto3" json:"flavor,omitempty" gorm:"foreignkey:FlavorID"`
	FlavorID     string               `protobuf:"bytes,203,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *LevelInstance) Reset()         { *m = LevelInstance{} }
func (m *LevelInstance) String() string { return proto.CompactTextString(m) }
func (*LevelInstance) ProtoMessage()    {}
func (*LevelInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{18}
}
func (m *LevelInstance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelInstance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelInstance.Merge(m, src)
}
func (m *LevelInstance) XXX_Size() int {
	return m.Size()
}
func (m *LevelInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelInstance.DiscardUnknown(m)
}

var xxx_messageInfo_LevelInstance proto.InternalMessageInfo

func (m *LevelInstance) GetStatus() LevelInstance_Status {
	if m != nil {
		return m.Status
	}
	return LevelInstance_Unknown
}

func (m *LevelInstance) GetHypervisor() *Hypervisor {
	if m != nil {
		return m.Hypervisor
	}
	return nil
}

func (m *LevelInstance) GetHypervisorID() string {
	if m != nil {
		return m.HypervisorID
	}
	return ""
}

func (m *LevelInstance) GetFlavor() *LevelFlavor {
	if m != nil {
		return m.Flavor
	}
	return nil
}

func (m *LevelInstance) GetFlavorID() string {
	if m != nil {
		return m.FlavorID
	}
	return ""
}

type Hypervisor struct {
	Metadata       `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Name           string            `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Address        string            `protobuf:"bytes,101,opt,name=address,proto3" json:"address,omitempty"`
	Status         Hypervisor_Status `protobuf:"varint,102,opt,name=status,proto3,enum=pathwar.entity.Hypervisor_Status" json:"status,omitempty"`
	LevelInstances []*LevelInstance  `protobuf:"bytes,200,rep,name=level_instances,json=levelInstances,proto3" json:"level_instances,omitempty" gorm:"PRELOAD:false"`
}

func (m *Hypervisor) Reset()         { *m = Hypervisor{} }
func (m *Hypervisor) String() string { return proto.CompactTextString(m) }
func (*Hypervisor) ProtoMessage()    {}
func (*Hypervisor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{19}
}
func (m *Hypervisor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hypervisor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hypervisor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hypervisor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hypervisor.Merge(m, src)
}
func (m *Hypervisor) XXX_Size() int {
	return m.Size()
}
func (m *Hypervisor) XXX_DiscardUnknown() {
	xxx_messageInfo_Hypervisor.DiscardUnknown(m)
}

var xxx_messageInfo_Hypervisor proto.InternalMessageInfo

func (m *Hypervisor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Hypervisor) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Hypervisor) GetStatus() Hypervisor_Status {
	if m != nil {
		return m.Status
	}
	return Hypervisor_Unknown
}

func (m *Hypervisor) GetLevelInstances() []*LevelInstance {
	if m != nil {
		return m.LevelInstances
	}
	return nil
}

type Notification struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	IsRead   bool   `protobuf:"varint,100,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	ClickUrl string `protobuf:"bytes,101,opt,name=click_url,json=clickUrl,proto3" json:"click_url,omitempty"`
	Msg      string `protobuf:"bytes,102,opt,name=msg,proto3" json:"msg,omitempty"`
	Args     string `protobuf:"bytes,103,opt,name=args,proto3" json:"args,omitempty"`
	User     *User  `protobuf:"bytes,200,opt,name=user,proto3" json:"user,omitempty" gorm:"foreignkey:UserID"`
	UserID   string `protobuf:"bytes,201,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{20}
}
func (m *Notification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return m.Size()
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetIsRead() bool {
	if m != nil {
		return m.IsRead
	}
	return false
}

func (m *Notification) GetClickUrl() string {
	if m != nil {
		return m.ClickUrl
	}
	return ""
}

func (m *Notification) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Notification) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *Notification) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Notification) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type Coupon struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	//
	// fields
	//
	Hash               string `protobuf:"bytes,100,opt,name=hash,proto3" json:"hash,omitempty" gorm:"unique_index"`
	Value              int32  `protobuf:"varint,101,opt,name=value,proto3" json:"value,omitempty"`
	MaxValidationCount int32  `protobuf:"varint,102,opt,name=max_validation_count,json=maxValidationCount,proto3" json:"max_validation_count,omitempty"`
	//
	// associations
	//
	Tournament   *Tournament         `protobuf:"bytes,200,opt,name=tournament,proto3" json:"tournament,omitempty" gorm:"foreignkey:TournamentID"`
	TournamentID string              `protobuf:"bytes,201,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty" gorm:"index"`
	Validations  []*CouponValidation `protobuf:"bytes,202,rep,name=validations,proto3" json:"validations,omitempty" gorm:"PRELOAD:false"`
}

func (m *Coupon) Reset()         { *m = Coupon{} }
func (m *Coupon) String() string { return proto.CompactTextString(m) }
func (*Coupon) ProtoMessage()    {}
func (*Coupon) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{21}
}
func (m *Coupon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coupon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coupon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coupon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coupon.Merge(m, src)
}
func (m *Coupon) XXX_Size() int {
	return m.Size()
}
func (m *Coupon) XXX_DiscardUnknown() {
	xxx_messageInfo_Coupon.DiscardUnknown(m)
}

var xxx_messageInfo_Coupon proto.InternalMessageInfo

func (m *Coupon) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Coupon) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Coupon) GetMaxValidationCount() int32 {
	if m != nil {
		return m.MaxValidationCount
	}
	return 0
}

func (m *Coupon) GetTournament() *Tournament {
	if m != nil {
		return m.Tournament
	}
	return nil
}

func (m *Coupon) GetTournamentID() string {
	if m != nil {
		return m.TournamentID
	}
	return ""
}

func (m *Coupon) GetValidations() []*CouponValidation {
	if m != nil {
		return m.Validations
	}
	return nil
}

type CouponValidation struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	//
	// fields
	//
	Comment string `protobuf:"bytes,100,opt,name=comment,proto3" json:"comment,omitempty"`
	//
	// associations
	//
	Author   *TournamentMember `protobuf:"bytes,200,opt,name=author,proto3" json:"author,omitempty" gorm:"foreignkey:AuthorID"`
	AuthorID string            `protobuf:"bytes,201,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:"not null" gorm:"index"`
	Coupon   *Coupon           `protobuf:"bytes,202,opt,name=coupon,proto3" json:"coupon,omitempty" gorm:"foreignkey:CouponID"`
	CouponID string            `protobuf:"bytes,203,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *CouponValidation) Reset()         { *m = CouponValidation{} }
func (m *CouponValidation) String() string { return proto.CompactTextString(m) }
func (*CouponValidation) ProtoMessage()    {}
func (*CouponValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{22}
}
func (m *CouponValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CouponValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CouponValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CouponValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CouponValidation.Merge(m, src)
}
func (m *CouponValidation) XXX_Size() int {
	return m.Size()
}
func (m *CouponValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_CouponValidation.DiscardUnknown(m)
}

var xxx_messageInfo_CouponValidation proto.InternalMessageInfo

func (m *CouponValidation) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *CouponValidation) GetAuthor() *TournamentMember {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *CouponValidation) GetAuthorID() string {
	if m != nil {
		return m.AuthorID
	}
	return ""
}

func (m *CouponValidation) GetCoupon() *Coupon {
	if m != nil {
		return m.Coupon
	}
	return nil
}

func (m *CouponValidation) GetCouponID() string {
	if m != nil {
		return m.CouponID
	}
	return ""
}

type Achievement struct {
	Metadata          `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Type              Achievement_Type  `protobuf:"varint,100,opt,name=type,proto3,enum=pathwar.entity.Achievement_Type" json:"type,omitempty"`
	IsGlobal          bool              `protobuf:"varint,101,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
	Comment           string            `protobuf:"bytes,102,opt,name=comment,proto3" json:"comment,omitempty"`
	Argument          string            `protobuf:"bytes,103,opt,name=argument,proto3" json:"argument,omitempty"`
	Author            *TournamentMember `protobuf:"bytes,200,opt,name=author,proto3" json:"author,omitempty" gorm:"foreignkey:AuthorID"`
	AuthorID          string            `protobuf:"bytes,201,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:"not null" gorm:"index"`
	LevelValidation   *LevelValidation  `protobuf:"bytes,202,opt,name=level_validation,json=levelValidation,proto3" json:"level_validation,omitempty" gorm:"foreignkey:LevelValidationID"`
	LevelValidationID string            `protobuf:"bytes,203,opt,name=level_validationt_id,json=levelValidationtId,proto3" json:"level_validationt_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *Achievement) Reset()         { *m = Achievement{} }
func (m *Achievement) String() string { return proto.CompactTextString(m) }
func (*Achievement) ProtoMessage()    {}
func (*Achievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{23}
}
func (m *Achievement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement.Merge(m, src)
}
func (m *Achievement) XXX_Size() int {
	return m.Size()
}
func (m *Achievement) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement proto.InternalMessageInfo

func (m *Achievement) GetType() Achievement_Type {
	if m != nil {
		return m.Type
	}
	return Achievement_Undefined
}

func (m *Achievement) GetIsGlobal() bool {
	if m != nil {
		return m.IsGlobal
	}
	return false
}

func (m *Achievement) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Achievement) GetArgument() string {
	if m != nil {
		return m.Argument
	}
	return ""
}

func (m *Achievement) GetAuthor() *TournamentMember {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Achievement) GetAuthorID() string {
	if m != nil {
		return m.AuthorID
	}
	return ""
}

func (m *Achievement) GetLevelValidation() *LevelValidation {
	if m != nil {
		return m.LevelValidation
	}
	return nil
}

func (m *Achievement) GetLevelValidationID() string {
	if m != nil {
		return m.LevelValidationID
	}
	return ""
}

type Dump struct {
	Achievements       []*Achievement       `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty"`
	Coupons            []*Coupon            `protobuf:"bytes,3,rep,name=coupons,proto3" json:"coupons,omitempty"`
	CouponValidations  []*CouponValidation  `protobuf:"bytes,4,rep,name=coupon_validations,json=couponValidations,proto3" json:"coupon_validations,omitempty"`
	Hypervisors        []*Hypervisor        `protobuf:"bytes,5,rep,name=hypervisors,proto3" json:"hypervisors,omitempty"`
	InventoryItems     []*InventoryItem     `protobuf:"bytes,6,rep,name=inventory_items,json=inventoryItems,proto3" json:"inventory_items,omitempty"`
	Levels             []*Level             `protobuf:"bytes,7,rep,name=levels,proto3" json:"levels,omitempty"`
	LevelFlavors       []*LevelFlavor       `protobuf:"bytes,8,rep,name=level_flavors,json=levelFlavors,proto3" json:"level_flavors,omitempty"`
	LevelInstances     []*LevelInstance     `protobuf:"bytes,9,rep,name=level_instances,json=levelInstances,proto3" json:"level_instances,omitempty"`
	LevelSubscriptions []*LevelSubscription `protobuf:"bytes,10,rep,name=level_subscriptions,json=levelSubscriptions,proto3" json:"level_subscriptions,omitempty"`
	LevelValidations   []*LevelValidation   `protobuf:"bytes,11,rep,name=level_validations,json=levelValidations,proto3" json:"level_validations,omitempty"`
	LevelVersions      []*LevelVersion      `protobuf:"bytes,12,rep,name=level_versions,json=levelVersions,proto3" json:"level_versions,omitempty"`
	Notifications      []*Notification      `protobuf:"bytes,13,rep,name=notifications,proto3" json:"notifications,omitempty"`
	Teams              []*Team              `protobuf:"bytes,14,rep,name=teams,proto3" json:"teams,omitempty"`
	TeamMembers        []*TeamMember        `protobuf:"bytes,15,rep,name=team_members,json=teamMembers,proto3" json:"team_members,omitempty"`
	Tournaments        []*Tournament        `protobuf:"bytes,16,rep,name=tournaments,proto3" json:"tournaments,omitempty"`
	TournamentMembers  []*TournamentMember  `protobuf:"bytes,17,rep,name=tournament_members,json=tournamentMembers,proto3" json:"tournament_members,omitempty"`
	TournamentTeams    []*TournamentTeam    `protobuf:"bytes,18,rep,name=tournament_teams,json=tournamentTeams,proto3" json:"tournament_teams,omitempty"`
	Users              []*User              `protobuf:"bytes,19,rep,name=users,proto3" json:"users,omitempty"`
	WhoswhoAttempts    []*WhoswhoAttempt    `protobuf:"bytes,20,rep,name=whoswho_attempts,json=whoswhoAttempts,proto3" json:"whoswho_attempts,omitempty"`
}

func (m *Dump) Reset()         { *m = Dump{} }
func (m *Dump) String() string { return proto.CompactTextString(m) }
func (*Dump) ProtoMessage()    {}
func (*Dump) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{24}
}
func (m *Dump) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dump.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dump.Merge(m, src)
}
func (m *Dump) XXX_Size() int {
	return m.Size()
}
func (m *Dump) XXX_DiscardUnknown() {
	xxx_messageInfo_Dump.DiscardUnknown(m)
}

var xxx_messageInfo_Dump proto.InternalMessageInfo

func (m *Dump) GetAchievements() []*Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

func (m *Dump) GetCoupons() []*Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

func (m *Dump) GetCouponValidations() []*CouponValidation {
	if m != nil {
		return m.CouponValidations
	}
	return nil
}

func (m *Dump) GetHypervisors() []*Hypervisor {
	if m != nil {
		return m.Hypervisors
	}
	return nil
}

func (m *Dump) GetInventoryItems() []*InventoryItem {
	if m != nil {
		return m.InventoryItems
	}
	return nil
}

func (m *Dump) GetLevels() []*Level {
	if m != nil {
		return m.Levels
	}
	return nil
}

func (m *Dump) GetLevelFlavors() []*LevelFlavor {
	if m != nil {
		return m.LevelFlavors
	}
	return nil
}

func (m *Dump) GetLevelInstances() []*LevelInstance {
	if m != nil {
		return m.LevelInstances
	}
	return nil
}

func (m *Dump) GetLevelSubscriptions() []*LevelSubscription {
	if m != nil {
		return m.LevelSubscriptions
	}
	return nil
}

func (m *Dump) GetLevelValidations() []*LevelValidation {
	if m != nil {
		return m.LevelValidations
	}
	return nil
}

func (m *Dump) GetLevelVersions() []*LevelVersion {
	if m != nil {
		return m.LevelVersions
	}
	return nil
}

func (m *Dump) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *Dump) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *Dump) GetTeamMembers() []*TeamMember {
	if m != nil {
		return m.TeamMembers
	}
	return nil
}

func (m *Dump) GetTournaments() []*Tournament {
	if m != nil {
		return m.Tournaments
	}
	return nil
}

func (m *Dump) GetTournamentMembers() []*TournamentMember {
	if m != nil {
		return m.TournamentMembers
	}
	return nil
}

func (m *Dump) GetTournamentTeams() []*TournamentTeam {
	if m != nil {
		return m.TournamentTeams
	}
	return nil
}

func (m *Dump) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Dump) GetWhoswhoAttempts() []*WhoswhoAttempt {
	if m != nil {
		return m.WhoswhoAttempts
	}
	return nil
}

type Status struct {
	EverythingIsOK bool `protobuf:"varint,1,opt,name=everything_is_ok,json=everythingIsOk,proto3" json:"everything_is_ok,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{25}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetEverythingIsOK() bool {
	if m != nil {
		return m.EverythingIsOK
	}
	return false
}

type Info struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Uptime  int32  `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Commit  string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	BuiltAt string `protobuf:"bytes,4,opt,name=built_at,json=builtAt,proto3" json:"built_at,omitempty"`
	BuiltBy string `protobuf:"bytes,5,opt,name=built_by,json=builtBy,proto3" json:"built_by,omitempty"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b38ccb06a827056, []int{26}
}
func (m *Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(m, src)
}
func (m *Info) XXX_Size() int {
	return m.Size()
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Info) GetUptime() int32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Info) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *Info) GetBuiltAt() string {
	if m != nil {
		return m.BuiltAt
	}
	return ""
}

func (m *Info) GetBuiltBy() string {
	if m != nil {
		return m.BuiltBy
	}
	return ""
}

func init() {
	proto.RegisterEnum("pathwar.entity.TeamMember_Role", TeamMember_Role_name, TeamMember_Role_value)
	proto.RegisterEnum("pathwar.entity.TournamentMember_Role", TournamentMember_Role_name, TournamentMember_Role_value)
	proto.RegisterEnum("pathwar.entity.LevelVersion_Driver", LevelVersion_Driver_name, LevelVersion_Driver_value)
	proto.RegisterEnum("pathwar.entity.Tournament_Status", Tournament_Status_name, Tournament_Status_value)
	proto.RegisterEnum("pathwar.entity.Tournament_Visibility", Tournament_Visibility_name, Tournament_Visibility_value)
	proto.RegisterEnum("pathwar.entity.LevelValidation_Status", LevelValidation_Status_name, LevelValidation_Status_value)
	proto.RegisterEnum("pathwar.entity.InventoryItem_Item", InventoryItem_Item_name, InventoryItem_Item_value)
	proto.RegisterEnum("pathwar.entity.LevelInstance_Status", LevelInstance_Status_name, LevelInstance_Status_value)
	proto.RegisterEnum("pathwar.entity.Hypervisor_Status", Hypervisor_Status_name, Hypervisor_Status_value)
	proto.RegisterEnum("pathwar.entity.Achievement_Type", Achievement_Type_name, Achievement_Type_value)
	proto.RegisterType((*Metadata)(nil), "pathwar.entity.Metadata")
	proto.RegisterType((*TeamMember)(nil), "pathwar.entity.TeamMember")
	proto.RegisterType((*TournamentMember)(nil), "pathwar.entity.TournamentMember")
	proto.RegisterType((*User)(nil), "pathwar.entity.User")
	proto.RegisterType((*UserList)(nil), "pathwar.entity.UserList")
	proto.RegisterType((*Team)(nil), "pathwar.entity.Team")
	proto.RegisterType((*TeamList)(nil), "pathwar.entity.TeamList")
	proto.RegisterType((*Level)(nil), "pathwar.entity.Level")
	proto.RegisterType((*LevelList)(nil), "pathwar.entity.LevelList")
	proto.RegisterType((*LevelVersion)(nil), "pathwar.entity.LevelVersion")
	proto.RegisterType((*Tournament)(nil), "pathwar.entity.Tournament")
	proto.RegisterType((*TournamentList)(nil), "pathwar.entity.TournamentList")
	proto.RegisterType((*TournamentTeam)(nil), "pathwar.entity.TournamentTeam")
	proto.RegisterType((*WhoswhoAttempt)(nil), "pathwar.entity.WhoswhoAttempt")
	proto.RegisterType((*LevelValidation)(nil), "pathwar.entity.LevelValidation")
	proto.RegisterType((*LevelSubscription)(nil), "pathwar.entity.LevelSubscription")
	proto.RegisterType((*InventoryItem)(nil), "pathwar.entity.InventoryItem")
	proto.RegisterType((*LevelFlavor)(nil), "pathwar.entity.LevelFlavor")
	proto.RegisterType((*LevelInstance)(nil), "pathwar.entity.LevelInstance")
	proto.RegisterType((*Hypervisor)(nil), "pathwar.entity.Hypervisor")
	proto.RegisterType((*Notification)(nil), "pathwar.entity.Notification")
	proto.RegisterType((*Coupon)(nil), "pathwar.entity.Coupon")
	proto.RegisterType((*CouponValidation)(nil), "pathwar.entity.CouponValidation")
	proto.RegisterType((*Achievement)(nil), "pathwar.entity.Achievement")
	proto.RegisterType((*Dump)(nil), "pathwar.entity.Dump")
	proto.RegisterType((*Status)(nil), "pathwar.entity.Status")
	proto.RegisterType((*Info)(nil), "pathwar.entity.Info")
}

func init() { proto.RegisterFile("entity/entity.proto", fileDescriptor_9b38ccb06a827056) }

var fileDescriptor_9b38ccb06a827056 = []byte{
	// 3516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x3b, 0x4d, 0x73, 0x1b, 0x47,
	0x76, 0x02, 0x09, 0x80, 0xc0, 0x03, 0x01, 0x0e, 0x9b, 0x94, 0x34, 0xa2, 0x6c, 0x0e, 0x3d, 0xb6,
	0x37, 0xf2, 0x87, 0x48, 0x8a, 0xb6, 0x5c, 0xbb, 0xb6, 0xb2, 0x09, 0x29, 0x5a, 0x36, 0x62, 0x79,
	0xa5, 0x1a, 0x92, 0x72, 0xd9, 0xb1, 0x0b, 0x35, 0xc4, 0x34, 0x80, 0x59, 0x0e, 0x66, 0xe0, 0x99,
	0x1e, 0xd0, 0xa8, 0xcd, 0x29, 0x87, 0x9c, 0x7d, 0x4b, 0xe5, 0x9a, 0x1f, 0x90, 0x73, 0x0e, 0x39,
	0xa5, 0x2a, 0x09, 0x25, 0x7b, 0x37, 0x4e, 0x55, 0x0e, 0xa9, 0x1c, 0x26, 0x29, 0xf8, 0x90, 0x5b,
	0x2a, 0x85, 0x53, 0xaa, 0x72, 0x49, 0x75, 0xf7, 0x7c, 0xe3, 0x93, 0x05, 0xa9, 0xe2, 0x5c, 0x24,
	0xf4, 0x9b, 0xf7, 0xd1, 0xdd, 0xef, 0xa3, 0xdf, 0x7b, 0xdd, 0x84, 0x35, 0x6c, 0x12, 0x9d, 0xf4,
	0x76, 0xf8, 0x7f, 0xdb, 0x1d, 0xdb, 0x22, 0x16, 0xaa, 0x74, 0x54, 0xd2, 0x3a, 0x57, 0xed, 0x6d,
	0x0e, 0xdd, 0xf8, 0xa0, 0xa9, 0x93, 0x96, 0x7b, 0xba, 0x5d, 0xb7, 0xda, 0x3b, 0x4d, 0xcb, 0x50,
	0xcd, 0xe6, 0x0e, 0x43, 0x3c, 0x75, 0x1b, 0x3b, 0x1d, 0xd2, 0xeb, 0x60, 0x67, 0x87, 0xe8, 0x6d,
	0xec, 0x10, 0xb5, 0xdd, 0x89, 0x7e, 0x71, 0x66, 0x1b, 0xb7, 0x13, 0xc4, 0x4d, 0x2b, 0x22, 0xa5,
	0x23, 0x36, 0x60, 0xbf, 0x38, 0xba, 0xfc, 0xb7, 0x19, 0x28, 0x7c, 0x8a, 0x89, 0xaa, 0xa9, 0x44,
	0x45, 0x6f, 0xc3, 0x82, 0xae, 0x89, 0x99, 0xad, 0xcc, 0xad, 0xe2, 0xc1, 0x4b, 0x7d, 0x4f, 0x5a,
	0xa8, 0x1e, 0x0e, 0x3c, 0x09, 0x35, 0x2d, 0xbb, 0xfd, 0xbe, 0xdc, 0xb1, 0xf5, 0xb6, 0x6a, 0xf7,
	0x6a, 0x67, 0xb8, 0x27, 0x2b, 0x0b, 0xba, 0x86, 0xee, 0x03, 0xd4, 0x6d, 0xac, 0x12, 0xac, 0xd5,
	0x54, 0x22, 0x2e, 0x6c, 0x65, 0x6e, 0x95, 0xf6, 0x36, 0xb6, 0x9b, 0x96, 0xd5, 0x34, 0xf0, 0x76,
	0x20, 0x75, 0xfb, 0x38, 0x98, 0xdf, 0x41, 0xe1, 0xc2, 0x93, 0x32, 0xdf, 0xfe, 0x9b, 0x94, 0x51,
	0x8a, 0x3e, 0xdd, 0x3e, 0xa1, 0x4c, 0xdc, 0x8e, 0x16, 0x30, 0x59, 0xbc, 0x0c, 0x13, 0x9f, 0x6e,
	0x9f, 0xc8, 0xdf, 0x2d, 0x02, 0x1c, 0x63, 0xb5, 0xfd, 0x29, 0x6e, 0x9f, 0x62, 0x1b, 0xfd, 0x12,
	0x0a, 0x6d, 0x7f, 0x49, 0x6c, 0x31, 0xa5, 0x3d, 0x71, 0x3b, 0xb9, 0xc5, 0xdb, 0xc1, 0x92, 0x19,
	0xbf, 0x2b, 0x3f, 0x78, 0x52, 0x46, 0x09, 0x69, 0xd0, 0x3b, 0x90, 0xb5, 0x2d, 0x03, 0x8b, 0xda,
	0x56, 0xe6, 0x56, 0x65, 0x4f, 0x4a, 0xd3, 0x46, 0x92, 0xb6, 0x15, 0xcb, 0xc0, 0x0a, 0x43, 0x46,
	0x1f, 0x41, 0xd6, 0x75, 0xb0, 0x2d, 0x5e, 0x70, 0x89, 0xeb, 0x69, 0xaa, 0x13, 0x07, 0xdb, 0x07,
	0x2f, 0x0d, 0x3c, 0x49, 0xe4, 0xdb, 0xd9, 0xb0, 0x6c, 0xac, 0x37, 0xcd, 0x33, 0xdc, 0x7b, 0x9f,
	0x7e, 0xaa, 0x1e, 0xca, 0x0a, 0x63, 0x80, 0xee, 0xc3, 0x12, 0xfd, 0xbf, 0xa6, 0x6b, 0xe2, 0x53,
	0xae, 0x8a, 0x37, 0xfa, 0x9e, 0x94, 0xe7, 0x48, 0x03, 0x4f, 0xba, 0xe9, 0x7c, 0x6d, 0xbc, 0x2f,
	0x9b, 0x16, 0xd9, 0x32, 0x5d, 0xc3, 0x90, 0xb7, 0x38, 0x3b, 0xdd, 0xd4, 0xf0, 0x37, 0xb2, 0x92,
	0xa7, 0xa4, 0x55, 0x8d, 0xce, 0x86, 0x60, 0xb5, 0x2d, 0x3e, 0x1b, 0x33, 0x1b, 0xba, 0x86, 0x31,
	0xb3, 0xa1, 0x9f, 0xd8, 0x6c, 0x28, 0x03, 0x3a, 0x1b, 0xfa, 0x3f, 0x9d, 0xcd, 0x77, 0xb1, 0xd9,
	0x70, 0xa4, 0xa9, 0xb3, 0xa1, 0xa4, 0x55, 0x4d, 0x7e, 0x1b, 0xb2, 0x74, 0xa7, 0x50, 0x19, 0x8a,
	0x27, 0xa6, 0x86, 0x1b, 0xba, 0x89, 0x35, 0xe1, 0x0a, 0x2a, 0x42, 0xee, 0xd1, 0xb9, 0x89, 0x6d,
	0x21, 0x83, 0x00, 0xf2, 0x7c, 0x4b, 0x85, 0x05, 0xf9, 0x3f, 0x0a, 0x20, 0x1c, 0x5b, 0xae, 0x6d,
	0xaa, 0x6d, 0x6c, 0x92, 0xe7, 0xa4, 0xd3, 0x5f, 0x24, 0x74, 0xfa, 0xfa, 0xd0, 0x7e, 0xa4, 0xe4,
	0xfd, 0x74, 0x35, 0xdb, 0x81, 0x15, 0x12, 0x4e, 0xb6, 0x16, 0x57, 0xf2, 0xe6, 0xf8, 0x45, 0x31,
	0x75, 0xff, 0x6c, 0xe0, 0x49, 0xf2, 0xb0, 0xba, 0x13, 0x48, 0x74, 0xb2, 0x15, 0x92, 0x00, 0xa1,
	0x53, 0x40, 0x29, 0x89, 0x31, 0x6b, 0x78, 0xa7, 0xef, 0x49, 0x42, 0x9a, 0xc7, 0xb4, 0xb5, 0x08,
	0x49, 0x09, 0x55, 0x0d, 0x7d, 0x02, 0x4b, 0x75, 0xcb, 0xed, 0x58, 0xa6, 0x23, 0x7e, 0x9f, 0xd9,
	0x5a, 0xbc, 0x55, 0xda, 0xbb, 0x96, 0x5e, 0xcd, 0x7d, 0xf6, 0xfd, 0x40, 0x1c, 0x78, 0xd2, 0x3a,
	0xe7, 0xf6, 0x58, 0xf9, 0xf0, 0xe1, 0xa3, 0xfd, 0xc3, 0xf7, 0x1b, 0xaa, 0xe1, 0x60, 0x59, 0x09,
	0x38, 0xa0, 0x2f, 0x60, 0x59, 0xad, 0xb7, 0x74, 0xdc, 0xc5, 0x54, 0x82, 0x23, 0xfe, 0x96, 0x73,
	0xbc, 0x99, 0xe6, 0xb8, 0x1f, 0x21, 0x4d, 0x60, 0x9b, 0xe0, 0x85, 0xda, 0x70, 0xd5, 0xa1, 0xdb,
	0x70, 0xde, 0xb2, 0x9c, 0xf3, 0x96, 0x55, 0x53, 0x09, 0xc1, 0xed, 0x0e, 0x71, 0xc4, 0xdf, 0x71,
	0x21, 0x43, 0x4a, 0xf8, 0x8c, 0x23, 0xee, 0x73, 0xbc, 0x09, 0x72, 0xd6, 0x28, 0xdf, 0x24, 0xb6,
	0x83, 0x5c, 0xb8, 0x61, 0xe3, 0x3a, 0xd6, 0xbb, 0x58, 0x1b, 0x16, 0xf9, 0x8f, 0xf3, 0x8a, 0xbc,
	0x1e, 0xf0, 0x4e, 0x8b, 0xfd, 0x15, 0xe4, 0x74, 0x82, 0xdb, 0x8e, 0xf8, 0x03, 0x17, 0xf1, 0x72,
	0x5a, 0x44, 0xd5, 0xec, 0x62, 0x93, 0x58, 0x76, 0xaf, 0x4a, 0x70, 0x7b, 0x82, 0x04, 0xce, 0x06,
	0x35, 0x61, 0xd5, 0xc0, 0x5d, 0x6c, 0xd4, 0xba, 0xaa, 0xa1, 0x6b, 0x2a, 0xd1, 0xa9, 0xa2, 0xff,
	0x89, 0xf3, 0x1e, 0x8a, 0xaf, 0x0f, 0x29, 0xe6, 0x93, 0x10, 0x71, 0x02, 0x77, 0xc1, 0x48, 0xa2,
	0x3a, 0x97, 0x8c, 0x34, 0xff, 0x9d, 0x87, 0x2c, 0xf5, 0xbe, 0xb9, 0xa3, 0xcb, 0x06, 0x14, 0xa8,
	0x7b, 0x52, 0x93, 0x66, 0x11, 0xa6, 0xa8, 0x84, 0x63, 0xb4, 0x0e, 0x39, 0xdc, 0x56, 0x75, 0x43,
	0xc4, 0xec, 0x03, 0x1f, 0xa0, 0x3d, 0x58, 0x6e, 0xda, 0x6a, 0x57, 0x25, 0xaa, 0x5d, 0x73, 0x6d,
	0x43, 0x6c, 0x30, 0x6f, 0x5a, 0xe9, 0x7b, 0x52, 0xe9, 0x23, 0x1f, 0x7e, 0xa2, 0x3c, 0x54, 0x4a,
	0x01, 0xd2, 0x89, 0x6d, 0xa0, 0x1d, 0x28, 0x9d, 0xe3, 0x53, 0x47, 0x27, 0x98, 0x91, 0x34, 0x19,
	0x49, 0xa5, 0xef, 0x49, 0xf0, 0x19, 0x07, 0x53, 0x0a, 0xf0, 0x51, 0x28, 0xc1, 0x35, 0xc8, 0x1b,
	0x56, 0x5d, 0x35, 0xb0, 0xd8, 0x62, 0xb2, 0xfd, 0x11, 0xba, 0x07, 0x65, 0x4b, 0x75, 0x49, 0xab,
	0xe6, 0xb8, 0xa7, 0xbf, 0xc6, 0x75, 0x22, 0xea, 0x8c, 0xd5, 0xf5, 0x81, 0x27, 0xad, 0xf1, 0x8d,
	0x76, 0x4d, 0xfd, 0x6b, 0x17, 0xd7, 0x7c, 0x7f, 0x5d, 0x66, 0xd8, 0x47, 0x1c, 0x19, 0xd9, 0x70,
	0x2d, 0x16, 0x0f, 0xda, 0x6c, 0x33, 0x9d, 0x96, 0xde, 0x71, 0x68, 0x84, 0xa4, 0x1a, 0xdd, 0x9a,
	0x16, 0x5d, 0x27, 0xa8, 0xf4, 0x2a, 0x49, 0xe1, 0x32, 0xce, 0xe8, 0x2b, 0x28, 0x9b, 0x16, 0xd1,
	0x1b, 0x7a, 0xdd, 0x37, 0x9e, 0xa7, 0x5c, 0xd4, 0x4b, 0x69, 0x51, 0xbf, 0x8a, 0x61, 0x4d, 0x10,
	0x93, 0xe4, 0x86, 0x3e, 0x83, 0x52, 0x7c, 0x1d, 0xcf, 0x38, 0xf3, 0x8d, 0xf1, 0x27, 0xff, 0x04,
	0xd6, 0x71, 0x4e, 0xe8, 0x2f, 0x32, 0x20, 0xaa, 0x75, 0xa2, 0x77, 0x71, 0x6d, 0x68, 0xcf, 0x78,
	0x08, 0x9d, 0x65, 0xbb, 0xee, 0x0d, 0x3c, 0xe9, 0xe7, 0x43, 0x91, 0x7b, 0x9f, 0xf1, 0x4d, 0x23,
	0x57, 0x0f, 0x3f, 0x48, 0x4d, 0xe8, 0x9a, 0x3a, 0x12, 0x11, 0xfd, 0x06, 0x6e, 0x8e, 0x9b, 0x1a,
	0x0d, 0xf0, 0xdf, 0xf3, 0x00, 0xff, 0x41, 0xdf, 0x93, 0xc4, 0x71, 0xa2, 0xa6, 0x05, 0x7a, 0x71,
	0xb4, 0xe8, 0xaa, 0x26, 0xbf, 0x07, 0x05, 0xea, 0x79, 0x0f, 0x75, 0x87, 0xa0, 0x37, 0x83, 0x68,
	0xc3, 0xb7, 0x7d, 0xe4, 0x01, 0xeb, 0x47, 0x12, 0xf9, 0x9f, 0x17, 0x21, 0xcb, 0x4e, 0xa5, 0x79,
	0x5d, 0x16, 0x41, 0x36, 0xe6, 0xae, 0xec, 0xf7, 0x90, 0x53, 0xe2, 0x19, 0x9c, 0x32, 0xf2, 0xb1,
	0x46, 0xc2, 0xc7, 0x34, 0x10, 0x52, 0xa7, 0x66, 0xe8, 0x1f, 0xd3, 0x0e, 0xea, 0xf1, 0xb6, 0xb5,
	0x92, 0x3c, 0x38, 0xa7, 0x9c, 0x0f, 0x4f, 0x5f, 0xd8, 0xf9, 0xf0, 0x08, 0x96, 0x7c, 0x2b, 0x9f,
	0xcf, 0x57, 0x02, 0x2e, 0xd4, 0x1c, 0x28, 0xc1, 0x4c, 0xe6, 0x40, 0x11, 0x03, 0x73, 0xf8, 0xd7,
	0x05, 0xc8, 0xb1, 0xf3, 0xe2, 0x85, 0xd8, 0xc3, 0x16, 0x94, 0x34, 0xec, 0xd4, 0x6d, 0xbd, 0x43,
	0xc3, 0x84, 0x1f, 0xc0, 0xe3, 0x20, 0xaa, 0x7d, 0x1a, 0x1a, 0x2d, 0x3b, 0xd0, 0x3e, 0x1f, 0xc5,
	0xac, 0x42, 0x4f, 0x58, 0xc5, 0x0d, 0x28, 0xe8, 0x4e, 0x4d, 0xb3, 0xd5, 0x06, 0x11, 0x7f, 0xbd,
	0x95, 0xb9, 0x55, 0x50, 0x96, 0x74, 0xe7, 0x90, 0x0e, 0x91, 0x04, 0xa5, 0x8e, 0x8d, 0xbb, 0x3a,
	0x3e, 0x67, 0xb6, 0x77, 0xc6, 0xe8, 0xc0, 0x07, 0x51, 0x4b, 0xdb, 0x80, 0x42, 0xcb, 0x6a, 0xe3,
	0x8e, 0xda, 0xc4, 0xa2, 0xc1, 0x0f, 0x99, 0x60, 0x8c, 0x8e, 0xa0, 0xd0, 0xc5, 0xb6, 0xc3, 0x42,
	0xe3, 0xc5, 0x98, 0xd0, 0xc8, 0xcf, 0x55, 0x8e, 0x35, 0x41, 0x27, 0x21, 0x23, 0xf9, 0xe7, 0x50,
	0x64, 0x34, 0x4c, 0x2b, 0x6f, 0x25, 0xb5, 0x72, 0x75, 0x24, 0xf7, 0x40, 0x2d, 0x7f, 0x9f, 0x85,
	0xe5, 0xb8, 0xb8, 0xb9, 0xb5, 0x23, 0xc2, 0x92, 0x3f, 0x2d, 0x5f, 0x41, 0xc1, 0x10, 0xbd, 0x04,
	0xc5, 0x7a, 0x4b, 0x35, 0x9b, 0xd8, 0xb0, 0x9a, 0xbe, 0x86, 0x22, 0x40, 0x62, 0xbf, 0x1b, 0xc9,
	0xfd, 0xbe, 0x09, 0x45, 0xdd, 0xa9, 0x19, 0x2a, 0xc1, 0x0e, 0x61, 0x67, 0x69, 0x41, 0x29, 0xe8,
	0xce, 0x43, 0x36, 0x46, 0x6f, 0x03, 0x38, 0x96, 0x6b, 0xd7, 0xf9, 0x49, 0xcb, 0x4e, 0xcf, 0x83,
	0x72, 0xdf, 0x93, 0x8a, 0x47, 0x0c, 0x4a, 0xa3, 0x40, 0x91, 0x23, 0x50, 0xcd, 0x7c, 0x00, 0x79,
	0xcd, 0xd6, 0xbb, 0xd8, 0x66, 0xda, 0xae, 0xec, 0xbd, 0x3a, 0x69, 0xeb, 0xb7, 0x0f, 0x19, 0xaa,
	0xe2, 0x93, 0xa0, 0x4f, 0x20, 0xc7, 0xd2, 0x98, 0xa0, 0xbe, 0x18, 0xbd, 0xb3, 0x07, 0x2f, 0x0f,
	0x3c, 0xe9, 0xc6, 0xd0, 0x19, 0xc0, 0xbe, 0xd1, 0xa4, 0x9d, 0xf3, 0x40, 0x0f, 0xa0, 0xc0, 0x13,
	0xad, 0xa8, 0xc6, 0x78, 0xb3, 0xef, 0x49, 0x4b, 0x3e, 0xde, 0xb4, 0x78, 0xbd, 0xc4, 0x88, 0xab,
	0x1a, 0x7a, 0x0c, 0x4b, 0x0d, 0x43, 0xed, 0x5a, 0x91, 0x83, 0xdf, 0x1c, 0x39, 0xad, 0x07, 0x0c,
	0x69, 0x92, 0x87, 0xfb, 0x6c, 0xe4, 0x77, 0x21, 0xcf, 0x17, 0x8e, 0x4a, 0xb0, 0x74, 0x62, 0x9e,
	0x99, 0xd6, 0xb9, 0x29, 0x5c, 0xa1, 0xe9, 0xd8, 0xa1, 0x55, 0x3f, 0x63, 0xa9, 0xd9, 0x2a, 0x94,
	0xf9, 0xef, 0xfb, 0x56, 0xbb, 0x63, 0x39, 0x58, 0x58, 0x90, 0xff, 0x32, 0x0b, 0x10, 0x45, 0xc7,
	0x17, 0xe2, 0xe4, 0xbf, 0x80, 0xbc, 0x43, 0x54, 0xe2, 0x3a, 0xcc, 0x7a, 0x2a, 0x7b, 0xaf, 0x8c,
	0x8f, 0xce, 0xdb, 0x47, 0x0c, 0x51, 0xf1, 0x09, 0xd0, 0x87, 0x00, 0x5d, 0xdd, 0xd1, 0x4f, 0x75,
	0x43, 0x27, 0x3d, 0x66, 0x5f, 0x13, 0x4b, 0xcb, 0xed, 0x27, 0x21, 0xb2, 0x12, 0x23, 0x44, 0x2f,
	0x03, 0x50, 0x23, 0xc5, 0x0d, 0xd5, 0x35, 0x02, 0x53, 0x2c, 0xea, 0xce, 0x21, 0x07, 0xa0, 0x47,
	0x90, 0x7b, 0x4e, 0xc7, 0x07, 0xe7, 0x13, 0x2f, 0xb6, 0x9e, 0xce, 0x5b, 0x6c, 0xc9, 0x77, 0x21,
	0xcf, 0x77, 0x85, 0xaa, 0xcf, 0xd7, 0x2b, 0x07, 0x08, 0x57, 0xa8, 0xaa, 0x8f, 0x88, 0x6a, 0x13,
	0xac, 0x09, 0x19, 0x3e, 0xb0, 0x3a, 0x1d, 0xac, 0x09, 0x0b, 0xf2, 0x1f, 0x01, 0x44, 0xbb, 0x81,
	0xae, 0xc2, 0xaa, 0x4f, 0x1a, 0x01, 0x39, 0xf9, 0x63, 0x5b, 0xef, 0xaa, 0x04, 0x0b, 0x19, 0xb4,
	0x0c, 0x85, 0x13, 0xd3, 0xd0, 0x1d, 0xca, 0x6c, 0x81, 0xda, 0xcd, 0x63, 0xf7, 0xd4, 0xd0, 0xeb,
	0xc2, 0xa2, 0x7c, 0x00, 0x95, 0x68, 0x0b, 0x58, 0xb0, 0xda, 0x4d, 0x06, 0xab, 0x8d, 0xf1, 0x3b,
	0x16, 0x44, 0xac, 0xff, 0xc9, 0xc6, 0x99, 0x3c, 0x97, 0x0c, 0x23, 0xa9, 0x56, 0x2d, 0xad, 0xd6,
	0x1a, 0x40, 0x74, 0x9a, 0x07, 0xce, 0x3f, 0x61, 0xa6, 0x07, 0xf2, 0xc0, 0x93, 0x36, 0x27, 0xd4,
	0xef, 0x34, 0x0c, 0xc4, 0x58, 0xa2, 0x13, 0x28, 0xc7, 0x32, 0x90, 0x28, 0x20, 0xec, 0xf4, 0x3d,
	0x69, 0x39, 0x4e, 0x36, 0x2d, 0x2a, 0x2c, 0x47, 0x6c, 0x7e, 0x6a, 0xad, 0x25, 0xd4, 0x86, 0x35,
	0x1e, 0xf0, 0x1c, 0xf7, 0x34, 0x3c, 0x96, 0xc3, 0x92, 0xff, 0x95, 0x91, 0x41, 0xeb, 0x28, 0x86,
	0x3a, 0xc1, 0xc4, 0x91, 0x91, 0x46, 0x76, 0xd0, 0x49, 0x94, 0xf8, 0xfc, 0x6e, 0xfe, 0x62, 0x27,
	0x4c, 0x7f, 0xfe, 0x21, 0x07, 0x95, 0x64, 0x8e, 0xf5, 0x3c, 0x4e, 0x4c, 0xc7, 0xad, 0xd7, 0xb1,
	0xe3, 0xf8, 0xa6, 0x17, 0x0c, 0x51, 0x2b, 0xcc, 0x59, 0x2e, 0x66, 0x2d, 0x40, 0x6e, 0x0f, 0x3c,
	0xe9, 0x8d, 0x91, 0xea, 0x88, 0xd7, 0x23, 0x8c, 0x29, 0xd5, 0x6f, 0x90, 0x05, 0x55, 0xa1, 0xc8,
	0x7f, 0xc5, 0xac, 0xef, 0xad, 0xbe, 0x27, 0x15, 0x02, 0xd4, 0x69, 0x5a, 0x2e, 0x70, 0xf2, 0xaa,
	0x86, 0x7e, 0x03, 0x65, 0xa2, 0xda, 0x4d, 0x1c, 0x16, 0x4f, 0xcf, 0x66, 0x9d, 0xfb, 0x3b, 0x03,
	0x4f, 0xda, 0x99, 0x36, 0xf7, 0x63, 0xc6, 0x3b, 0x28, 0x6b, 0xa8, 0xc9, 0xc7, 0x00, 0xe8, 0x4b,
	0x10, 0x12, 0xc2, 0x63, 0x26, 0x7b, 0xa7, 0xef, 0x49, 0x95, 0x24, 0xf5, 0xb4, 0x45, 0x55, 0xe2,
	0xbc, 0xab, 0x1a, 0x72, 0xa0, 0xe4, 0x73, 0x67, 0x7e, 0xf5, 0xfd, 0x6c, 0xdd, 0xbc, 0x3b, 0x03,
	0x4f, 0xba, 0x3d, 0xdb, 0xb2, 0x02, 0xb7, 0x03, 0x12, 0x0e, 0xd1, 0x13, 0xa8, 0xc4, 0x84, 0xd2,
	0x05, 0xfd, 0x36, 0x1e, 0x1d, 0x62, 0x74, 0xd3, 0xa3, 0x43, 0x84, 0xac, 0xc9, 0x7f, 0x9a, 0x87,
	0x95, 0x54, 0x03, 0x67, 0x6e, 0x53, 0xfe, 0x65, 0x78, 0x42, 0xf3, 0xee, 0xed, 0xcf, 0xa6, 0x74,
	0x8c, 0xd2, 0xc7, 0xf4, 0xeb, 0x50, 0xf1, 0xcd, 0xb0, 0x6e, 0xb5, 0x59, 0xb4, 0xe5, 0x79, 0x62,
	0x99, 0x43, 0xef, 0x73, 0x20, 0x7a, 0x0b, 0x56, 0xeb, 0x96, 0x6d, 0xe3, 0x3a, 0x89, 0x61, 0xf2,
	0xb4, 0x5e, 0x08, 0x3f, 0x04, 0xc8, 0x7f, 0x02, 0x68, 0x38, 0xee, 0x04, 0x0e, 0x35, 0x43, 0xd8,
	0x79, 0x63, 0xe0, 0x49, 0xaf, 0x8f, 0x4e, 0xe7, 0xe2, 0x78, 0x54, 0x6d, 0xab, 0x43, 0x71, 0x08,
	0x9d, 0xc1, 0xd5, 0x61, 0xe9, 0x31, 0x27, 0x7b, 0xaf, 0xef, 0x49, 0x6b, 0x23, 0x98, 0x4d, 0xd3,
	0xe5, 0xda, 0x90, 0xa8, 0xaa, 0x86, 0xbe, 0x81, 0xd5, 0xe1, 0xde, 0xc5, 0xcc, 0xee, 0x77, 0x6b,
	0xe0, 0x49, 0xaf, 0x4d, 0x38, 0xb5, 0x22, 0x9f, 0x13, 0xd2, 0xad, 0x1f, 0xd4, 0x82, 0xf5, 0x91,
	0xad, 0x09, 0xdf, 0xf7, 0xee, 0xf6, 0x3d, 0x09, 0x5d, 0xbe, 0x29, 0x81, 0xc8, 0x70, 0x3b, 0xe2,
	0x61, 0x98, 0xc5, 0x24, 0xb2, 0xd3, 0x02, 0x64, 0x8f, 0xb0, 0x49, 0x78, 0xf6, 0xb1, 0x5f, 0xaf,
	0xe3, 0x0e, 0xcf, 0x3e, 0x4a, 0xb0, 0xa4, 0xe0, 0x86, 0xeb, 0x60, 0x4d, 0x58, 0x44, 0x02, 0x2c,
	0xef, 0xbb, 0xc4, 0x0a, 0x3f, 0x67, 0xe5, 0x8b, 0x2c, 0xac, 0x0e, 0xed, 0xfe, 0xdc, 0x6e, 0x30,
	0xa2, 0xf3, 0x7f, 0xf1, 0x7f, 0xd1, 0xf9, 0x7f, 0xfa, 0x5c, 0x3b, 0xff, 0x1a, 0x2c, 0x73, 0x53,
	0xe6, 0x85, 0x42, 0x60, 0x58, 0x13, 0xcb, 0x8d, 0x57, 0x07, 0x9e, 0x24, 0x8d, 0x76, 0x1e, 0x8e,
	0x41, 0x17, 0x53, 0x32, 0xa2, 0x31, 0xfa, 0x1c, 0x56, 0xe2, 0x52, 0x62, 0x46, 0xb4, 0xdb, 0xf7,
	0xa4, 0x72, 0x82, 0x74, 0xda, 0x1a, 0xca, 0x31, 0xc6, 0x55, 0x0d, 0x7d, 0x09, 0xa5, 0x78, 0x57,
	0xfb, 0xfb, 0xb9, 0xbb, 0xda, 0x71, 0x76, 0xf2, 0xdf, 0x2c, 0x40, 0x39, 0xd1, 0x6c, 0x9f, 0xdb,
	0x8c, 0xde, 0x83, 0x2c, 0x4d, 0x79, 0xfd, 0x58, 0x2a, 0x4f, 0xec, 0xec, 0x6f, 0xd3, 0x7f, 0x14,
	0x86, 0x8f, 0x9e, 0x40, 0xce, 0x3a, 0x37, 0xf1, 0x25, 0xb2, 0x86, 0xd1, 0x25, 0x2b, 0x6b, 0xc4,
	0xb3, 0x92, 0x95, 0xb1, 0xa3, 0x25, 0x2b, 0xfb, 0x91, 0x2e, 0x59, 0x7d, 0xbc, 0xa9, 0x25, 0x2b,
	0x23, 0xae, 0x6a, 0xf2, 0x1a, 0x64, 0xd9, 0xfe, 0xc4, 0x1d, 0x58, 0x7e, 0xb6, 0x08, 0xa5, 0x98,
	0x72, 0xe7, 0xde, 0x3c, 0x15, 0xca, 0xfe, 0x45, 0x86, 0xdf, 0x8d, 0x98, 0x5c, 0xb4, 0xbf, 0x36,
	0xf0, 0xa4, 0xad, 0xd1, 0x86, 0xea, 0x77, 0x03, 0x58, 0xb2, 0x61, 0xc4, 0x5b, 0x25, 0x5f, 0x82,
	0x90, 0x10, 0x11, 0xdb, 0x17, 0x96, 0x6c, 0x24, 0xa9, 0xa7, 0x26, 0x1b, 0x71, 0xde, 0x55, 0x0d,
	0x3d, 0x81, 0xa2, 0x6e, 0x3a, 0x44, 0x35, 0xeb, 0x38, 0x2c, 0xed, 0x5f, 0x1e, 0x39, 0xf9, 0xaa,
	0x8f, 0x36, 0xc1, 0x52, 0x23, 0x56, 0xe8, 0x14, 0xca, 0xc9, 0x0c, 0xfc, 0xbb, 0xe7, 0x90, 0x81,
	0x27, 0x59, 0xca, 0x7f, 0x9e, 0x85, 0x72, 0x62, 0x6a, 0x73, 0xab, 0xf3, 0x5e, 0x2a, 0xb3, 0x78,
	0x6d, 0xe2, 0x4e, 0xa4, 0xf3, 0x8a, 0x1a, 0x40, 0xab, 0xd7, 0xc1, 0x76, 0x57, 0x77, 0xa2, 0x64,
	0x7a, 0xa8, 0x82, 0xfb, 0x38, 0x44, 0x19, 0x53, 0xc1, 0x45, 0x08, 0x2c, 0x49, 0x8b, 0x58, 0xd2,
	0x0a, 0x2e, 0x1a, 0xa5, 0x2b, 0xb8, 0x38, 0xd9, 0xd4, 0x1c, 0x2d, 0x62, 0x53, 0xd5, 0xd0, 0x31,
	0xe4, 0x2f, 0x11, 0x6c, 0x37, 0x07, 0x9e, 0xb4, 0x31, 0x34, 0xe9, 0x28, 0xce, 0xfa, 0xbc, 0x68,
	0xb2, 0x3f, 0x14, 0x5c, 0x59, 0xb2, 0x3f, 0x6b, 0x5c, 0x2d, 0x34, 0xfc, 0x90, 0x2a, 0xef, 0x8c,
	0x3e, 0x8d, 0x01, 0xf2, 0xfc, 0x22, 0x82, 0x9f, 0xc7, 0x55, 0x93, 0xdf, 0x2e, 0x08, 0x0b, 0xf2,
	0xd3, 0x05, 0x80, 0x68, 0x3f, 0x5e, 0x48, 0x9b, 0x48, 0x84, 0x25, 0x55, 0xd3, 0x6c, 0x5a, 0x4f,
	0xf1, 0xec, 0x31, 0x18, 0xc6, 0x1a, 0x48, 0x8d, 0xd1, 0x0d, 0xa4, 0x68, 0x66, 0x69, 0x0b, 0x52,
	0x83, 0x63, 0x29, 0xf2, 0xc9, 0x8b, 0x39, 0x7d, 0x92, 0x3b, 0x7c, 0x80, 0xe8, 0x5c, 0x7e, 0x2f,
	0xff, 0x7a, 0x01, 0x96, 0xe3, 0xb7, 0x68, 0x73, 0xef, 0xe6, 0x75, 0x58, 0xd2, 0x9d, 0x9a, 0x8d,
	0x55, 0xcd, 0xaf, 0x44, 0xf3, 0xba, 0xa3, 0x60, 0x55, 0x43, 0x37, 0xa1, 0x58, 0x37, 0xf4, 0xfa,
	0x59, 0x74, 0xd7, 0xa2, 0x14, 0x18, 0xe0, 0xc4, 0x36, 0x90, 0x00, 0x8b, 0x6d, 0xa7, 0xe9, 0xe7,
	0xdf, 0xf4, 0x27, 0xd5, 0x8a, 0x6a, 0x37, 0x1d, 0x7e, 0xef, 0xa9, 0xb0, 0xdf, 0x3f, 0xad, 0xb7,
	0x19, 0xf2, 0xdf, 0x2d, 0x42, 0x9e, 0x77, 0xce, 0xe6, 0xde, 0xb4, 0xb7, 0x20, 0xdb, 0x52, 0x9d,
	0x16, 0x37, 0xc1, 0xf1, 0x37, 0xb3, 0x0c, 0x09, 0xad, 0x43, 0xae, 0xab, 0x1a, 0x2e, 0x66, 0x9b,
	0x98, 0x53, 0xf8, 0x00, 0xed, 0xc2, 0x7a, 0x5b, 0xfd, 0x26, 0x76, 0xe5, 0x5e, 0xab, 0x5b, 0xae,
	0x5f, 0xd2, 0xe4, 0x14, 0xd4, 0x56, 0xbf, 0x89, 0xd2, 0x91, 0xfb, 0xf4, 0xcb, 0x8b, 0x6f, 0x49,
	0x3d, 0x18, 0xd3, 0x92, 0xda, 0x1a, 0xd1, 0x92, 0x5a, 0x9e, 0xd0, 0x83, 0xfa, 0x2a, 0x99, 0x73,
	0x3d, 0x1b, 0xd3, 0x8a, 0xe1, 0xba, 0xb8, 0x7c, 0xd2, 0xf5, 0x57, 0x8b, 0x20, 0xa4, 0x69, 0x9f,
	0x47, 0x43, 0x26, 0x28, 0x2a, 0xfd, 0x2b, 0x0c, 0x7f, 0x88, 0x3e, 0xbf, 0x7c, 0x43, 0x66, 0x74,
	0x50, 0x7e, 0xa1, 0x1d, 0x98, 0x47, 0x90, 0xe7, 0x3d, 0xdf, 0xe0, 0xd4, 0x18, 0xd7, 0x34, 0x1e,
	0x3d, 0x37, 0xfe, 0x91, 0xcd, 0x8d, 0xb3, 0xa1, 0x73, 0xe3, 0xbf, 0xd2, 0x07, 0x46, 0x80, 0x3a,
	0x75, 0x6e, 0x9c, 0xbc, 0xaa, 0xc9, 0xff, 0x59, 0x84, 0x52, 0xec, 0x35, 0xcf, 0xdc, 0xba, 0x7a,
	0x17, 0xb2, 0xa4, 0xd7, 0x09, 0x5e, 0x8b, 0x6d, 0x4d, 0x78, 0x38, 0xb4, 0x7d, 0xdc, 0xeb, 0x60,
	0x85, 0x61, 0xfb, 0x37, 0x4a, 0x4d, 0xc3, 0x3a, 0x55, 0x79, 0x3c, 0x63, 0x37, 0x4a, 0x1f, 0xb1,
	0x71, 0x5c, 0xfd, 0x8d, 0xa4, 0xfa, 0x37, 0xa0, 0xa0, 0xda, 0x4d, 0x97, 0x7d, 0xe2, 0xb1, 0x2d,
	0x1c, 0xff, 0x3f, 0x31, 0x0d, 0x12, 0xa6, 0xac, 0xa1, 0xbb, 0x04, 0x46, 0x32, 0xb5, 0x0e, 0xfa,
	0xbd, 0x81, 0x27, 0xbd, 0x3a, 0x26, 0x45, 0x0e, 0xb1, 0xe8, 0xbc, 0x57, 0x52, 0x8f, 0x7d, 0x50,
	0x13, 0xd6, 0xd3, 0x52, 0x49, 0xcc, 0x94, 0xde, 0xed, 0x7b, 0xd2, 0xea, 0x10, 0x9f, 0xa9, 0xcd,
	0x81, 0x94, 0x14, 0x52, 0xd5, 0xe4, 0x6f, 0x73, 0x90, 0xa5, 0x6a, 0x4e, 0xbf, 0x2a, 0x2a, 0x43,
	0xf1, 0xc0, 0xed, 0xdd, 0x61, 0x32, 0x84, 0x0c, 0xaa, 0x00, 0x1c, 0xb8, 0xbd, 0xbb, 0x6c, 0xe8,
	0x08, 0x0b, 0x68, 0x05, 0x4a, 0xf4, 0xf3, 0xae, 0x0f, 0x58, 0xf4, 0x01, 0x7b, 0x01, 0x20, 0xeb,
	0x03, 0xee, 0x06, 0x80, 0x1c, 0x42, 0x50, 0xf1, 0x45, 0x63, 0x9f, 0x2d, 0xa0, 0x35, 0x58, 0x09,
	0x60, 0x01, 0xef, 0x12, 0x5a, 0x07, 0x21, 0x44, 0x0c, 0xc8, 0x97, 0xe3, 0xd0, 0x50, 0x4a, 0x39,
	0x0e, 0x0d, 0x45, 0x55, 0xe2, 0x6c, 0xef, 0x70, 0x87, 0x13, 0xd6, 0x13, 0xa8, 0x1c, 0xe8, 0x08,
	0x57, 0xd1, 0x55, 0x58, 0x8d, 0x84, 0x05, 0xe0, 0x6b, 0x71, 0xf0, 0x5e, 0x08, 0xbe, 0x1e, 0x07,
	0xdf, 0x0d, 0xc1, 0x22, 0xba, 0x06, 0x28, 0x62, 0x12, 0xc2, 0x6f, 0xf8, 0xdd, 0x93, 0x96, 0x65,
	0xfb, 0x0b, 0xde, 0x44, 0xab, 0x50, 0xe6, 0x90, 0x3d, 0x7f, 0xb2, 0x52, 0x04, 0x0a, 0x76, 0x60,
	0x8b, 0x6e, 0x95, 0x4f, 0x17, 0xac, 0xe9, 0x15, 0x2a, 0xe3, 0x43, 0xd5, 0x36, 0x7a, 0xfb, 0x9a,
	0xd5, 0x21, 0xd8, 0x3e, 0xb6, 0x3a, 0x77, 0x76, 0x77, 0x85, 0x5b, 0xe8, 0x3a, 0xac, 0x0d, 0xc3,
	0x77, 0x85, 0x37, 0x68, 0xe6, 0xf3, 0xc8, 0xd0, 0xee, 0x7c, 0x8e, 0x55, 0x5b, 0xd8, 0xa3, 0xab,
	0x3f, 0xc2, 0xa6, 0x76, 0xe7, 0xb1, 0x6b, 0x18, 0x0a, 0xfe, 0xda, 0xc5, 0x0e, 0x11, 0xbe, 0xa0,
	0xeb, 0xa1, 0xd0, 0xbd, 0x18, 0xd4, 0x11, 0xfe, 0x38, 0x00, 0xdf, 0x4d, 0x80, 0xbf, 0xa4, 0x53,
	0x60, 0x3c, 0x76, 0x29, 0xdc, 0x0e, 0xe0, 0x5f, 0xa1, 0x22, 0xe4, 0x8e, 0x88, 0xda, 0x68, 0x08,
	0x1a, 0xd5, 0xfa, 0x7d, 0xcb, 0x24, 0xb6, 0x7e, 0xea, 0x12, 0xcb, 0x16, 0x30, 0xb7, 0xa3, 0xe6,
	0xc7, 0xae, 0x49, 0xb0, 0x2d, 0x34, 0xe8, 0xf0, 0x53, 0x4b, 0xc3, 0xb6, 0x4a, 0xbf, 0x36, 0xa9,
	0xa2, 0x3e, 0x56, 0xeb, 0x67, 0xc7, 0x2d, 0xfc, 0xd8, 0x50, 0x49, 0xc3, 0xb2, 0xdb, 0x42, 0x4b,
	0xfe, 0xaf, 0x22, 0x64, 0x0f, 0xdd, 0x76, 0x07, 0xfd, 0x41, 0xea, 0xad, 0xe3, 0xf4, 0xa7, 0x8e,
	0xa9, 0x07, 0x8d, 0xbb, 0xd1, 0x65, 0xe0, 0xe2, 0xa4, 0xbb, 0xc0, 0xe8, 0x79, 0xe5, 0x23, 0x40,
	0x7e, 0xdc, 0x8e, 0x9f, 0xc1, 0xd9, 0xd9, 0x8e, 0x60, 0x65, 0xb5, 0x9e, 0x82, 0x38, 0xe8, 0x1e,
	0x94, 0xa2, 0xfa, 0xc4, 0x11, 0x73, 0xa3, 0xef, 0xec, 0xa2, 0x2c, 0x5a, 0x89, 0xa3, 0xa3, 0x07,
	0xb0, 0xa2, 0x07, 0x3d, 0x8b, 0x1a, 0xbf, 0xf5, 0xcb, 0xcf, 0xf0, 0x68, 0x51, 0xa9, 0xe8, 0xf1,
	0xa1, 0x83, 0x6e, 0x43, 0x9e, 0xf9, 0xbe, 0x23, 0x2e, 0x4d, 0x7a, 0xe1, 0xe0, 0x23, 0xa1, 0x3f,
	0x0c, 0x3a, 0x01, 0xc1, 0x3d, 0x79, 0x61, 0xea, 0x35, 0xb9, 0x5f, 0xe8, 0xf3, 0x01, 0x9b, 0x78,
	0x3a, 0xf9, 0x2f, 0xce, 0x90, 0xfb, 0xa7, 0x33, 0x7c, 0xa4, 0x8c, 0xbe, 0x02, 0x83, 0x19, 0xeb,
	0xef, 0x91, 0xf7, 0x5c, 0x0f, 0x47, 0x3d, 0xd8, 0x2c, 0xcd, 0xd4, 0xd9, 0x1a, 0x7e, 0x95, 0x89,
	0xee, 0x43, 0x25, 0xd1, 0xd2, 0x70, 0xc4, 0xe5, 0xe9, 0x4f, 0x54, 0xfc, 0x3e, 0x9b, 0x3f, 0x72,
	0xd0, 0x41, 0xfa, 0x09, 0x60, 0x79, 0xfa, 0x0b, 0xc0, 0xf4, 0x3b, 0xbf, 0x37, 0x83, 0xab, 0xf4,
	0xca, 0xa4, 0xa7, 0x45, 0xfc, 0x96, 0xfc, 0xf7, 0x61, 0x99, 0x75, 0x3c, 0x83, 0xfb, 0xbe, 0x95,
	0x69, 0xef, 0x9c, 0x94, 0x12, 0x09, 0x7f, 0x33, 0xa3, 0x8e, 0x52, 0x56, 0x47, 0x14, 0xa6, 0x5e,
	0x44, 0xc7, 0xd1, 0xa9, 0x8f, 0x0d, 0xbf, 0xb1, 0x14, 0x57, 0x67, 0xbb, 0x71, 0x54, 0x56, 0x87,
	0x1e, 0x51, 0xa2, 0xea, 0x88, 0xe7, 0x68, 0x68, 0x96, 0xe7, 0x04, 0xc3, 0x6f, 0xce, 0xde, 0x84,
	0x1c, 0xad, 0x77, 0x1c, 0x71, 0x6d, 0xd2, 0x73, 0x3d, 0x86, 0x42, 0xc5, 0x0e, 0x3d, 0x4b, 0x5b,
	0x9f, 0xe5, 0x55, 0x9a, 0xb2, 0x72, 0x9e, 0x7c, 0x73, 0x26, 0x3f, 0x08, 0x0b, 0xd9, 0x7b, 0x20,
	0xe0, 0x2e, 0xb6, 0x7b, 0xa4, 0xa5, 0x9b, 0xcd, 0x9a, 0xee, 0xd4, 0xac, 0x33, 0x96, 0xe5, 0x15,
	0x0e, 0x50, 0xdf, 0x93, 0x2a, 0x1f, 0x86, 0xdf, 0xaa, 0xce, 0xa3, 0x4f, 0x94, 0x0a, 0x8e, 0x8f,
	0xcf, 0xe4, 0x3f, 0xcb, 0x40, 0xb6, 0x6a, 0x36, 0xac, 0xf8, 0x9b, 0xa2, 0x4c, 0xf2, 0x4d, 0xd1,
	0x35, 0xc8, 0xbb, 0x1d, 0xa2, 0xb7, 0x31, 0xfb, 0xab, 0x96, 0x9c, 0xe2, 0x8f, 0x28, 0x9c, 0x26,
	0x6d, 0x3a, 0xff, 0x43, 0x95, 0xa2, 0xe2, 0x8f, 0xd0, 0x0d, 0x28, 0x9c, 0xba, 0xba, 0x41, 0x6a,
	0x2a, 0x11, 0xb3, 0x9c, 0x15, 0x1b, 0xef, 0xc7, 0x3e, 0x9d, 0xf6, 0xc4, 0x5c, 0xec, 0xd3, 0x41,
	0xef, 0xe0, 0xf6, 0x45, 0x7f, 0x33, 0xf3, 0x43, 0x7f, 0x33, 0xf3, 0xef, 0xfd, 0xcd, 0xcc, 0xb7,
	0x3f, 0x6e, 0x5e, 0xf9, 0xe1, 0xc7, 0xcd, 0x2b, 0xff, 0xf2, 0xe3, 0xe6, 0x95, 0x2f, 0xd6, 0x82,
	0xad, 0x31, 0x54, 0x53, 0xf3, 0xff, 0x56, 0xe8, 0x34, 0xcf, 0xfe, 0x1a, 0xe6, 0x9d, 0xff, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x6b, 0x47, 0x98, 0x34, 0x43, 0x34, 0x00, 0x00,
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintEntity(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintEntity(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeamID) > 0 {
		i -= len(m.TeamID)
		copy(dAtA[i:], m.TeamID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TeamID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Role != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TournamentMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TournamentMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LevelValidations) > 0 {
		for iNdEx := len(m.LevelValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LevelValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xd
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xd
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ReceivedWhoswhoAttempts) > 0 {
		for iNdEx := len(m.ReceivedWhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReceivedWhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.SentWhoswhoAttempts) > 0 {
		for iNdEx := len(m.SentWhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SentWhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.Coupons) > 0 {
		for iNdEx := len(m.Coupons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coupons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.TournamentTeamID) > 0 {
		i -= len(m.TournamentTeamID)
		copy(dAtA[i:], m.TournamentTeamID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TournamentTeamID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if m.TournamentTeam != nil {
		{
			size, err := m.TournamentTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Role != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActiveTournamentMemberID) > 0 {
		i -= len(m.ActiveTournamentMemberID)
		copy(dAtA[i:], m.ActiveTournamentMemberID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.ActiveTournamentMemberID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.ActiveTournamentMember != nil {
		{
			size, err := m.ActiveTournamentMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if len(m.Memberships) > 0 {
		for iNdEx := len(m.Memberships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Memberships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.TournamentMemberships) > 0 {
		for iNdEx := len(m.TournamentMemberships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TournamentMemberships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.OauthSubject) > 0 {
		i -= len(m.OauthSubject)
		copy(dAtA[i:], m.OauthSubject)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.OauthSubject)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if len(m.WebsiteURL) > 0 {
		i -= len(m.WebsiteURL)
		copy(dAtA[i:], m.WebsiteURL)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.WebsiteURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.GravatarURL) > 0 {
		i -= len(m.GravatarURL)
		copy(dAtA[i:], m.GravatarURL)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.GravatarURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UserList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.ReceivedWhoswhoAttempts) > 0 {
		for iNdEx := len(m.ReceivedWhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReceivedWhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.TournamentTeams) > 0 {
		for iNdEx := len(m.TournamentTeams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TournamentTeams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.GravatarURL) > 0 {
		i -= len(m.GravatarURL)
		copy(dAtA[i:], m.GravatarURL)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.GravatarURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Level) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Level) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Level) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for iNdEx := len(m.Versions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Versions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Homepage) > 0 {
		i -= len(m.Homepage)
		copy(dAtA[i:], m.Homepage)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Homepage)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	if len(m.PreviewUrl) > 0 {
		i -= len(m.PreviewUrl)
		copy(dAtA[i:], m.PreviewUrl)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.PreviewUrl)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xda
	}
	if m.IsDraft {
		i--
		if m.IsDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd0
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LevelList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LevelList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LevelVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LevelVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Flavors) > 0 {
		for iNdEx := len(m.Flavors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Flavors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.LevelID) > 0 {
		i -= len(m.LevelID)
		copy(dAtA[i:], m.LevelID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.LevelID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.Level != nil {
		{
			size, err := m.Level.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Driver != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Driver))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc8
	}
	if len(m.SourceURL) > 0 {
		i -= len(m.SourceURL)
		copy(dAtA[i:], m.SourceURL)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.SourceURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if m.IsLatest {
		i--
		if m.IsLatest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if m.IsDraft {
		i--
		if m.IsDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if len(m.Changelog) > 0 {
		i -= len(m.Changelog)
		copy(dAtA[i:], m.Changelog)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Changelog)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Tournament) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tournament) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tournament) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coupons) > 0 {
		for iNdEx := len(m.Coupons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coupons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.IsDefault {
		i--
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if m.Visibility != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Visibility))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.Status != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TournamentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TournamentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TournamentTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TournamentTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.LevelSubscriptions) > 0 {
		for iNdEx := len(m.LevelSubscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LevelSubscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.TeamID) > 0 {
		i -= len(m.TeamID)
		copy(dAtA[i:], m.TeamID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TeamID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if len(m.TournamentID) > 0 {
		i -= len(m.TournamentID)
		copy(dAtA[i:], m.TournamentID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TournamentID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.Tournament != nil {
		{
			size, err := m.Tournament.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.IsDefault {
		i--
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WhoswhoAttempt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhoswhoAttempt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhoswhoAttempt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetTeamID) > 0 {
		i -= len(m.TargetTeamID)
		copy(dAtA[i:], m.TargetTeamID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TargetTeamID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xea
	}
	if m.TargetTeam != nil {
		{
			size, err := m.TargetTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if len(m.TargetMemberID) > 0 {
		i -= len(m.TargetMemberID)
		copy(dAtA[i:], m.TargetMemberID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TargetMemberID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if m.TargetMember != nil {
		{
			size, err := m.TargetMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if len(m.AuthorID) > 0 {
		i -= len(m.AuthorID)
		copy(dAtA[i:], m.AuthorID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.AuthorID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LevelValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LevelValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TournamentMemberID) > 0 {
		i -= len(m.TournamentMemberID)
		copy(dAtA[i:], m.TournamentMemberID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TournamentMemberID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if m.TournamentMember != nil {
		{
			size, err := m.TournamentMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if len(m.LevelSubscriptionID) > 0 {
		i -= len(m.LevelSubscriptionID)
		copy(dAtA[i:], m.LevelSubscriptionID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.LevelSubscriptionID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.LevelSubscription != nil {
		{
			size, err := m.LevelSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.CorrectorComment) > 0 {
		i -= len(m.CorrectorComment)
		copy(dAtA[i:], m.CorrectorComment)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.CorrectorComment)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.AuthorComment) > 0 {
		i -= len(m.AuthorComment)
		copy(dAtA[i:], m.AuthorComment)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.AuthorComment)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.Status != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LevelSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelSubscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LevelSubscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validations) > 0 {
		for iNdEx := len(m.Validations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.LevelFlavorID) > 0 {
		i -= len(m.LevelFlavorID)
		copy(dAtA[i:], m.LevelFlavorID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.LevelFlavorID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if m.LevelFlavor != nil {
		{
			size, err := m.LevelFlavor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if len(m.TournamentTeamID) > 0 {
		i -= len(m.TournamentTeamID)
		copy(dAtA[i:], m.TournamentTeamID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TournamentTeamID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.TournamentTeam != nil {
		{
			size, err := m.TournamentTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *InventoryItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InventoryItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InventoryItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerID) > 0 {
		i -= len(m.OwnerID)
		copy(dAtA[i:], m.OwnerID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.OwnerID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Item != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Item))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LevelFlavor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelFlavor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LevelFlavor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for iNdEx := len(m.Subscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.Instances) > 0 {
		for iNdEx := len(m.Instances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.LevelVersionID) > 0 {
		i -= len(m.LevelVersionID)
		copy(dAtA[i:], m.LevelVersionID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.LevelVersionID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.LevelVersion != nil {
		{
			size, err := m.LevelVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LevelInstance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelInstance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LevelInstance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FlavorID) > 0 {
		i -= len(m.FlavorID)
		copy(dAtA[i:], m.FlavorID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.FlavorID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if m.Flavor != nil {
		{
			size, err := m.Flavor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if len(m.HypervisorID) > 0 {
		i -= len(m.HypervisorID)
		copy(dAtA[i:], m.HypervisorID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.HypervisorID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.Hypervisor != nil {
		{
			size, err := m.Hypervisor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Status != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Hypervisor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hypervisor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hypervisor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LevelInstances) > 0 {
		for iNdEx := len(m.LevelInstances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LevelInstances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.Status != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Notification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Args) > 0 {
		i -= len(m.Args)
		copy(dAtA[i:], m.Args)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Args)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ClickUrl) > 0 {
		i -= len(m.ClickUrl)
		copy(dAtA[i:], m.ClickUrl)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.ClickUrl)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.IsRead {
		i--
		if m.IsRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Coupon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coupon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Coupon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validations) > 0 {
		for iNdEx := len(m.Validations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.TournamentID) > 0 {
		i -= len(m.TournamentID)
		copy(dAtA[i:], m.TournamentID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.TournamentID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.Tournament != nil {
		{
			size, err := m.Tournament.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.MaxValidationCount != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.MaxValidationCount))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.Value != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CouponValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouponValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CouponValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CouponID) > 0 {
		i -= len(m.CouponID)
		copy(dAtA[i:], m.CouponID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.CouponID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if m.Coupon != nil {
		{
			size, err := m.Coupon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if len(m.AuthorID) > 0 {
		i -= len(m.AuthorID)
		copy(dAtA[i:], m.AuthorID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.AuthorID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Achievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LevelValidationID) > 0 {
		i -= len(m.LevelValidationID)
		copy(dAtA[i:], m.LevelValidationID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.LevelValidationID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if m.LevelValidation != nil {
		{
			size, err := m.LevelValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if len(m.AuthorID) > 0 {
		i -= len(m.AuthorID)
		copy(dAtA[i:], m.AuthorID)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.AuthorID)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Argument) > 0 {
		i -= len(m.Argument)
		copy(dAtA[i:], m.Argument)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Argument)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if m.IsGlobal {
		i--
		if m.IsGlobal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if m.Type != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Dump) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dump) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dump) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhoswhoAttempts) > 0 {
		for iNdEx := len(m.WhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.TournamentTeams) > 0 {
		for iNdEx := len(m.TournamentTeams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TournamentTeams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.TournamentMembers) > 0 {
		for iNdEx := len(m.TournamentMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TournamentMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Tournaments) > 0 {
		for iNdEx := len(m.Tournaments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tournaments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.TeamMembers) > 0 {
		for iNdEx := len(m.TeamMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.LevelVersions) > 0 {
		for iNdEx := len(m.LevelVersions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LevelVersions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.LevelValidations) > 0 {
		for iNdEx := len(m.LevelValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LevelValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.LevelSubscriptions) > 0 {
		for iNdEx := len(m.LevelSubscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LevelSubscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.LevelInstances) > 0 {
		for iNdEx := len(m.LevelInstances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LevelInstances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.LevelFlavors) > 0 {
		for iNdEx := len(m.LevelFlavors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LevelFlavors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Levels) > 0 {
		for iNdEx := len(m.Levels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Levels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.InventoryItems) > 0 {
		for iNdEx := len(m.InventoryItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InventoryItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Hypervisors) > 0 {
		for iNdEx := len(m.Hypervisors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hypervisors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CouponValidations) > 0 {
		for iNdEx := len(m.CouponValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CouponValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Coupons) > 0 {
		for iNdEx := len(m.Coupons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coupons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EverythingIsOK {
		i--
		if m.EverythingIsOK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuiltBy) > 0 {
		i -= len(m.BuiltBy)
		copy(dAtA[i:], m.BuiltBy)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.BuiltBy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuiltAt) > 0 {
		i -= len(m.BuiltAt)
		copy(dAtA[i:], m.BuiltAt)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.BuiltAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Uptime != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Uptime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntity(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *TeamMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.Role != 0 {
		n += 2 + sovEntity(uint64(m.Role))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TeamID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *TournamentMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.Role != 0 {
		n += 2 + sovEntity(uint64(m.Role))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.TournamentTeam != nil {
		l = m.TournamentTeam.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TournamentTeamID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if len(m.Coupons) > 0 {
		for _, e := range m.Coupons {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.SentWhoswhoAttempts) > 0 {
		for _, e := range m.SentWhoswhoAttempts {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.ReceivedWhoswhoAttempts) > 0 {
		for _, e := range m.ReceivedWhoswhoAttempts {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.LevelValidations) > 0 {
		for _, e := range m.LevelValidations {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Username)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.GravatarURL)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.WebsiteURL)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.OauthSubject)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if len(m.TournamentMemberships) > 0 {
		for _, e := range m.TournamentMemberships {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Memberships) > 0 {
		for _, e := range m.Memberships {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if m.ActiveTournamentMember != nil {
		l = m.ActiveTournamentMember.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.ActiveTournamentMemberID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *UserList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.GravatarURL)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if len(m.TournamentTeams) > 0 {
		for _, e := range m.TournamentTeams {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.ReceivedWhoswhoAttempts) > 0 {
		for _, e := range m.ReceivedWhoswhoAttempts {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *TeamList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *Level) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.IsDraft {
		n += 3
	}
	l = len(m.PreviewUrl)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Homepage)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if len(m.Versions) > 0 {
		for _, e := range m.Versions {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *LevelList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *LevelVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Changelog)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.IsDraft {
		n += 3
	}
	if m.IsLatest {
		n += 3
	}
	l = len(m.SourceURL)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.Driver != 0 {
		n += 2 + sovEntity(uint64(m.Driver))
	}
	if m.Level != nil {
		l = m.Level.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.LevelID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if len(m.Flavors) > 0 {
		for _, e := range m.Flavors {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *Tournament) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovEntity(uint64(m.Status))
	}
	if m.Visibility != 0 {
		n += 2 + sovEntity(uint64(m.Visibility))
	}
	if m.IsDefault {
		n += 3
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Coupons) > 0 {
		for _, e := range m.Coupons {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *TournamentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *TournamentTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.IsDefault {
		n += 3
	}
	if m.Tournament != nil {
		l = m.Tournament.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TournamentID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TeamID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if len(m.LevelSubscriptions) > 0 {
		for _, e := range m.LevelSubscriptions {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *WhoswhoAttempt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.Success {
		n += 3
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.AuthorID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.TargetMember != nil {
		l = m.TargetMember.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TargetMemberID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.TargetTeam != nil {
		l = m.TargetTeam.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TargetTeamID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *LevelValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.Status != 0 {
		n += 2 + sovEntity(uint64(m.Status))
	}
	l = len(m.AuthorComment)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.CorrectorComment)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.LevelSubscription != nil {
		l = m.LevelSubscription.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.LevelSubscriptionID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.TournamentMember != nil {
		l = m.TournamentMember.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TournamentMemberID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *LevelSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.TournamentTeam != nil {
		l = m.TournamentTeam.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TournamentTeamID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.LevelFlavor != nil {
		l = m.LevelFlavor.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.LevelFlavorID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if len(m.Validations) > 0 {
		for _, e := range m.Validations {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *InventoryItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.Item != 0 {
		n += 2 + sovEntity(uint64(m.Item))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.OwnerID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *LevelFlavor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.LevelVersion != nil {
		l = m.LevelVersion.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.LevelVersionID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *LevelInstance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.Status != 0 {
		n += 2 + sovEntity(uint64(m.Status))
	}
	if m.Hypervisor != nil {
		l = m.Hypervisor.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.HypervisorID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.Flavor != nil {
		l = m.Flavor.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.FlavorID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Hypervisor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovEntity(uint64(m.Status))
	}
	if len(m.LevelInstances) > 0 {
		for _, e := range m.LevelInstances {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *Notification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.IsRead {
		n += 3
	}
	l = len(m.ClickUrl)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Args)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Coupon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Hash)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.Value != 0 {
		n += 2 + sovEntity(uint64(m.Value))
	}
	if m.MaxValidationCount != 0 {
		n += 2 + sovEntity(uint64(m.MaxValidationCount))
	}
	if m.Tournament != nil {
		l = m.Tournament.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.TournamentID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if len(m.Validations) > 0 {
		for _, e := range m.Validations {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *CouponValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Comment)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.AuthorID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.Coupon != nil {
		l = m.Coupon.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.CouponID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Achievement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.Type != 0 {
		n += 2 + sovEntity(uint64(m.Type))
	}
	if m.IsGlobal {
		n += 3
	}
	l = len(m.Comment)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.Argument)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.AuthorID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	if m.LevelValidation != nil {
		l = m.LevelValidation.Size()
		n += 2 + l + sovEntity(uint64(l))
	}
	l = len(m.LevelValidationID)
	if l > 0 {
		n += 2 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Dump) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Coupons) > 0 {
		for _, e := range m.Coupons {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.CouponValidations) > 0 {
		for _, e := range m.CouponValidations {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Hypervisors) > 0 {
		for _, e := range m.Hypervisors {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.InventoryItems) > 0 {
		for _, e := range m.InventoryItems {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Levels) > 0 {
		for _, e := range m.Levels {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.LevelFlavors) > 0 {
		for _, e := range m.LevelFlavors {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.LevelInstances) > 0 {
		for _, e := range m.LevelInstances {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.LevelSubscriptions) > 0 {
		for _, e := range m.LevelSubscriptions {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.LevelValidations) > 0 {
		for _, e := range m.LevelValidations {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.LevelVersions) > 0 {
		for _, e := range m.LevelVersions {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.TeamMembers) > 0 {
		for _, e := range m.TeamMembers {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Tournaments) > 0 {
		for _, e := range m.Tournaments {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.TournamentMembers) > 0 {
		for _, e := range m.TournamentMembers {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.TournamentTeams) > 0 {
		for _, e := range m.TournamentTeams {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	if len(m.WhoswhoAttempts) > 0 {
		for _, e := range m.WhoswhoAttempts {
			l = e.Size()
			n += 2 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EverythingIsOK {
		n += 2
	}
	return n
}

func (m *Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Uptime != 0 {
		n += 1 + sovEntity(uint64(m.Uptime))
	}
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.BuiltAt)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.BuiltBy)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func sovEntity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntity(x uint64) (n int) {
	return sovEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= TeamMember_Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= TournamentMember_Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentTeam == nil {
				m.TournamentTeam = &TournamentTeam{}
			}
			if err := m.TournamentTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupons = append(m.Coupons, &Coupon{})
			if err := m.Coupons[len(m.Coupons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 206:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentWhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentWhoswhoAttempts = append(m.SentWhoswhoAttempts, &WhoswhoAttempt{})
			if err := m.SentWhoswhoAttempts[len(m.SentWhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 207:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedWhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivedWhoswhoAttempts = append(m.ReceivedWhoswhoAttempts, &WhoswhoAttempt{})
			if err := m.ReceivedWhoswhoAttempts[len(m.ReceivedWhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 208:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &InventoryItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 209:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelValidations = append(m.LevelValidations, &LevelValidation{})
			if err := m.LevelValidations[len(m.LevelValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravatarURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravatarURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OauthSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OauthSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentMemberships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentMemberships = append(m.TournamentMemberships, &TournamentMember{})
			if err := m.TournamentMemberships[len(m.TournamentMemberships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memberships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memberships = append(m.Memberships, &TeamMember{})
			if err := m.Memberships[len(m.Memberships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTournamentMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveTournamentMember == nil {
				m.ActiveTournamentMember = &TournamentMember{}
			}
			if err := m.ActiveTournamentMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTournamentMemberID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveTournamentMemberID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &User{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravatarURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravatarURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTeams = append(m.TournamentTeams, &TournamentTeam{})
			if err := m.TournamentTeams[len(m.TournamentTeams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedWhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivedWhoswhoAttempts = append(m.ReceivedWhoswhoAttempts, &WhoswhoAttempt{})
			if err := m.ReceivedWhoswhoAttempts[len(m.ReceivedWhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &TeamMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Team{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Level) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Level: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Level: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDraft = bool(v != 0)
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Homepage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Homepage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, &LevelVersion{})
			if err := m.Versions[len(m.Versions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Level{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changelog", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changelog = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDraft = bool(v != 0)
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLatest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLatest = bool(v != 0)
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			m.Driver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Driver |= LevelVersion_Driver(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level == nil {
				m.Level = &Level{}
			}
			if err := m.Level.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flavors = append(m.Flavors, &LevelFlavor{})
			if err := m.Flavors[len(m.Flavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tournament) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tournament: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tournament: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Tournament_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			m.Visibility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Visibility |= Tournament_Visibility(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &TournamentTeam{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupons = append(m.Coupons, &Coupon{})
			if err := m.Coupons[len(m.Coupons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Tournament{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tournament", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tournament == nil {
				m.Tournament = &Tournament{}
			}
			if err := m.Tournament.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 205:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelSubscriptions = append(m.LevelSubscriptions, &LevelSubscription{})
			if err := m.LevelSubscriptions[len(m.LevelSubscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 206:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &TournamentMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhoswhoAttempt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhoswhoAttempt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhoswhoAttempt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &TournamentMember{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetMember == nil {
				m.TargetMember = &TournamentMember{}
			}
			if err := m.TargetMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetMemberID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetMemberID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetTeam == nil {
				m.TargetTeam = &TournamentTeam{}
			}
			if err := m.TargetTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetTeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LevelValidation_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorComment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorComment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrectorComment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrectorComment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LevelSubscription == nil {
				m.LevelSubscription = &LevelSubscription{}
			}
			if err := m.LevelSubscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelSubscriptionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelSubscriptionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentMember == nil {
				m.TournamentMember = &TournamentMember{}
			}
			if err := m.TournamentMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentMemberID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentMemberID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentTeam == nil {
				m.TournamentTeam = &TournamentTeam{}
			}
			if err := m.TournamentTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelFlavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LevelFlavor == nil {
				m.LevelFlavor = &LevelFlavor{}
			}
			if err := m.LevelFlavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelFlavorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelFlavorID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validations = append(m.Validations, &LevelValidation{})
			if err := m.Validations[len(m.Validations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InventoryItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InventoryItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InventoryItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			m.Item = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Item |= InventoryItem_Item(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &TournamentMember{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelFlavor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelFlavor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelFlavor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LevelVersion == nil {
				m.LevelVersion = &Level{}
			}
			if err := m.LevelVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelVersionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelVersionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, &LevelInstance{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &LevelSubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelInstance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LevelInstance_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hypervisor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hypervisor == nil {
				m.Hypervisor = &Hypervisor{}
			}
			if err := m.Hypervisor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HypervisorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HypervisorID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flavor == nil {
				m.Flavor = &LevelFlavor{}
			}
			if err := m.Flavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlavorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlavorID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hypervisor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hypervisor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hypervisor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Hypervisor_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelInstances = append(m.LevelInstances, &LevelInstance{})
			if err := m.LevelInstances[len(m.LevelInstances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRead = bool(v != 0)
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClickUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coupon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coupon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coupon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidationCount", wireType)
			}
			m.MaxValidationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidationCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tournament", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tournament == nil {
				m.Tournament = &Tournament{}
			}
			if err := m.Tournament.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validations = append(m.Validations, &CouponValidation{})
			if err := m.Validations[len(m.Validations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouponValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CouponValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CouponValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &TournamentMember{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coupon == nil {
				m.Coupon = &Coupon{}
			}
			if err := m.Coupon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Achievement_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobal = bool(v != 0)
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Argument", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Argument = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &TournamentMember{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LevelValidation == nil {
				m.LevelValidation = &LevelValidation{}
			}
			if err := m.LevelValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelValidationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelValidationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dump) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dump: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dump: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupons = append(m.Coupons, &Coupon{})
			if err := m.Coupons[len(m.Coupons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponValidations = append(m.CouponValidations, &CouponValidation{})
			if err := m.CouponValidations[len(m.CouponValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hypervisors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hypervisors = append(m.Hypervisors, &Hypervisor{})
			if err := m.Hypervisors[len(m.Hypervisors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InventoryItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InventoryItems = append(m.InventoryItems, &InventoryItem{})
			if err := m.InventoryItems[len(m.InventoryItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Levels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Levels = append(m.Levels, &Level{})
			if err := m.Levels[len(m.Levels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelFlavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelFlavors = append(m.LevelFlavors, &LevelFlavor{})
			if err := m.LevelFlavors[len(m.LevelFlavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelInstances = append(m.LevelInstances, &LevelInstance{})
			if err := m.LevelInstances[len(m.LevelInstances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelSubscriptions = append(m.LevelSubscriptions, &LevelSubscription{})
			if err := m.LevelSubscriptions[len(m.LevelSubscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelValidations = append(m.LevelValidations, &LevelValidation{})
			if err := m.LevelValidations[len(m.LevelValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelVersions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelVersions = append(m.LevelVersions, &LevelVersion{})
			if err := m.LevelVersions[len(m.LevelVersions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamMembers = append(m.TeamMembers, &TeamMember{})
			if err := m.TeamMembers[len(m.TeamMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tournaments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tournaments = append(m.Tournaments, &Tournament{})
			if err := m.Tournaments[len(m.Tournaments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentMembers = append(m.TournamentMembers, &TournamentMember{})
			if err := m.TournamentMembers[len(m.TournamentMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTeams = append(m.TournamentTeams, &TournamentTeam{})
			if err := m.TournamentTeams[len(m.TournamentTeams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhoswhoAttempts = append(m.WhoswhoAttempts, &WhoswhoAttempt{})
			if err := m.WhoswhoAttempts[len(m.WhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EverythingIsOK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EverythingIsOK = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			m.Uptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuiltAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuiltAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuiltBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuiltBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntity
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEntity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEntity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEntity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEntity
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEntity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntity   = fmt.Errorf("proto: integer overflow")
)
