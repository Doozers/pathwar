// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entity/level.proto

package entity // import "pathwar.pw/entity"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Level struct {
	Metadata    `protobuf:"bytes,1,opt,name=metadata,embedded=metadata" json:"metadata"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Author      string   `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	SourceUrl   string   `protobuf:"bytes,5,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	Version     string   `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Lang        string   `protobuf:"bytes,7,opt,name=lang,proto3" json:"lang,omitempty"`
	Tags        []string `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	IsDraft     bool     `protobuf:"varint,9,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
}

func (m *Level) Reset()         { *m = Level{} }
func (m *Level) String() string { return proto.CompactTextString(m) }
func (*Level) ProtoMessage()    {}
func (*Level) Descriptor() ([]byte, []int) {
	return fileDescriptor_level_f690ff15de12530c, []int{0}
}
func (m *Level) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Level) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Level.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Level) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Level.Merge(dst, src)
}
func (m *Level) XXX_Size() int {
	return m.Size()
}
func (m *Level) XXX_DiscardUnknown() {
	xxx_messageInfo_Level.DiscardUnknown(m)
}

var xxx_messageInfo_Level proto.InternalMessageInfo

func (m *Level) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Level) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Level) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Level) GetSourceUrl() string {
	if m != nil {
		return m.SourceUrl
	}
	return ""
}

func (m *Level) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Level) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *Level) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Level) GetIsDraft() bool {
	if m != nil {
		return m.IsDraft
	}
	return false
}

func init() {
	proto.RegisterType((*Level)(nil), "pathwar.entity.Level")
}
func (m *Level) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Level) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLevel(dAtA, i, uint64(m.Metadata.Size()))
	n1, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLevel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLevel(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLevel(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if len(m.SourceUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLevel(dAtA, i, uint64(len(m.SourceUrl)))
		i += copy(dAtA[i:], m.SourceUrl)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLevel(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Lang) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLevel(dAtA, i, uint64(len(m.Lang)))
		i += copy(dAtA[i:], m.Lang)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.IsDraft {
		dAtA[i] = 0x48
		i++
		if m.IsDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintLevel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Level) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovLevel(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLevel(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovLevel(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovLevel(uint64(l))
	}
	l = len(m.SourceUrl)
	if l > 0 {
		n += 1 + l + sovLevel(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovLevel(uint64(l))
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovLevel(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovLevel(uint64(l))
		}
	}
	if m.IsDraft {
		n += 2
	}
	return n
}

func sovLevel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLevel(x uint64) (n int) {
	return sovLevel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Level) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Level: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Level: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDraft = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLevel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLevel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLevel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLevel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLevel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLevel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLevel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLevel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLevel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLevel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("entity/level.proto", fileDescriptor_level_f690ff15de12530c) }

var fileDescriptor_level_f690ff15de12530c = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x9b, 0xfd, 0xed, 0x32, 0x10, 0x0c, 0x28, 0x71, 0x60, 0x56, 0x3c, 0x0d, 0xc4, 0x16,
	0xf4, 0xee, 0x61, 0x78, 0xd4, 0xcb, 0xc0, 0x8b, 0x97, 0x91, 0x6d, 0x59, 0x17, 0x68, 0x9b, 0x92,
	0xa4, 0x1b, 0x7e, 0x0b, 0xfd, 0x56, 0x3b, 0xf6, 0xe8, 0x69, 0x48, 0xfb, 0x45, 0x24, 0x49, 0x2b,
	0x7a, 0x7b, 0x9e, 0xe7, 0x97, 0xbc, 0xef, 0xcb, 0x03, 0x11, 0xcb, 0x34, 0xd7, 0xef, 0x51, 0xc2,
	0xf6, 0x2c, 0x09, 0x73, 0x29, 0xb4, 0x40, 0x67, 0x39, 0xd5, 0xbb, 0x03, 0x95, 0xa1, 0x63, 0x93,
	0xbb, 0x98, 0xeb, 0x5d, 0xb1, 0x0a, 0xd7, 0x22, 0x8d, 0x62, 0x11, 0x8b, 0xc8, 0x3e, 0x5b, 0x15,
	0x5b, 0xeb, 0xac, 0xb1, 0xca, 0x7d, 0x9f, 0x5c, 0x34, 0x23, 0x53, 0xa6, 0xe9, 0x86, 0x6a, 0xea,
	0xe2, 0x9b, 0xcf, 0x0e, 0xec, 0x3f, 0x9b, 0x2d, 0xe8, 0x11, 0xfa, 0x2d, 0xc3, 0x20, 0x00, 0xb3,
	0xf1, 0x3d, 0x0e, 0xff, 0xaf, 0x0c, 0x5f, 0x1a, 0x3e, 0xf7, 0x8f, 0xa7, 0xa9, 0x57, 0x9e, 0xa6,
	0x60, 0xf1, 0xfb, 0x07, 0x21, 0xd8, 0xcb, 0x68, 0xca, 0x70, 0x27, 0x00, 0xb3, 0xd1, 0xc2, 0x6a,
	0x14, 0xc0, 0xf1, 0x86, 0xa9, 0xb5, 0xe4, 0xb9, 0xe6, 0x22, 0xc3, 0x5d, 0x8b, 0xfe, 0x46, 0xe8,
	0x12, 0x0e, 0x68, 0xa1, 0x77, 0x42, 0xe2, 0x9e, 0x85, 0x8d, 0x43, 0xd7, 0x10, 0x2a, 0x51, 0xc8,
	0x35, 0x5b, 0x16, 0x32, 0xc1, 0x7d, 0xcb, 0x46, 0x2e, 0x79, 0x95, 0x09, 0xc2, 0x70, 0xb8, 0x67,
	0x52, 0x99, 0xa1, 0x03, 0xcb, 0x5a, 0x6b, 0xce, 0x48, 0x68, 0x16, 0xe3, 0xa1, 0x3b, 0xc3, 0x68,
	0x93, 0x69, 0x1a, 0x2b, 0xec, 0x07, 0x5d, 0x93, 0x19, 0x8d, 0xae, 0xa0, 0xcf, 0xd5, 0x72, 0x23,
	0xe9, 0x56, 0xe3, 0x51, 0x00, 0x66, 0xfe, 0x62, 0xc8, 0xd5, 0x93, 0xb1, 0xf3, 0xdb, 0x63, 0x45,
	0x40, 0x59, 0x11, 0xf0, 0x5d, 0x11, 0xf0, 0x51, 0x13, 0xaf, 0xac, 0x89, 0xf7, 0x55, 0x13, 0xef,
	0xed, 0xbc, 0x2d, 0x24, 0x3f, 0x44, 0xae, 0x93, 0xd5, 0xc0, 0xf6, 0xf8, 0xf0, 0x13, 0x00, 0x00,
	0xff, 0xff, 0x2d, 0x64, 0xc5, 0xba, 0xb3, 0x01, 0x00, 0x00,
}
