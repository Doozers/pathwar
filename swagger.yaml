swagger: "2.0"
basePath: /
consumes:
- application/json
definitions:
  ChallengeFlavorDriver:
    default: Unknown
    enum:
    - Unknown
    - Docker
    - DockerCompose
    type: string
  InventoryItemItem:
    default: Unknown
    enum:
    - Unknown
    type: string
  SeasonVisibility:
    default: UnknownVisibility
    enum:
    - UnknownVisibility
    - Private
    - Unlisted
    - Public
    type: string
  UserGetSessionOutputSeasonAndTeam:
    properties:
      is_active:
        format: boolean
        type: boolean
      season:
        $ref: '#/definitions/dbSeason'
      team:
        $ref: '#/definitions/dbTeam'
    type: object
  dbAchievement:
    properties:
      argument:
        type: string
      author:
        $ref: '#/definitions/dbUser'
      author_id:
        format: int64
        type: string
      challenge_validation:
        $ref: '#/definitions/dbChallengeValidation'
      challenge_validation_id:
        format: int64
        type: string
      comment:
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      is_global:
        format: boolean
        type: boolean
      team:
        $ref: '#/definitions/dbTeam'
      team_id:
        format: int64
        type: string
      type:
        $ref: '#/definitions/dbAchievementType'
      updated_at:
        format: date-time
        type: string
    type: object
  dbAchievementType:
    default: Undefined
    enum:
    - Undefined
    - Buy1Challenge
    - Buy5Challenges
    - Buy10Challenges
    - Buy20Challenges
    - Buy50Challenges
    - Validate1Challenge
    - Validate5Challenges
    - Validate10Challenges
    - Validate20Challenges
    - Validate50Challenges
    - Validate1Coupon
    - Validate5Coupons
    - Validate10Coupons
    - Validate20Coupons
    - Validate50Coupons
    - Validate100Coupons
    - Author1Challenge
    - Author2Challenges
    - Author5Challenges
    - Author10Challenges
    - EarlyAdopterTop100
    - EarlyAdopterTop1000
    - Old1Year
    - Send1PullRequest
    - Send2PullRequests
    - Send5PullRequests
    - Send10Pullrequests
    - Staff
    - Contributor
    - BugHunter
    - Moderator
    - HackThePlatform
    title: fields
    type: string
  dbChallenge:
    properties:
      author:
        type: string
      created_at:
        format: date-time
        type: string
      description:
        type: string
      flavors:
        items:
          $ref: '#/definitions/dbChallengeFlavor'
        type: array
      homepage:
        title: repeated string tags = ;
        type: string
      id:
        format: int64
        type: string
      is_draft:
        format: boolean
        type: boolean
      locale:
        title: AuthorProfile
        type: string
      name:
        type: string
      preview_url:
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  dbChallengeFlavor:
    properties:
      challenge:
        $ref: '#/definitions/dbChallenge'
      challenge_id:
        format: int64
        type: string
      changelog:
        type: string
      created_at:
        format: date-time
        type: string
      driver:
        $ref: '#/definitions/ChallengeFlavorDriver'
      id:
        format: int64
        type: string
      is_draft:
        format: boolean
        type: boolean
      is_latest:
        format: boolean
        type: boolean
      season_challenges:
        items:
          $ref: '#/definitions/dbSeasonChallenge'
        type: array
      source_url:
        type: string
      updated_at:
        format: date-time
        type: string
      version:
        type: string
    type: object
  dbChallengeInstance:
    properties:
      created_at:
        format: date-time
        type: string
      flavor:
        $ref: '#/definitions/dbChallengeFlavor'
      flavor_id:
        format: int64
        type: string
      hypervisor:
        $ref: '#/definitions/dbHypervisor'
      hypervisor_id:
        format: int64
        type: string
      id:
        format: int64
        type: string
      status:
        $ref: '#/definitions/dbChallengeInstanceStatus'
      updated_at:
        format: date-time
        type: string
    type: object
  dbChallengeInstanceStatus:
    default: Unknown
    enum:
    - Unknown
    - Active
    - Inactive
    type: string
  dbChallengeSubscription:
    properties:
      buyer:
        $ref: '#/definitions/dbUser'
      buyer_id:
        format: int64
        type: string
      closed_at:
        format: date-time
        type: string
      closer:
        $ref: '#/definitions/dbUser'
      closer_id:
        format: int64
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      season_challenge:
        $ref: '#/definitions/dbSeasonChallenge'
      season_challenge_id:
        format: int64
        type: string
      status:
        $ref: '#/definitions/dbChallengeSubscriptionStatus'
      team:
        $ref: '#/definitions/dbTeam'
      team_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
      validations:
        items:
          $ref: '#/definitions/dbChallengeValidation'
        type: array
    type: object
  dbChallengeSubscriptionStatus:
    default: Unknown
    enum:
    - Unknown
    - Active
    - Closed
    type: string
  dbChallengeValidation:
    properties:
      author:
        $ref: '#/definitions/dbUser'
      author_comment:
        type: string
      author_id:
        format: int64
        type: string
      challenge_subscription:
        $ref: '#/definitions/dbChallengeSubscription'
      challenge_subscription_id:
        format: int64
        type: string
      corrector_comment:
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      passphrase:
        type: string
      passphrase_key:
        type: string
      status:
        $ref: '#/definitions/dbChallengeValidationStatus'
      team:
        $ref: '#/definitions/dbTeam'
      team_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  dbChallengeValidationStatus:
    default: Unknown
    enum:
    - Unknown
    - NeedReview
    - Accepted
    - Refused
    - AutoAccepted
    type: string
  dbCoupon:
    properties:
      created_at:
        format: date-time
        type: string
      hash:
        title: fields
        type: string
      id:
        format: int64
        type: string
      max_validation_count:
        format: int32
        type: integer
      season:
        $ref: '#/definitions/dbSeason'
        title: associations
      season_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
      validations:
        items:
          $ref: '#/definitions/dbCouponValidation'
        type: array
      value:
        format: int32
        type: integer
    type: object
  dbCouponValidation:
    properties:
      author:
        $ref: '#/definitions/dbUser'
        title: associations
      author_id:
        format: int64
        type: string
      comment:
        title: fields
        type: string
      coupon:
        $ref: '#/definitions/dbCoupon'
      coupon_id:
        format: int64
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      team:
        $ref: '#/definitions/dbTeam'
      team_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  dbDump:
    properties:
      achievements:
        items:
          $ref: '#/definitions/dbAchievement'
        type: array
      challenge_flavors:
        items:
          $ref: '#/definitions/dbChallengeFlavor'
        type: array
      challenge_instances:
        items:
          $ref: '#/definitions/dbChallengeInstance'
        type: array
      challenge_subscriptions:
        items:
          $ref: '#/definitions/dbChallengeSubscription'
        type: array
      challenge_validations:
        items:
          $ref: '#/definitions/dbChallengeValidation'
        type: array
      challenges:
        items:
          $ref: '#/definitions/dbChallenge'
        type: array
      coupon_validations:
        items:
          $ref: '#/definitions/dbCouponValidation'
        type: array
      coupons:
        items:
          $ref: '#/definitions/dbCoupon'
        type: array
      hypervisors:
        items:
          $ref: '#/definitions/dbHypervisor'
        type: array
      inventory_items:
        items:
          $ref: '#/definitions/dbInventoryItem'
        type: array
      notifications:
        items:
          $ref: '#/definitions/dbNotification'
        type: array
      organization_members:
        items:
          $ref: '#/definitions/dbOrganizationMember'
        type: array
      organizations:
        items:
          $ref: '#/definitions/dbOrganization'
        type: array
      season_challenges:
        items:
          $ref: '#/definitions/dbSeasonChallenge'
        type: array
      seasons:
        items:
          $ref: '#/definitions/dbSeason'
        type: array
      team_members:
        items:
          $ref: '#/definitions/dbTeamMember'
        type: array
      teams:
        items:
          $ref: '#/definitions/dbTeam'
        type: array
      users:
        items:
          $ref: '#/definitions/dbUser'
        type: array
      whoswho_attempts:
        items:
          $ref: '#/definitions/dbWhoswhoAttempt'
        type: array
    type: object
  dbHypervisor:
    properties:
      address:
        type: string
      challenge_instances:
        items:
          $ref: '#/definitions/dbChallengeInstance'
        type: array
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      name:
        type: string
      status:
        $ref: '#/definitions/dbHypervisorStatus'
      updated_at:
        format: date-time
        type: string
    type: object
  dbHypervisorStatus:
    default: Unknown
    enum:
    - Unknown
    - Active
    - Inactive
    type: string
  dbInventoryItem:
    properties:
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      item:
        $ref: '#/definitions/InventoryItemItem'
      owner:
        $ref: '#/definitions/dbTeamMember'
      owner_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  dbNotification:
    properties:
      args:
        type: string
      click_url:
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      is_read:
        format: boolean
        type: boolean
      msg:
        type: string
      updated_at:
        format: date-time
        type: string
      user:
        $ref: '#/definitions/dbUser'
      user_id:
        format: int64
        type: string
    type: object
  dbOrganization:
    properties:
      created_at:
        format: date-time
        type: string
      gravatar_url:
        type: string
      id:
        format: int64
        type: string
      locale:
        type: string
      members:
        items:
          $ref: '#/definitions/dbOrganizationMember'
        type: array
      name:
        type: string
      received_whoswho_attempts:
        items:
          $ref: '#/definitions/dbWhoswhoAttempt'
        type: array
      teams:
        items:
          $ref: '#/definitions/dbTeam'
        type: array
      updated_at:
        format: date-time
        type: string
    type: object
  dbOrganizationMember:
    properties:
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      organization:
        $ref: '#/definitions/dbOrganization'
      organization_id:
        format: int64
        type: string
      role:
        $ref: '#/definitions/dbOrganizationMemberRole'
      updated_at:
        format: date-time
        type: string
      user:
        $ref: '#/definitions/dbUser'
      user_id:
        format: int64
        type: string
    type: object
  dbOrganizationMemberRole:
    default: Undefined
    enum:
    - Undefined
    - Owner
    - Member
    type: string
  dbSeason:
    properties:
      coupons:
        items:
          $ref: '#/definitions/dbCoupon'
        type: array
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      is_default:
        format: boolean
        type: boolean
      name:
        type: string
      organizations:
        items:
          $ref: '#/definitions/dbTeam'
        type: array
      status:
        $ref: '#/definitions/dbSeasonStatus'
      updated_at:
        format: date-time
        type: string
      visibility:
        $ref: '#/definitions/SeasonVisibility'
    type: object
  dbSeasonChallenge:
    properties:
      created_at:
        format: date-time
        type: string
      flavor:
        $ref: '#/definitions/dbChallengeFlavor'
      flavor_id:
        format: int64
        type: string
      id:
        format: int64
        type: string
      instances:
        items:
          $ref: '#/definitions/dbChallengeInstance'
        type: array
      season:
        $ref: '#/definitions/dbSeason'
      season_id:
        format: int64
        type: string
      subscriptions:
        items:
          $ref: '#/definitions/dbChallengeSubscription'
        type: array
      updated_at:
        format: date-time
        type: string
    type: object
  dbSeasonStatus:
    default: UnknownStatus
    enum:
    - UnknownStatus
    - Started
    - Stopped
    type: string
  dbTeam:
    properties:
      challenge_subscriptions:
        items:
          $ref: '#/definitions/dbChallengeSubscription'
        type: array
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      is_default:
        format: boolean
        type: boolean
      members:
        items:
          $ref: '#/definitions/dbTeamMember'
        type: array
      organization:
        $ref: '#/definitions/dbOrganization'
      organization_id:
        format: int64
        type: string
      season:
        $ref: '#/definitions/dbSeason'
      season_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  dbTeamMember:
    properties:
      achievements:
        items:
          $ref: '#/definitions/dbAchievement'
        type: array
      challenge_validations:
        items:
          $ref: '#/definitions/dbChallengeValidation'
        type: array
      coupons:
        items:
          $ref: '#/definitions/dbCoupon'
        type: array
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      items:
        items:
          $ref: '#/definitions/dbInventoryItem'
        type: array
      received_whoswho_attempts:
        items:
          $ref: '#/definitions/dbWhoswhoAttempt'
        type: array
      role:
        $ref: '#/definitions/dbTeamMemberRole'
      sent_whoswho_attempts:
        items:
          $ref: '#/definitions/dbWhoswhoAttempt'
        type: array
      team:
        $ref: '#/definitions/dbTeam'
      team_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
      user:
        $ref: '#/definitions/dbUser'
      user_id:
        format: int64
        type: string
    type: object
  dbTeamMemberRole:
    default: Undefined
    enum:
    - Undefined
    - Owner
    - Member
    type: string
  dbUser:
    properties:
      active_season:
        $ref: '#/definitions/dbSeason'
      active_season_id:
        format: int64
        type: string
      active_team_member:
        $ref: '#/definitions/dbTeamMember'
      active_team_member_id:
        format: int64
        type: string
      created_at:
        format: date-time
        type: string
      deletion_reason:
        type: string
      email:
        type: string
      gravatar_url:
        type: string
      id:
        format: int64
        type: string
      locale:
        type: string
      notifications:
        items:
          $ref: '#/definitions/dbNotification'
        type: array
      oauth_subject:
        type: string
      organization_memberships:
        items:
          $ref: '#/definitions/dbOrganizationMember'
        type: array
      team_memberships:
        items:
          $ref: '#/definitions/dbTeamMember'
        type: array
      updated_at:
        format: date-time
        type: string
      username:
        type: string
      website_url:
        type: string
    title: User defines a User Account / Profile
    type: object
  dbWhoswhoAttempt:
    properties:
      author:
        $ref: '#/definitions/dbUser'
        title: associations
      author_id:
        format: int64
        type: string
      author_team:
        $ref: '#/definitions/dbTeam'
      author_team_id:
        format: int64
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      success:
        format: boolean
        title: fields
        type: boolean
      target_team:
        $ref: '#/definitions/dbTeam'
      target_team_id:
        format: int64
        type: string
      target_user:
        $ref: '#/definitions/dbUser'
      target_user_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  engineChallengeGetOutput:
    properties:
      item:
        $ref: '#/definitions/dbChallenge'
    type: object
  engineChallengeListOutput:
    properties:
      items:
        items:
          $ref: '#/definitions/dbChallenge'
        type: array
    type: object
  engineChallengeSubscriptionCloseInput:
    properties:
      challenge_subscription_id:
        format: int64
        type: string
    type: object
  engineChallengeSubscriptionCloseOutput:
    properties:
      challenge_subscription:
        $ref: '#/definitions/dbChallengeSubscription'
    type: object
  engineChallengeSubscriptionValidateInput:
    properties:
      challenge_subscription_id:
        format: int64
        type: string
      comment:
        type: string
      passphrase:
        type: string
    type: object
  engineChallengeSubscriptionValidateOutput:
    properties:
      challenge_validation:
        $ref: '#/definitions/dbChallengeValidation'
    type: object
  engineOrganizationListOutput:
    properties:
      items:
        items:
          $ref: '#/definitions/dbOrganization'
        type: array
    type: object
  engineSeasonChallengeBuyInput:
    properties:
      season_challenge_id:
        format: int64
        type: string
      team_id:
        format: int64
        type: string
    type: object
  engineSeasonChallengeBuyOutput:
    properties:
      challenge_subscription:
        $ref: '#/definitions/dbChallengeSubscription'
    type: object
  engineSeasonChallengeGetOutput:
    properties:
      item:
        $ref: '#/definitions/dbSeasonChallenge'
    type: object
  engineSeasonChallengeListOutput:
    properties:
      items:
        items:
          $ref: '#/definitions/dbSeasonChallenge'
        type: array
    type: object
  engineTeamGetOutput:
    properties:
      item:
        $ref: '#/definitions/dbTeam'
    type: object
  engineTeamListOutput:
    properties:
      items:
        items:
          $ref: '#/definitions/dbTeam'
        type: array
    type: object
  engineUserDeleteAccountInput:
    properties:
      reason:
        type: string
    type: object
  engineUserDeleteAccountOutput:
    type: object
  engineUserGetSessionOutput:
    properties:
      claims:
        $ref: '#/definitions/ssoClaims'
      is_new_user:
        format: boolean
        type: boolean
      notifications:
        format: int32
        type: integer
      seasons:
        items:
          $ref: '#/definitions/UserGetSessionOutputSeasonAndTeam'
        type: array
      user:
        $ref: '#/definitions/dbUser'
    type: object
  engineUserSetPreferencesInput:
    properties:
      active_season_id:
        format: int64
        type: string
    type: object
  engineUserSetPreferencesOutput:
    type: object
  engineVoid:
    example: {}
    title: Void is an empty message
    type: object
  pathwarengineInfo:
    properties:
      built_at:
        type: string
      built_by:
        type: string
      commit:
        type: string
      uptime:
        format: int32
        type: integer
      version:
        type: string
    type: object
  pathwarengineStatus:
    properties:
      everything_is_ok:
        format: boolean
        type: boolean
    type: object
  ssoActionToken:
    properties:
      asid:
        type: string
      aud:
        type: string
      auth_time:
        format: date-time
        type: string
      azp:
        type: string
      exp:
        format: date-time
        type: string
      iat:
        format: date-time
        type: string
      iss:
        type: string
      jti:
        type: string
      nbf:
        format: float
        type: number
      nonce:
        type: string
      scope:
        type: string
      session_state:
        title: additional keycloak internals
        type: string
      sub:
        type: string
      typ:
        type: string
    title: See https://www.keycloak.org/docs/latest/server_development/index.html#_action_token_anatomy
    type: object
  ssoClaims:
    properties:
      action_token:
        $ref: '#/definitions/ssoActionToken'
      email:
        type: string
      email_verified:
        format: boolean
        type: boolean
      family_name:
        type: string
      given_name:
        type: string
      preferred_username:
        type: string
    type: object
externalDocs:
  description: More about Pathwar
  url: https://github.com/pathwar/pathwar
host: api.pathwar.land
info:
  contact:
    email: staff@pathwar.land
    name: Pathwar Staff
    url: https://github.com/pathwar/pathwar
  license:
    name: (Apache-2.0 OR MIT)
    url: https://github.com/pathwar/pathwar/blob/master/COPYRIGHT
  title: Pathwar API
  version: "1.0"
paths:
  /challenge:
    get:
      operationId: ChallengeGet
      parameters:
      - format: int64
        in: query
        name: challenge_id
        required: false
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineChallengeGetOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /challenge-subscription/close:
    post:
      operationId: ChallengeSubscriptionClose
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/engineChallengeSubscriptionCloseInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineChallengeSubscriptionCloseOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /challenge-subscription/validate:
    post:
      operationId: ChallengeSubscriptionValidate
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/engineChallengeSubscriptionValidateInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineChallengeSubscriptionValidateOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /challenges:
    get:
      operationId: ChallengeList
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineChallengeListOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /info:
    get:
      operationId: ToolInfo
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/pathwarengineInfo'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /organizations:
    get:
      operationId: OrganizationList
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineOrganizationListOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /ping:
    get:
      operationId: ToolPing
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineVoid'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /season-challenge:
    get:
      operationId: SeasonChallengeGet
      parameters:
      - format: int64
        in: query
        name: season_challenge_id
        required: false
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineSeasonChallengeGetOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /season-challenge/buy:
    post:
      operationId: SeasonChallengeBuy
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/engineSeasonChallengeBuyInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineSeasonChallengeBuyOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /season-challenges:
    get:
      operationId: SeasonChallengeList
      parameters:
      - format: int64
        in: query
        name: season_id
        required: false
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineSeasonChallengeListOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /status:
    get:
      operationId: ToolStatus
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/pathwarengineStatus'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /team:
    get:
      operationId: TeamGet
      parameters:
      - format: int64
        in: query
        name: team_id
        required: false
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineTeamGetOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /teams:
    get:
      operationId: TeamList
      parameters:
      - format: int64
        in: query
        name: season_id
        required: false
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineTeamListOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /tool/generate-fake-data:
    post:
      operationId: ToolGenerateFakeData
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineVoid'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /tool/sql-dump:
    get:
      operationId: ToolDBDump
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/dbDump'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /user/delete-account:
    post:
      operationId: UserDeleteAccount
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/engineUserDeleteAccountInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineUserDeleteAccountOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /user/preferences:
    post:
      operationId: UserSetPreferences
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/engineUserSetPreferencesInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineUserSetPreferencesOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
  /user/session:
    get:
      operationId: UserGetSession
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/engineUserGetSessionOutput'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
      tags:
      - Engine
produces:
- application/json
schemes:
- https
- wss
security:
- ApiKeyAuth: []
  BasicAuth: []
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Key
    type: apiKey
  BasicAuth:
    type: basic
